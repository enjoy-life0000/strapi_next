This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-26T11:25:12.081Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
messages/
  en.json
  fr.json
public/
  robots.txt
src/
  app/
    [locale]/
      [[...slug]]/
        page.tsx
      blog/
        [slug]/
          page.tsx
      landing/
        [[...slug]]/
          page.tsx
      projects/
        [slug]/
          page.tsx
      services/
        [slug]/
          page.tsx
      layout.tsx
      not-found.tsx
      page.tsx.old
    sitemap.ts
  components/
    elements/
      Button.tsx
      ClientCard.tsx
      CultureCard.tsx
      ErrorBoundary.tsx
      FeatureCard.tsx
      PostCard.tsx
      ProjectCard.tsx
      ServiceCard.tsx
      Testimonial.tsx
    form/
      components/
        DatePicker.tsx
        DropZone.tsx
        SelectInput.tsx
        TextArea.tsx
        TextInput.tsx
      utils/
        FormData.tsx
      ContactForm.tsx
    images/
      Icon.tsx
      ImageNextCloudinary.tsx
      imageNextCloudinaryBasic.tsx
      Logo.tsx
      StylizedImage.tsx
    sections/
      dynamic/
        Contact/
          ContactSection.tsx
          Offices.tsx
        CTA/
          CTA.tsx
        Culture/
          CultureCard/
            CultureCard1.tsx
          CultureSection.tsx
        Features/
          FeaturesSection.tsx
        Hero/
          HeroSection.tsx
        PageIntro/
          PageIntroSection.tsx
        Posts/
          PostCard/
            PostCard1.tsx
            PostCard2.tsx
          PostsSection.tsx
        PricingSection/
          PricingSection.tsx
        Projects/
          ProjectCard/
            ProjectCard1.tsx
          ProjectsSection.tsx
        References/
          ClientCard/
            ClientCard1.tsx
          ReferenceSection.tsx
        Services/
          ServiceCard/
            ServiceCard1.tsx
          ServiceSection.tsx
        Teams/
          TeamsCard/
            TeamCard1.tsx
          TeamsCardSection.tsx
        TestimonialSection.tsx
      BlogPageIntro.tsx
      ContactFooter.tsx
      Footer.tsx
      Navigation.tsx
      PageIntro.tsx
      Pagination.tsx
      SectionIntro.tsx
      SocialMedia.tsx
      TagList.tsx
    ui/
      BasicMarkdown.tsx
      Border.tsx
      button.tsx
      calendar.tsx
      Container.tsx
      FadeIn.tsx
      Fetcher.tsx.off
      form.tsx
      GrayscaleTransitionImage.tsx
      GridList.tsx
      GridPattern.tsx
      input.tsx
      label.tsx
      List.tsx
      MDXComponents.tsx
      message-markdown-memoized.tsx
      message-markdown.tsx
      pagination.tsx
      popover.tsx
      ReadMore.tsx
      RootLayout.tsx
      Section.tsx
      select.tsx
      StatList.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      TopTip.tsx
  hooks/
    use-toast.ts
    useSWRConfig.ts
  i18n/
    request.ts
    routing.ts
  images/
    clients/
      bright-path/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
      family-fund/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
      green-life/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
      home-work/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
      mail-smirk/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
      meetme/
        meetme-logo-380x380.svg
      north-adventures/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
      phobia/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
      unseal/
        logo-dark.svg
        logo-light.svg
        logomark-dark.svg
        logomark-light.svg
    logo-tagadart.svg
  lib/
    componentResolver.tsx
    helper.ts
    mdx.ts
    seo.ts
    utils.ts
  request/
    fetch.tsx
    Fetcher.tsx
    populate.ts
    request.tsx
  styles/
    base.css
    components.css
    tailwind.css
    typography.css
    utilities.css
  types/
    client.ts
    contact.ts
    feature.ts
    global.d.ts
    member.ts
    post.ts
    project.ts
    service.ts
    tag.ts
    team.ts
    testimonial.ts
  middleware.ts
.env.example
.eslintrc.json
.gitignore
CHANGELOG.md
components.json
mdx-components.tsx
next-sitemap.config.js
next.config.mjs
package.json
postcss.config.js
prettier.config.js
README.md
tagadart-ts.code-workspace
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: messages/en.json
================
{
  "Project": {
    "title": "Our Projects",
    "expertise": "Our Expertise",
    "content": "Description",
    "view_more": "View More",
    "client": "Client",
    "year": "Year",
    "service": "Services",
    "website": "Website"
  },
  "Service": {
    "view_more": "View More",
    "content": "Description"
  },
  "HomePage": {
    "title": "Hello World",
    "about": "About"
  },
  "General": {
    "read_more": "Read More",
    "read_less": "Read Less"
  },
  "Pricing": {
    "btn_pricing": "Get Started",
    "most_popular": "Most Popular"
  },
  "Contact": {
    "title": "Tell us more about your projects",
    "button_contact": "Contact Us",
    "offices": "Our Offices",
    "email_us": "Email Us",
    "budget": "Your Budget",
    "subject": "Subject",
    "fullname": "Full Name",
    "name": "Your Name",
    "email": "Your Email",
    "media": "Attachment(s)",
    "message": "Your Message",
    "phone": "Your Phone",
    "company": "Your Company",
    "follow_us": "Follow Us",
    "budget_label01": "Less than 5,000 CHF",
    "budget_label02": "10,000 CHF - 20,000 CHF",
    "budget_label03": "20,000 CHF - 50,000 CHF",
    "budget_label04": "50,000 CHF - 100,000 CHF",
    "form_submit_title": "Your message has been successfully sent",
    "form_submit_description": "Thank you for your message. We will contact you as soon as possible."
  },
  "Navigation": {
    "home": "Home",
    "project": "Projects",
    "services": "Services",
    "about": "About",
    "blog": "Blog",
    "contact": "Contact Us",
    "follow_us": "Follow Us"
  },
  "Team": {
    "title": "Meet Our Team",
    "view_more": "View More",
    "content": "Description"
  },
  "Reference": {
    "title": "References",
    "view_more": "View More",
    "content": "Description"
  },
  "Culture": {
    "title": "Culture",
    "view_more": "View More",
    "content": "Description"
  },
  "Pagination": {
    "previous": "Previous",
    "next": "Next",
    "morePages": "More Pages"
  }
}

================
File: messages/fr.json
================
{
  "Project": {
    "title": "Nos projets",
    "expertise": "Notre expertise",
    "content": "Description",
    "view_more": "Voir plus",
    "client": "Client",
    "year": "Année",
    "service": "Services",
    "website": "Site web"
  },
  "Service": {
    "view_more": "Voir plus",
    "content": "Description"
  },
  "HomePage": {
    "title": "Bonjour Monde",
    "about": "A propos"
  },
  "General": {
    "read_more": "Lire plus",
    "read_less": "Lire moins"
  },
  "Pricing": {
    "btn_pricing": "Commencez",
    "most_popular": "Le plus populaire"
  },
  "Contact": {
    "title": "Dites-nous en plus sur vos projets",
    "button_contact": "Contactez-nous",
    "offices": "Nos bureaux",
    "email_us": "Ecrivez-nous",
    "budget": "Votre budget",
    "subject": "Sujet",
    "fullname": "Nom complet",
    "name": "Votre nom",
    "email": "Votre email",
    "media": "Pièce(s) jointe(s)",
    "message": "Votre message",
    "phone": "Votre téléphone",
    "company": "Votre entreprise",
    "follow_us": "Suivez-nous",
    "budget_label01": "Moins de 5'000CHF",
    "budget_label02": "10 000CHF - 20 000CHF",
    "budget_label03": "20 000CHF - 50 000CHF",
    "budget_label04": "50 000CHF - 100 000CHF",
    "form_submit_title": "Votre message a été envoyé avec succès",
    "form_submit_description": "Nous vous remercions pour votre message. Nous vous contacterons dans les plus brefs délais."
  },
  "Navigation": {
    "home": "Accueil",
    "project": "Projets",
    "services": "Services",
    "about": "A propos",
    "blog": "Blog",
    "contact": "Contactez-nous",
    "follow_us": "Suivez-nous"
  },
  "Team": {
    "title": "L'équipe",
    "view_more": "Voir plus",
    "content": "Description"
  },
  "Reference": {
    "title": "Références",
    "view_more": "Voir plus",
    "content": "Description"
  },
  "Culture": {
    "title": "Culture",
    "view_more": "Voir plus",
    "content": "Description"
  },
  "Pagination": {
    "previous": "Précédent",
    "next": "Suivant",
    "morePages": "Plus de pages"
  }
}

================
File: public/robots.txt
================
# *
User-agent: *
Allow: /

# Host
Host: http://localhost:3000

================
File: src/app/[locale]/[[...slug]]/page.tsx
================
import type { Metadata } from 'next'

import { PageIntro } from '@/types/global'
import { Container } from '@/components/ui/Container'
import { generateSlugPageMetadata } from '@/lib/seo'
import { componentResolver } from '@/lib/componentResolver'
import { fetchPageBySlug } from '@/request/fetch'

type Props = {
  params: {
    lang: string
    slug: string
  }
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const page = await fetchPageBySlug(params.slug, params.lang)

  return generateSlugPageMetadata({ page })
}

export default async function PageRoute({ params }: Props) {
  const page = await fetchPageBySlug(params.slug, params.lang)

  if (!page || !page.data || page.data.length === 0) return null

  type Section = {
    id: number
    __component: string
    [key: string]: any
  }

  const contentSections = page?.data[0]?.structure
  return (
    <Container>
      {contentSections?.map((section: Section & PageIntro) =>
        componentResolver({ section, designType: section.designType }),
      )}
    </Container>
  )
}

================
File: src/app/[locale]/blog/[slug]/page.tsx
================
// app/[locale]/blog/[id]/page.tsx
import type { Metadata } from 'next'
import { Border } from '@/components/ui/Border'
import { FadeIn } from '@/components/ui/FadeIn'
import { Post } from '@/types/post'
import { fetchPost } from '@/request/fetch'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { BlogPageIntroSections } from '@/components/sections/BlogPageIntro'
import { generatePageMetadata } from '@/lib/seo'
import { componentResolver } from '@/lib/componentResolver'
import { notFound } from 'next/navigation'

type Props = {
  params: {
    slug: string
    locale: string
  }
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const post = await fetchPost(params.slug)
  return generatePageMetadata({
    data: post,
    type: 'blog',
    id: params.slug,
  })
}

export default async function ViewPost({ params: { slug } }: Props) {
  const post: Post = await fetchPost(slug)
  if (!post) {
    notFound()
  }

  const contentSections = post?.structure

  return (
    <article>
      <Border className="pt-16">
        <div className="mt-24 sm:mt-32 lg:mt-40">
          <FadeIn>
            <header className="mx-auto flex max-w-5xl flex-col text-center">
              <BlogPageIntroSections
                post={post}
                showCover={true}
                {...post.pageIntro}
              />
            </header>
          </FadeIn>
          <FadeIn
            className="[&>*]:mx-auto [&>*]:max-w-5xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0"
            key={slug}
            style={{ opacity: 1, transform: 'none' }}
          >
            <div>
              {contentSections?.map((section: any) =>
                componentResolver({ section, designType: 1 }),
              )}
            </div>
          </FadeIn>
        </div>
      </Border>
    </article>
  )
}

================
File: src/app/[locale]/landing/[[...slug]]/page.tsx
================
import FeaturesSection from '@/components/sections/dynamic/Features/FeaturesSection'
import PostsSection from '@/components/sections/dynamic/Posts/PostsSection'
import ProjectsSection from '@/components/sections/dynamic/Projects/ProjectsSection'
import ServicesSection from '@/components/sections/dynamic/Services/ServiceSection'
import TeamsSection from '@/components/sections/dynamic/Teams/TeamsCardSection'
import ReferenceSection from '@/components/sections/dynamic/References/ReferenceSection'
import ContactSection from '@/components/sections/dynamic/Contact/ContactSection'
import CultureSection from '@/components/sections/dynamic/Culture/CultureSection'
import TestimonialSection from '@/components/sections/dynamic/TestimonialSection'
import PageIntroSection from '@/components/sections/dynamic/PageIntro/PageIntroSection'
import HeroSection from '@/components/sections/dynamic/Hero/HeroSection'
import CTASection from '@/components/sections/dynamic/CTA/CTA'
import PricingSection from '@/components/sections/dynamic/PricingSection/PricingSection'

import { fetchAxiosAPI } from '@/request/request'
import { PageIntro } from '@/types/global'
import { Container } from '@/components/ui/Container'

type Props = {
  params: {
    lang: string
    slug: string
  }
}

async function getPageBySlug(slug: string, lang: string) {
  const querySlug = slug === undefined ? 'home' : slug
  const path = `/pages`
  const urlParamsObject = {
    filters: {
      slug: {
        $eq: querySlug,
      },
    },
    locale: lang,
    populate: {
      structure: {
        on: {
          'section.blog-section': {
            populate: [
              'sectionIntro',
              'posts',
              'posts.pageIntro',
              'posts.pageIntro.cover',
              'posts.author',
              'posts.author.avatar',
            ],
          },
          'section.projects-section': {
            populate: [
              'sectionIntro',
              'projects',
              'projects.pageIntro',
              'projects.pageIntro.cover',
              'projects.logo',
            ],
          },
          'section.contact-section': {
            populate: [
              'sectionIntro',
              'content',
              'content.offices',
              'content.emails',
              'content.socials',
            ],
          },

          'section.services-section': {
            populate: [
              'sectionIntro',
              'our_services',
              'our_services.pageIntro',
              'our_services.pageIntro.cover',
            ],
          },
          'section.pricing-section': {
            populate: ['sectionIntro', 'cards', 'cards.features'],
          },
          'section.team-section': {
            populate: [
              'sectionIntro',
              'members',
              'members.fullname',
              'members.avatar',
              'members.posts.pageIntro',
            ],
          },
          'section.reference-section': {
            populate: [
              'sectionIntro',
              'clients',
              'clients.name',
              'clients.logo',
            ],
          },
          'section.culture-section': {
            populate: ['sectionIntro', 'values', 'values.title'],
          },
          'section.cta': {
            populate: ['sectionIntro', 'buttons'],
          },

          'section.page-intro': {
            populate: ['title', 'eyebrow', 'content', 'cover'],
          },
          'section.features-section': {
            populate: ['sectionIntro', 'features'],
          },
          'section.hero-section': {
            populate: ['sectionIntro', 'sectionIntro.cover', 'buttons', 'logo'],
          },
        },
      },
    },
  }
  return await fetchAxiosAPI(path, urlParamsObject)
}

export default async function PageRoute({ params }: Props) {
  const page = await getPageBySlug(params.slug, params.lang)
  if (!page || !page.data || page.data.length === 0) return null

  type Section = {
    id: number
    __component: string
    [key: string]: any
  }

  const componentResolver = (section: any) => {
    switch (section.__component) {
      case 'section.blog-section':
        return (
          <PostsSection
            key={section.id}
            postsSection={section}
            designType={1}
          />
        )
      case 'section.projects-section':
        return (
          <ProjectsSection
            key={section.id}
            projectsSection={section}
            designType={2}
          />
        )

      case 'section.services-section':
        return (
          <ServicesSection
            key={section.id}
            servicesSection={section}
            designType={2}
          />
        )
      case 'section.reference-section':
        return (
          <ReferenceSection
            key={section.id}
            referenceSection={section}
            designType={2}
          />
        )
      case 'section.cta':
        return (
          <CTASection key={section.id} ctaSection={section} designType={10} />
        )
      case 'section.pricing-section':
        return (
          <PricingSection
            key={section.id}
            pricingSection={section}
            designType={10}
          />
        )
      case 'section.team-section':
        return (
          <TeamsSection
            key={section.id}
            teamsSection={section}
            designType={2}
          />
        )
      case 'section.culture-section':
        return (
          <CultureSection
            key={section.id}
            culturesSection={section}
            designType={2}
          />
        )
      case 'section.contact-section':
        return (
          <ContactSection
            key={section.id}
            contactSection={section}
            designType={2}
          />
        )
      case 'section.cta':
        return (
          <ContactSection
            key={section.id}
            contactSection={section}
            designType={2}
          />
        )
      case 'section.page-intro':
        return (
          <PageIntroSection
            key={section.id}
            pageIntroSection={section}
            designType={2}
          />
        )

      case 'section.features-section':
        return (
          <FeaturesSection
            key={section.id}
            featuresSection={section}
            designType={10}
          />
        )
      case 'section.hero-section':
        return (
          <HeroSection key={section.id} heroSection={section} designType={10} />
        )

      case 'section.testimonials':
        return (
          <TestimonialSection key={section.id} testimonialSection={section} />
        )

      default:
        return null
    }
  }

  const contentSections = page?.data[0]?.structure

  return (
    <Container>
      {contentSections?.map((section: Section & PageIntro) =>
        componentResolver(section),
      )}
    </Container>
  )
}

================
File: src/app/[locale]/projects/[slug]/page.tsx
================
import type { Metadata } from 'next'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Testimonial } from '@/components/elements/Testimonial'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { GrayscaleTransitionImage } from '@/components/ui/GrayscaleTransitionImage'

import { Project } from '@/types/project'
import { fetchProject } from '@/request/fetch'
import { PageIntroSections } from '@/components/sections/PageIntro'
import { getTranslations } from 'next-intl/server'
import { componentResolver } from '@/lib/componentResolver'
import { generatePageMetadata } from '@/lib/seo'

type Props = {
  params: {
    slug: string
  }
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const project = await fetchProject(params.slug)
  console.log('paramas: ', params)
  return generatePageMetadata({
    data: project,
    type: 'project',
    id: params.slug,
  })
}

export default async function ViewProjectPage({ params: { slug } }: Props) {
  const project: Project = await fetchProject(slug)
  if (!project) return null

  const contentSections = project?.structure
  const { pageIntro } = project || ''
  const t = await getTranslations('Project')

  return (
    <Container className="mt-24 sm:mt-32 lg:mt-40">
      <FadeIn>
        <header>
          <PageIntroSections showCover={false} centered={true} {...pageIntro} />
          <FadeIn>
            <div className="mt-24 border-t border-neutral-200 bg-white/50 sm:mt-32 lg:mt-24">
              <>
                <div className="mx-auto max-w-5xl">
                  <dl className="-mx-6 grid grid-cols-1 text-sm text-neutral-950 sm:mx-0 sm:grid-cols-4">
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('client')}</dt>
                      <dd>{project.client}</dd>
                    </div>
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('year')}</dt>
                      <dd>
                        <time dateTime={project.year}>{project.year}</time>
                      </dd>
                    </div>
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('service')}</dt>
                      <dd>{project.service}</dd>
                    </div>
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('website')}</dt>
                      <dd>
                        <a
                          href={project.link}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          {project.link}
                        </a>
                      </dd>
                    </div>
                  </dl>
                </div>
              </>
            </div>

            {project?.pageIntro?.cover?.url && (
              <div className="max-w-[76rem0 -my-px mx-auto">
                <GrayscaleTransitionImage
                  src={`${project?.pageIntro?.cover?.url}`}
                  quality={90}
                  className="w-full py-6"
                  sizes="(min-width: 1216px) 76rem, 100vw"
                  priority
                  alt={project.pageIntro?.title}
                  width={800}
                  height={600}
                />
              </div>
            )}
          </FadeIn>
        </header>
      </FadeIn>

      <FadeIn key={slug} style={{ opacity: 1, transform: 'none' }}>
        <div className="[&>*]:mx-auto [&>*]:max-w-5xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0">
          {contentSections?.map((section: any) =>
            componentResolver({ section, designType: 1 }),
          )}
        </div>
      </FadeIn>
    </Container>
  )
}

================
File: src/app/[locale]/services/[slug]/page.tsx
================
// app/[locale]/services/[id]/page.tsx
import type { Metadata } from 'next'
import { Service } from '@/types/service'
import { fetchService } from '@/request/fetch'
import { Border } from '@/components/ui/Border'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { getTranslations } from 'next-intl/server'
import { PageIntroSections } from '@/components/sections/PageIntro'
import { generatePageMetadata } from '@/lib/seo'
import { notFound } from 'next/navigation'
import { componentResolver } from '@/lib/componentResolver'

type Props = {
  params: {
    slug: string
    locale: string
  }
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const service = await fetchService(params.slug)
  return generatePageMetadata({
    data: service,
    type: 'service',
    id: params.slug,
  })
}

async function getService(slug: string) {
  const service = await fetchService(slug)
  if (!service) return null
  return service
}

export default async function ViewServicePage({ params: { slug } }: Props) {
  const [service, t] = await Promise.all([
    getService(slug),
    getTranslations('Service'),
  ])

  if (!service) {
    notFound()
  }

  const contentSections = service?.structure

  return (
    <article>
      <Border className="pt-16">
        <div className="mt-24 sm:mt-32 lg:mt-40">
          <FadeIn>
            <header className="mx-auto flex max-w-5xl flex-col text-center">
              <PageIntroSections
                showCover={false}
                centered
                {...service.pageIntro}
              />
            </header>
          </FadeIn>
          <FadeIn
            className="[&>*]:mx-auto [&>*]:max-w-5xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0"
            key={slug}
            style={{ opacity: 1, transform: 'none' }}
          >
            <div>
              {contentSections?.map((section: any) =>
                componentResolver({ section, designType: 1 }),
              )}
            </div>
          </FadeIn>
          {/* <FadeIn className="main_content mt-24 sm:mt-32 lg:mt-40 [&>*]:mx-auto [&>*]:max-w-3xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0">
            {service.content && (
              <div>
                <h2 className="text-xl">{t('content')}</h2>
                <BasicMarkdown>{service.content}</BasicMarkdown>
              </div>
            )}
          </FadeIn> */}
        </div>
      </Border>
    </article>
  )
}

================
File: src/app/[locale]/layout.tsx
================
import { type Metadata } from 'next'
import { Toaster } from '@/components/ui/toaster'

import '@/styles/tailwind.css'

import { NextIntlClientProvider } from 'next-intl'
import { getMessages } from 'next-intl/server'
import { RootLayout } from '@/components/ui/RootLayout'
import Script from 'next/script'
import { Inter } from 'next/font/google'
import localFont from 'next/font/local'

export const metadata: Metadata = {
  title: {
    template: '%s -  Agence Digitale Écoresponsable - Tagadart',
    default: 'Tagadart - Agence Digitale Eco Responsable Lausanne',
  },
  icons: {
    icon: '/favicon.ico',
  },
}

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const monaSans = localFont({
  src: '../../../public/fonts/Mona-Sans.var.woff2',
  variable: '--font-mona-sans',
  display: 'swap',
})

export default async function LocaleLayout({
  children,
  params: { locale },
}: {
  children: React.ReactNode
  params: { locale: string }
}) {
  const messages = await getMessages()

  return (
    <html
      lang={locale}
      className={`h-full bg-neutral-950 text-base antialiased ${inter.variable} ${monaSans.variable}`}
    >
      <head>
        <Script
          src="https://www.googletagmanager.com/gtag/js?id=AW-16700186470"
          strategy="afterInteractive"
        />
        <Script id="google-analytics" strategy="afterInteractive">
          {`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'AW-16700186470');
        `}
        </Script>
      </head>
      <body className="flex min-h-full flex-col">
        <NextIntlClientProvider messages={messages}>
          <RootLayout>{children}</RootLayout>
          <Toaster />
        </NextIntlClientProvider>
      </body>
    </html>
  )
}

================
File: src/app/[locale]/not-found.tsx
================
import Link from 'next/link'

import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'

export default function NotFound() {
  return (
    <Container className="flex h-full items-center pt-24 sm:pt-32 lg:pt-40">
      <FadeIn className="flex max-w-xl flex-col items-center text-center">
        <p className="font-display text-4xl font-semibold text-neutral-950 sm:text-5xl">
          404
        </p>
        <h1 className="mt-4 font-display text-2xl font-semibold text-neutral-950">
          Page not found
        </h1>
        <p className="mt-2 text-sm text-neutral-600">
          Sorry, we couldn’t find the page you’re looking for.
        </p>
        <Link
          href="/"
          className="mt-4 text-sm font-semibold text-neutral-950 transition hover:text-neutral-700"
        >
          Go to the home page
        </Link>
      </FadeIn>
    </Container>
  )
}

================
File: src/app/[locale]/page.tsx.old
================
import { type Metadata } from 'next'

import { ContactFooter } from '@/components/sections/ContactFooter'

import BlogSection from '@/components/sections/BlogSection'

import ProjectsSection from '@/components/sections/ProjectsSection'
import ServicesSection from '@/components/sections/ServicesSection'
import {
  fetchClients,
  fetchHomePage,
  fetchPosts,
  fetchProjects,
  fetchServices,
} from '@/request/fetch'
import { PageIntroSections } from '@/components/sections/PageIntro'
import ClientsSection from '@/components/sections/Clients'

export const metadata: Metadata = {
  description:
    'Agence de développement web et mobile en Suisse. Nous créons des applications web et mobiles sur mesure pour les entreprises et les startups.',
}

export default async function Home() {
  let homeData = null
  let posts = null
  let projects = null
  let services = null
  let clients = null

  try {
    homeData = await fetchHomePage()
    posts = await fetchPosts()
    projects = await fetchProjects()
    services = await fetchServices()
    clients = await fetchClients()
  } catch (error) {
    console.error('Failed to load data:', error)
    return <div>Failed to load data</div>
  }

  const {
    pageIntro,
    projectsSection,
    servicesSection,
    referencesSection,
    blogSection,
  } = homeData || ''

  return (
    <>
      <PageIntroSections {...pageIntro} />
      <ProjectsSection projectsSection={projectsSection} projects={projects} />
      <ServicesSection servicesSection={servicesSection} services={services} />
      <BlogSection blogSection={blogSection} posts={posts} />
      <ClientsSection clients={clients} referencesSection={referencesSection} />
      <ContactFooter />
      {/* <referencesSection /> //TODO : later add client/reference section */}
    </>
  )
}

================
File: src/app/sitemap.ts
================
import { MetadataRoute } from 'next'
import { fetchPosts, fetchProjects, fetchServices } from '@/request/fetch'

type SitemapRoute = {
  url: string
  lastModified: Date
  changeFrequency: 'yearly' | 'monthly' | 'weekly' | 'daily'
  priority: number
}

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'

  // Define static routes
  const staticRoutes: SitemapRoute[] = [
    {
      url: baseUrl,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: `${baseUrl}/blog`,
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/services`,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/projects`,
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/contact`,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 0.5,
    },
  ]

  const [projects, posts, services] = await Promise.all([
    fetchProjects(),
    fetchPosts(),
    fetchServices(),
  ])

  const postRoutes = posts.map((post: any) => ({
    url: `${baseUrl}/posts/${post.id}`,
    lastModified: new Date(post.updatedAt),
    changeFrequency: 'weekly' as const,
    priority: 0.6,
  }))

  const serviceRoutes = services.map((service: any) => ({
    url: `${baseUrl}/services/${service.id}`,
    lastModified: new Date(service.updatedAt),
    changeFrequency: 'monthly' as const,
    priority: 0.7,
  }))

  const projectRoutes = projects.map((project: any) => ({
    url: `${baseUrl}/projects/${project.id}`,
    lastModified: new Date(project.updatedAt),
    changeFrequency: 'monthly' as const,
    priority: 0.8,
  }))

  return [...staticRoutes, ...projectRoutes, ...serviceRoutes, ...postRoutes]
}

================
File: src/components/elements/Button.tsx
================
import Link from 'next/link'
import clsx from 'clsx'

type ButtonProps = {
  invert?: boolean
} & (
  | React.ComponentPropsWithoutRef<typeof Link>
  | (React.ComponentPropsWithoutRef<'button'> & { href?: undefined })
)

export function Button({
  invert = false,
  className,
  children,
  ...props
}: ButtonProps) {
  className = clsx(
    className,
    'inline-flex rounded-full px-4 py-1.5 text-sm font-semibold transition',
    invert
      ? 'bg-white text-neutral-950 hover:bg-neutral-200'
      : 'bg-neutral-950 text-white hover:bg-neutral-800',
  )

  let inner = <span className="relative top-px">{children}</span>

  if (typeof props.href === 'undefined') {
    return (
      <button className={className} {...props}>
        {inner}
      </button>
    )
  }

  return (
    <Link className={className} {...props}>
      {inner}
    </Link>
  )
}

================
File: src/components/elements/ClientCard.tsx
================
import { Client } from '@/types/client'
import React from 'react'
import { FadeIn } from '../ui/FadeIn'
import { Border } from '../ui/Border'
import { Cloud } from 'lucide-react'
import NextCloudinaryImage from '../images/ImageNextCloudinary'

interface ClientCardProps {
  client: Client
}

const ClientCard: React.FC<ClientCardProps> = ({ client }) => {
  return (
    <>
      <FadeIn className="overflow-hidden">
        {client?.logo && (
          <NextCloudinaryImage
            width={160}
            height={80}
            alt={client?.logo?.alternativeText}
            src={`${client?.logo?.url}`}
            crop="fit"
          />
        )}
      </FadeIn>
      {/* <div className="text-center">
        <h2 className="text-xl font-bold">{client.name}</h2>
      </div> */}
    </>
  )
}

export default ClientCard

================
File: src/components/elements/CultureCard.tsx
================
// components/ui/CultureCard.tsx

import React from 'react'
import { GridListItem } from '../ui/GridList'
import { Culture } from '@/types/global'

interface CultureCardProps {
  culture: Culture
}

const CultureCard: React.FC<CultureCardProps> = ({ culture }) => {
  return (
    <GridListItem key={culture.id} title={culture.title} invert>
      {culture.content}
    </GridListItem>
  )
}

export default CultureCard

================
File: src/components/elements/ErrorBoundary.tsx
================
import React, { Component, ReactNode, ErrorInfo } from 'react'

interface ErrorBoundaryProps {
  children: ReactNode
}

interface ErrorBoundaryState {
  hasError: boolean
}

class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    // Update state so the next render will show the fallback UI
    return { hasError: true }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    // You can use your own error logging service here
    console.log({ error, errorInfo })
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return (
        <div>
          <h2>Oops, there is an error!</h2>
          <button
            type="button"
            onClick={() => this.setState({ hasError: false })}
          >
            Try again?
          </button>
        </div>
      )
    }

    // Return children components in case of no error
    return this.props.children
  }
}

export default ErrorBoundary

================
File: src/components/elements/FeatureCard.tsx
================
import React from 'react'

interface FeatureProps {
  title: string
  icon: React.ComponentType<any>
  description: string
  href: string
  eyebrow: string
  pageIntro: { title: string; content: string } // Added pageIntro property
}

interface FeatureCardProps {
  feature: FeatureProps
}

const FeatureCard: React.FC<FeatureCardProps> = ({ feature }) => {
  return (
    <div className="bg-white py-8 sm:py-12">
      <div className="mx-auto max-w-7xl px-6 lg:px-8">
        <div className="mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none">
          <dl className="g grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-3">
            <div key={feature.pageIntro?.title} className="flex flex-col">
              <dt className="flex items-center gap-x-3 text-base font-semibold leading-7 text-gray-900">
                {/* <feature.icon
                  aria-hidden="true"
                  className="h-5 w-5 flex-none text-indigo-600"
                /> */}
                {feature.pageIntro?.title}
              </dt>
              <dd className="mt-4 flex flex-auto flex-col text-base leading-7 text-gray-600">
                <p className="flex-auto">{feature.pageIntro?.content}</p>
                <p className="mt-6">
                  <a
                    href={feature.href}
                    className="text-sm font-semibold leading-6 text-indigo-600"
                  >
                    Learn more <span aria-hidden="true">→</span>
                  </a>
                </p>
              </dd>
            </div>
          </dl>
        </div>
      </div>
    </div>
  )
}

export default FeatureCard

================
File: src/components/elements/PostCard.tsx
================
import React from 'react'
import Link from 'next/link'

import { Post } from '@/types/post'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import BasicMarkdown from '../ui/BasicMarkdown'
import { formatDate, truncateWithEllipses } from '@/lib/helper'

interface PostCardProps {
  post: Post
  designType?: 'default' | 'alternate'
}

const renderContentOld = (post: Post, designType?: 'default' | 'alternate') => {
  switch (designType) {
    case 'alternate':
      return (
        <article
          key={post.id}
          className="flex flex-col items-start justify-between"
        >
          <div className="relative w-full">
            {post?.pageIntro?.cover?.url && (
              <NextCloudinaryImage
                alt={post.pageIntro.title}
                src={post.pageIntro.cover.url}
                width={300}
                height={200}
                className="aspect-[16/9] w-full rounded-2xl bg-gray-100 object-cover sm:aspect-[2/1] lg:aspect-[3/2]"
              />
            )}
            <div className="absolute inset-0 rounded-2xl ring-1 ring-inset ring-gray-900/10" />
          </div>
          <div className="max-w-xl">
            <div className="mt-8 flex items-center gap-x-4 text-xs">
              <time className="text-gray-500">
                {formatDate(post.publishedAt, 'fr')}
              </time>
              {/* <Link
              href={post.category.href}
              className="relative z-10 rounded-full bg-gray-50 px-3 py-1.5 font-medium text-gray-600 hover:bg-gray-100"
            >
              {post.category.title}
            </Link> */}
            </div>
            <div className="group relative">
              <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
                <Link href={`/blog/${post.id}`}>
                  <span className="absolute inset-0" />
                  {post.pageIntro.title}
                </Link>
              </h3>
              <p className="mt-5 line-clamp-3 text-sm leading-6 text-gray-600">
                {truncateWithEllipses(post.pageIntro.content, 150)}
              </p>
            </div>
            <div className="relative mt-8 flex items-center gap-x-4">
              {post.author?.avatar && (
                <NextCloudinaryImage
                  alt={post.author.fullname}
                  src={post.author.avatar.url}
                  width={48}
                  height={48}
                  className="rounded-full bg-gray-100"
                />
              )}
              <div className="text-sm leading-6">
                <p className="font-semibold text-gray-900">
                  <span className="absolute inset-0" />
                  {post.author.fullname}
                </p>
                <p className="text-gray-600">{post.author.title}</p>
              </div>
            </div>
          </div>
        </article>
      )

    default:
      return (
        <article
          key={post.id}
          className="relative isolate mb-24 flex flex-col gap-8 lg:flex-row"
        >
          <div className="mx-auto text-center">
            {post?.pageIntro?.cover?.url && (
              <NextCloudinaryImage
                src={post.pageIntro.cover.url}
                alt={post.pageIntro.title}
                width={320}
                height={320}
                // crop={'fill'}
                className="inset-0 rounded-2xl object-cover"
              />
            )}
          </div>
          <div>
            <div className="flex items-center gap-x-4 text-xs">
              <time className="text-gray-500">
                {formatDate(post.publishedAt, 'fr')}
              </time>
            </div>
            <div className="group relative max-w-xl">
              <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
                <Link href={`/blog/${post.id}`}>
                  <span className="absolute inset-0" />
                  {post.pageIntro.title}
                </Link>
              </h3>

              <div className="typography">
                <BasicMarkdown>
                  {truncateWithEllipses(post.pageIntro.content, 150)}
                </BasicMarkdown>
              </div>
              {post?.author && (
                <div className="mt-6 flex items-center">
                  {post?.author?.avatar && (
                    <NextCloudinaryImage
                      src={post.author.avatar.url}
                      alt={post.author.fullname}
                      width={50}
                      height={50}
                      className="h-12 w-12 rounded-full object-cover"
                    />
                  )}
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-900">
                      {post.author.fullname}
                    </p>
                    <p className="text-sm text-gray-500">{post.author.title}</p>
                  </div>
                </div>
              )}
            </div>
            <div className="mt-6 border-b border-gray-200"></div>
          </div>
        </article>
      )
  }
}

const PostCard: React.FC<PostCardProps> = ({ post, designType }) => {
  return renderContentOld(post, designType)
}

export default PostCard

================
File: src/components/elements/ProjectCard.tsx
================
import React from 'react'
import { FadeIn } from '@/components/ui/FadeIn'
import Image from 'next/image'
import { Button, buttonVariants } from '@/components/ui/button'

import { Project } from '@/types/project'
import ReactMarkdown from 'react-markdown'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import BasicMarkdown from '../ui/BasicMarkdown'
import { truncateWithEllipses } from '@/lib/helper'

interface ProjectCardProps {
  project: Project
}

const ProjectCard: React.FC<ProjectCardProps> = async ({ project }) => {
  const t = await getTranslations('Project')

  return (
    <FadeIn key={project.id} className="flex">
      <Link href={`/projects/${project.id}`}>
        <article className="relative flex w-full flex-col rounded-3xl p-6 ring-1 ring-neutral-950/5 transition hover:bg-neutral-50 sm:p-8">
          <div className="flex items-center">
            <div>
              <NextCloudinaryImage
                src={project.logo.url}
                alt={project.client}
                width={100}
                height={20}
                crop="fill"
                className="mr-3"
              />
            </div>
          </div>
          {project.pageIntro.cover && (
            <div className="my-6">
              <NextCloudinaryImage
                src={project.pageIntro.cover.url}
                alt={project.pageIntro.title}
                width={600}
                height={500}
                className="rounded-md"
                crop="fill"
              />
            </div>
          )}

          <p className="mt-6 flex gap-x-2 text-sm text-neutral-950">
            <time dateTime={project.year} className="font-semibold">
              {project.year}
            </time>
            <span className="text-neutral-300" aria-hidden="true">
              /
            </span>
            <span>{project.service}</span>
          </p>
          <p className="mt-6 font-display text-2xl font-semibold text-neutral-950">
            {project?.pageIntro?.title}
          </p>
          <div className="mt-4 text-base text-neutral-600">
            <BasicMarkdown>
              {truncateWithEllipses(project?.pageIntro?.content, 75)}
            </BasicMarkdown>
          </div>
          <div className="mt-6">
            {/* <Link
              href={`/projects/${project.id}`}
              className={buttonVariants({ variant: 'primary' })}
            >
              {t('view_more')}
            </Link> */}

            <Button variant="primary">{t('view_more')}</Button>
          </div>
        </article>
      </Link>
    </FadeIn>
  )
}

export default ProjectCard

================
File: src/components/elements/ServiceCard.tsx
================
import { Service } from '@/types/service'
import Icon from '@/components/images/Icon'
import BasicMarkdown from '../ui/BasicMarkdown'
import { getTranslations } from 'next-intl/server'
import { truncateWithEllipses } from '@/lib/helper'
import Link from 'next/link'
import { IconProps } from '@radix-ui/react-icons/dist/types'

export const ServiceCard: React.FC<{ service: Service }> = async ({
  service,
}) => {
  const t = await getTranslations('Service')

  return (
    <div key={service.id} className="flex flex-col">
      <dt className="items-top flex min-h-20 gap-x-3 text-xl font-bold leading-7 text-gray-900">
        <div className="text-primary-600">
          <Icon
            size={48}
            /* @ts-ignore */
            name={service.classIcon as IconProps}
          />
        </div>
        {service.pageIntro.title}
      </dt>
      <dd className="mt-1 flex flex-auto flex-col text-lg leading-6 text-gray-600">
        <BasicMarkdown>
          {truncateWithEllipses(service.pageIntro.content, 150)}
        </BasicMarkdown>
        {/* <BasicMarkdown>{service.pageIntro.content}</BasicMarkdown> */}

        <Link
          href={`/services/${service.id}`}
          className="mt-4 text-sm font-semibold leading-6 text-primary-600"
        >
          {t('view_more')} <span aria-hidden="true">→</span>
        </Link>
      </dd>
    </div>
  )
}

================
File: src/components/elements/Testimonial.tsx
================
import { Border } from '@/components/ui/Border'

import { Member } from '@/types/member'
import clsx from 'clsx'
import Image from 'next/image'

import NextCloudinaryImage from '../images/ImageNextCloudinary'

function TestimonialWithImage({
  author,
  children,
  className,
}: {
  author: Member
  children: React.ReactNode
  className?: string
}) {
  return (
    <figure
      className={clsx(
        'grid grid-cols-[auto,1fr] items-center gap-x-4 gap-y-8 sm:grid-cols-12 sm:grid-rows-[1fr,auto,auto,1fr] sm:gap-x-10 lg:gap-x-16',
        className,
      )}
    >
      <blockquote className="col-span-2 text-xl/7 text-neutral-600 sm:col-span-7 sm:col-start-6 sm:row-start-2">
        {typeof children === 'string' ? <p>{children}</p> : children}
      </blockquote>
      <div className="col-start-1 row-start-2 sm:col-span-5 sm:row-span-full">
        <NextCloudinaryImage
          {...author.avatar}
          src={author.avatar.url}
          alt={author.fullname}
          width={192}
          height={192}
          className="m-auto rounded-xl grayscale sm:rounded-3xl"
        />
      </div>
      <figcaption className="text-sm text-neutral-950 sm:col-span-7 sm:row-start-3 sm:text-base">
        <span className="font-semibold">{author.fullname}</span>
        <span className="hidden font-semibold sm:inline">, </span>
        <br className="sm:hidden" />
        <span className="sm:font-semibold">{author.title}</span>
      </figcaption>
    </figure>
  )
}

function TestimonialWithoutImage({
  author,
  children,
  className,
}: {
  author: Member
  children: React.ReactNode
  className?: string
}) {
  return (
    <Border position="left" className={clsx('pl-8', className)}>
      <figure className="text-sm">
        <blockquote className="text-neutral-600 [&>*]:relative [&>:first-child]:before:absolute [&>:first-child]:before:right-full [&>:first-child]:before:content-['“'] [&>:last-child]:after:content-['”']">
          {typeof children === 'string' ? <p>{children}</p> : children}
        </blockquote>
        <figcaption className="mt-6 font-semibold text-neutral-950">
          {author?.fullname}, {author?.role}
        </figcaption>
      </figure>
    </Border>
  )
}

export function Testimonial(
  props:
    | React.ComponentPropsWithoutRef<typeof TestimonialWithImage>
    | (React.ComponentPropsWithoutRef<typeof TestimonialWithoutImage> & {
        image?: undefined
      }),
) {
  if (props.author?.avatar) {
    return <TestimonialWithImage {...props} />
  }

  return <TestimonialWithoutImage {...props} />
}

================
File: src/components/form/components/DatePicker.tsx
================
import { fr } from 'date-fns/locale'

import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover'
import { CalendarIcon } from 'lucide-react'
import { Calendar } from '@/components/ui/calendar'
import { Button } from '@/components/ui/button'
import { cn } from '@/lib/utils'
import { formatDate } from '@/lib/helper'
import { DateRange } from 'react-day-picker'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import format from 'date-fns/format'

interface CustomDatePickerProps {
  type: 'single' | 'range'
  helper?: React.ReactNode
}

interface GFieldProps {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
}

// export default function TextInput(props: TextInputProps & RnTextInputProps) {
export default function DatePickerInput(
  props: GFieldProps & CustomDatePickerProps,
) {
  const {
    valName,
    label,
    placeholder,
    description,
    required,
    control,
    ...rest
  } = props

  // const renderButtonContent = () => {
  //   if (type === "range") {
  //     const { from, to } = values[valName] || {};
  //     if (from && to) {
  //       return (
  //         <span>{`${formatDate(from, "fr")} - ${formatDate(to, "fr")}`}</span>
  //       );
  //     } else if (from) {
  //       return <span>{formatDate(from, "fr")}</span>;
  //     }
  //     return <span>Sélectionner la durée</span>;
  //   } else {
  //     return values[valName] ? (
  //       <span>{formatDate(values[valName], "fr")}</span>
  //     ) : (
  //       <span>Sélectionner la date</span>
  //     );
  //   }
  // };

  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem className="flex flex-col">
          <FormLabel>{label}</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <FormControl>
                <Button
                  variant={'outline'}
                  className={cn(
                    'w-[240px] pl-3 text-left font-normal',
                    !field.value && 'text-muted-foreground',
                  )}
                >
                  {field.value ? (
                    // format(field.value, 'PPP')
                    formatDate(field.value, 'fr')
                  ) : (
                    <span>{placeholder}</span>
                  )}
                  <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                </Button>
              </FormControl>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={field.value}
                onSelect={field.onChange}
                disabled={(date) =>
                  date > new Date() || date < new Date('1900-01-01')
                }
                initialFocus
              />
            </PopoverContent>
          </Popover>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/components/DropZone.tsx
================
import React, { useState, useCallback } from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { useDropzone } from 'react-dropzone'

import { useForm } from 'react-hook-form'

type Props = {
  valName: string
  label: string
  description?: string
  required?: boolean
  control: any
  multiple?: boolean // Allow multiple file uploads
}

export function DropzoneInput({
  valName,
  label,
  description,
  required,
  control,
  multiple = true, // Allow multiple files by default
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field, fieldState }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <DropzoneComponent
              field={field}
              fieldState={fieldState}
              valName={valName}
              multiple={multiple}
            />
          </FormControl>
          {description && <FormDescription>{description}</FormDescription>}
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

// Composant Dropzone personnalisé avec logique de suppression et gestion des fichiers
function DropzoneComponent({
  field,
  fieldState,
  valName,
  multiple,
}: {
  field: any
  fieldState: any
  valName: string
  multiple: boolean
}) {
  const [selectedFiles, setSelectedFiles] = useState<File[]>([])
  const { setValue, getValues } = useForm()

  // Custom onDrop function using useCallback to handle file selection
  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      const files = multiple ? acceptedFiles : [acceptedFiles[0]] // Handle single/multiple files
      // console.log(files, 'files')
      field.onChange(files) // Update the field value in react-hook-form
      // setSelectedFiles(files) // Update the local state to display selected files
      // setValue(valName, files)
    },
    [multiple, field],
  )

  const removeFile = (file: File) => {
    const newFiles = selectedFiles.filter((f: File) => f !== file)
    setSelectedFiles(newFiles) // Update the local state
    field.onChange(newFiles) // Update the field value in react-hook-form
  }

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple,
  })

  return (
    <div
      {...getRootProps()}
      className={`rounded-lg border border-dashed p-4 ${
        isDragActive ? 'border-blue-500' : 'border-gray-300'
      }`}
    >
      {/* <div className="text-2xl font-bold">
        <code className="text-white">
          {JSON.stringify(getValues('cover'), null, 2)}
        </code>
      </div> */}
      <input {...getInputProps()} />
      {isDragActive ? (
        <p>Déposez les fichiers ici...</p>
      ) : (
        <p>
          Glissez-déposez des fichiers ici, ou cliquez pour sélectionner des
          fichiers
        </p>
      )}

      {/* Affichage des fichiers sélectionnés */}
      {selectedFiles && selectedFiles.length > 0 && (
        <ul className="mt-2">
          {selectedFiles.map((file: File, index: number) => (
            <li key={index} className="flex items-center justify-between">
              <span>{file.name}</span>
              <button
                type="button"
                onClick={() => removeFile(file)}
                className="ml-4 text-red-500 hover:text-red-700"
              >
                Supprimer
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

================
File: src/components/form/components/SelectInput.tsx
================
import React from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'

type Props = {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
  options: { value: string; label: string }[]
}

export function SelectInput({
  valName,
  label,
  placeholder,
  description,
  required,
  control,
  options,
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <Select onValueChange={field.onChange} defaultValue={field.value}>
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder={placeholder} />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {options.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/components/TextArea.tsx
================
import React from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'

type Props = {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
}

import { Textarea } from '@/components/ui/textarea'

export function TextArea({
  valName,
  label,
  placeholder,
  description,
  required,
  control,
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            {/* <Textarea placeholder="Type your message here." /> */}
            <Textarea placeholder={placeholder} {...field} />
          </FormControl>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/components/TextInput.tsx
================
import React from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'

type Props = {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
}

import { Input } from '@/components/ui/input'

export function TextInput({
  valName,
  label,
  placeholder,
  description,
  required,
  control,
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Input placeholder={placeholder} {...field} />
          </FormControl>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/utils/FormData.tsx
================
export const formDataImgExample = async (values: any) => {
  const formData = new FormData()
  const newValues = {
    ...values,

    media: null,
    cover: null,
    avatar: null,
  }

  formData.append('data', JSON.stringify(newValues))

  if (values.media && values.media[0] instanceof File) {
    formData.append('files.media', values.media[0], values.media[0].name)
  }
  if (values.cover && values.cover[0] instanceof File) {
    formData.append('files.cover', values.cover[0], values.cover[0].name)
  }
  if (values.avatar && values.avatar[0] instanceof File) {
    formData.append('files.avatar', values.avatar[0], values.avatar[0].name)
  }

  return formData
}

================
File: src/components/form/ContactForm.tsx
================
'use client'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

import { Button } from '@/components/ui/button'
import { Form } from '@/components/ui/form'

import { toast } from '@/hooks/use-toast'
import { TextInput } from './components/TextInput'

import { postAxiosAPI } from '@/request/request'
import { DropzoneInput } from './components/DropZone'
import { useTranslations } from 'next-intl'
import { TextArea } from './components/TextArea'
import { SelectInput } from './components/SelectInput'

const FormSchema = z.object({
  fullname: z.string().min(2, {
    message: 'Fullname must be at least 2 characters.',
  }),
  subject: z.string().min(2, {
    message: 'Subject must be at least 2 characters.',
  }),
  emailTo: z.string().email({
    message: 'Email must be a valid email address.',
  }),
  phone: z.string().min(2, {
    message: 'Telephone must be at least 2 characters.',
  }),
  message: z.string().min(2, {
    message: 'Subject must be at least 2 characters.',
  }),
  media: z.array(z.unknown()).optional(),
  budget: z.string().optional(),

  //   bla: z.date(),

  //   bla: z
  //     .union([
  //       z.string().length(0, {
  //         message: 'Bla must be at least 4 characters.',
  //       }),
  //       z.string().min(4),
  //     ])
  //     .optional()
  //     .transform((e) => (e === '' ? undefined : e)),
})

const formDataContact = async (values: z.infer<typeof FormSchema>) => {
  const formData = new FormData()
  const newValues = {
    ...values,
    media: null,
  }

  formData.append('data', JSON.stringify(newValues))

  // if (values.media && values.media[0] instanceof File) {
  //   formData.append('files.media', values.media[0], values.media[0].name)
  // }

  if (values.media && values.media.length > 0) {
    values.media.map((file: any) => {
      formData.append('files.media', file, file.name)
    })
  }

  return formData
}

export function ContactForm() {
  const t = useTranslations('Contact')
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      fullname: '',
      emailTo: '',
      phone: '',
      subject: '',
      message: '',
      budget: '',
      media: [],
    },
  })

  async function onSubmit(data: z.infer<typeof FormSchema>) {
    try {
      const formData = await formDataContact(data)
      await postAxiosAPI('/email-contact', formData)

      // This works without FormData
      // await postAxiosAPI('/email-contact', { data: data })

      toast({
        title: t('form_submit_title'),
        description: t('form_submit_description'),
        variant: 'success',
      })

      form.reset()
    } catch (error) {
      console.error(error)
    }
  }

  const budgetOptions = [
    { value: t('budget_label01'), label: t('budget_label01') },
    { value: t('budget_label02'), label: t('budget_label02') },
    { value: t('budget_label03'), label: t('budget_label03') },
    { value: t('budget_label04'), label: t('budget_label04') },
  ]

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="w-2/3">
        <h2 className="font-display text-lg font-semibold text-neutral-950">
          {t('title')}
        </h2>
        <div className="mt-6 space-y-6">
          <TextInput
            valName="subject"
            label={t('subject')}
            placeholder="Réduire l'impact de mon application"
            control={form.control}
          />
          <TextInput
            valName="fullname"
            label={t('fullname')}
            placeholder="Giovanni Greenialdo"
            control={form.control}
          />
          <TextInput
            valName="phone"
            label={t('phone')}
            control={form.control}
          />

          <SelectInput
            valName="budget"
            label={t('budget')}
            options={budgetOptions}
            control={form.control}
          />
          <TextArea
            valName="message"
            label={t('message')}
            // placeholder="Giovanni Greenialdo"
            control={form.control}
          />
          <TextInput
            valName="emailTo"
            label={t('email')}
            placeholder="giovanni@swisscom.ch"
            //   description="This is your public display name."
            control={form.control}
          />
          <DropzoneInput
            valName="media"
            label={t('media')}
            // description="Drag and drop files here or click to select files"
            control={form.control}
          />
          {/* <DatePickerInput
          valName="bla"
          label="Username"
          placeholder="shadcn"
          description="This is your public display name."
          control={form.control}
          type="single"
        /> */}
          <Button type="submit">Submit</Button>
        </div>
      </form>
    </Form>
  )
}

================
File: src/components/images/Icon.tsx
================
import dynamic from 'next/dynamic'
import { LucideProps } from 'lucide-react'
import dynamicIconImports from 'lucide-react/dynamicIconImports'

export interface IconProps extends LucideProps {
  name: keyof typeof dynamicIconImports
}

const Icon = ({ name, ...props }: IconProps) => {
  const LucideIcon = dynamic(dynamicIconImports[name])

  return <LucideIcon {...props} />
}

export default Icon

================
File: src/components/images/ImageNextCloudinary.tsx
================
'use client'

import { CldImage, CldImageProps } from 'next-cloudinary'
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'
import { useState } from 'react'

interface NextCloudinaryImageProps extends Omit<CldImageProps, 'src'> {
  alt: string
  width: number
  height: number
  src: string
  priority?: boolean
  className?: string
  showSkeleton?: boolean
  //https://cloudinary.com/documentation/resizing_and_cropping#resize_and_crop_modes
  crop?:
    | 'fill'
    | 'crop'
    | 'auto'
    | 'fill_pad'
    | 'scale'
    | 'fit'
    | 'thumb'
    | 'pad'
    | 'limit'
    | 'mfit'
    | 'mpad'
    | 'lfill'
    | 'lpad'
    | 'imagga_scale'
    | 'imagga_crop'
  //https://cloudinary.com/documentation/resizing_and_cropping#control_gravity
  gravity?:
    | 'auto'
    | 'face'
    | 'faces'
    | 'center'
    | 'north'
    | 'north_east'
    | 'east'
    | 'south_east'
    | 'south'
    | 'south_west'
    | 'west'
    | 'north_west'
  // Advanced props
  radius?: string
  effect?: string
  quality?: 'auto' | number
  fetchFormat?: 'auto' | 'png' | 'jpg' | 'gif' | 'webp' | 'avif'
  // colorSpace?: 'srgb' | 'tinysrgb' | 'cmyk' | 'no_cmyk'
  dpr?: 'auto' | number
}

/**
 * Optimized Cloudinary Image Component with Skeleton Loading
 */
const NextCloudinaryImage = ({
  alt,
  width,
  height,
  src,
  priority = false,
  className = '',
  showSkeleton = true,
  crop = 'fit',
  gravity,
  radius,
  effect,
  quality = 'auto',
  fetchFormat = 'auto',
  // colorSpace = 'srgb',
  dpr = 'auto',
  ...props
}: NextCloudinaryImageProps) => {
  const [isLoading, setIsLoading] = useState(showSkeleton)
  const [hasError, setHasError] = useState(false)

  const imageConfig = {
    src,
    alt,
    width,
    height,
    className: `transition-opacity duration-300 ${isLoading ? 'opacity-0' : 'opacity-100'} ${className}`,
    loading: priority ? ('eager' as const) : ('lazy' as const),
    crop,
    gravity,
    quality,
    format: fetchFormat,
    dpr,
    // colorSpace,
    radius,
    effect,
  }

  return (
    <div
    // className={`relative ${className}`}
    // style={{
    //   width: typeof width === 'number' ? `${width}px` : width,
    //   height: typeof height === 'number' ? `${height}px` : height,
    // }}
    >
      {isLoading && showSkeleton && (
        <div className="absolute inset-0 z-10">
          <Skeleton
            height="100%"
            width="100%"
            baseColor="#f3f4f6"
            highlightColor="#e5e7eb"
            duration={1.5}
          />
        </div>
      )}

      <CldImage
        {...imageConfig}
        {...props}
        onLoad={() => setIsLoading(false)}
        onError={(e) => {
          setIsLoading(false)
          setHasError(true)
          console.error('Image load failed:', src)
          props.onError?.(e)
        }}
      />

      {hasError && (
        <div className="absolute inset-0 flex items-center justify-center bg-gray-100 p-4 text-sm text-gray-500">
          Unable to load image
        </div>
      )}
    </div>
  )
}

export default NextCloudinaryImage

================
File: src/components/images/imageNextCloudinaryBasic.tsx
================
'use client'

import { CldImage, CldImageProps } from 'next-cloudinary'

type NextCloudinaryImageProps = CldImageProps & {
  alt: string
  width: number
  height: number
  src: string
  crop?: string
  gravity?: string
}

const NextCloudinaryImage = ({
  alt,
  width,
  height,
  src,
  crop = 'auto', //https://cloudinary.com/documentation/resizing_and_cropping#resize_and_crop_modes
  gravity = 'auto', //https://cloudinary.com/documentation/resizing_and_cropping#control_gravity
  ...props
}: NextCloudinaryImageProps) => {
  return (
    <CldImage
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading="lazy"
      // sizes="(min-width: 480px ) 50vw, (min-width: 728px) 33vw, (min-width: 976px) 25vw, 100vw" //TODO: Better responsive sizes
      crop={crop}
      gravity={gravity}
      {...props}
    />
  )
}

export default NextCloudinaryImage

================
File: src/components/images/Logo.tsx
================
import { useId } from 'react'
import clsx from 'clsx'

export function Logomark({
  invert = false,
  filled = false,
  ...props
}: React.ComponentPropsWithoutRef<'svg'> & {
  invert?: boolean
  filled?: boolean
}) {
  let id = useId()

  return (
    <svg viewBox="0 0 32 32" aria-hidden="true" {...props}>
      <rect
        clipPath={`url(#${id}-clip)`}
        className={clsx(
          'h-8 transition-all duration-300',
          invert ? 'fill-white' : 'fill-neutral-950',
          filled ? 'w-8' : 'w-0 group-hover/logo:w-8',
        )}
      />
      <use
        href={`#${id}-path`}
        className={invert ? 'stroke-white' : 'stroke-neutral-950'}
        fill="none"
        strokeWidth="1.5"
      />
      <defs>
        <path
          id={`${id}-path`}
          d="M3.25 26v.75H7c1.305 0 2.384-.21 3.346-.627.96-.415 1.763-1.02 2.536-1.752.695-.657 1.39-1.443 2.152-2.306l.233-.263c.864-.975 1.843-2.068 3.071-3.266 1.209-1.18 2.881-1.786 4.621-1.786h5.791V5.25H25c-1.305 0-2.384.21-3.346.627-.96.415-1.763 1.02-2.536 1.751-.695.658-1.39 1.444-2.152 2.307l-.233.263c-.864.975-1.843 2.068-3.071 3.266-1.209 1.18-2.881 1.786-4.621 1.786H3.25V26Z"
        />
        <clipPath id={`${id}-clip`}>
          <use href={`#${id}-path`} />
        </clipPath>
      </defs>
    </svg>
  )
}

export function Logo({
  className,
  invert = false,
  filled = false,
  fillOnHover = false,
  ...props
}: React.ComponentPropsWithoutRef<'svg'> & {
  invert?: boolean
  filled?: boolean
  fillOnHover?: boolean
}) {
  return (
    <svg
      viewBox="0 0 130 32"
      aria-hidden="true"
      className={clsx(fillOnHover && 'group/logo', className)}
      {...props}
    >
      <Logomark
        preserveAspectRatio="xMinYMid meet"
        invert={invert}
        filled={filled}
      />
      <path
        className={invert ? 'fill-white' : 'fill-neutral-950'}
        d="M52.928 23.716c5.184 0 7.992-1.992 7.992-5.28 0-3.888-2.688-4.8-7.512-5.376-3.36-.408-4.728-.672-4.728-2.448 0-1.464 1.44-2.376 3.912-2.376 2.4 0 3.936.864 4.104 2.784h3.576c-.24-3.288-3-5.232-7.536-5.232-4.728 0-7.68 1.896-7.68 5.208 0 3.48 2.712 4.464 7.416 5.04 3.216.408 4.8.648 4.8 2.664 0 1.584-1.392 2.544-4.224 2.544-3.048 0-4.68-1.176-4.752-3.288H44.6c.072 3.408 2.616 5.76 8.328 5.76Zm14.175-.216h3.312v-2.928h-1.968c-.84 0-1.272-.24-1.272-1.104v-6.144h3.24v-2.592h-3.24V6.676l-3.36.648v3.408h-2.496v2.592h2.496v7.2c0 2.04 1.248 2.976 3.288 2.976Zm10.078.216c2.16 0 4.104-1.008 4.944-2.64h.168l.144 2.424h3.288V10.732h-3.432v6.336c0 2.4-1.584 4.032-3.984 4.032-2.328 0-3.264-1.368-3.264-3.936v-6.432h-3.432v7.032c0 4.416 2.256 5.952 5.568 5.952Zm16.24.048c2.52 0 4.2-1.008 4.944-2.496h.168l.072 2.232h3.264V6.004h-3.408v7.008h-.168c-.792-1.56-2.592-2.52-4.848-2.52-3.816 0-6.384 2.592-6.384 6.624 0 4.056 2.568 6.648 6.36 6.648Zm1.032-2.616c-2.472 0-3.96-1.536-3.96-4.032s1.488-4.008 3.96-4.008 3.984 1.512 3.984 3.648v.744c0 2.136-1.536 3.648-3.984 3.648Zm9.485-12.216h3.408V6.004h-3.408v2.928Zm0 14.568h3.408V10.732h-3.408V23.5Zm12.481.24c4.584 0 7.56-2.52 7.56-6.624 0-4.152-3-6.624-7.56-6.624s-7.56 2.52-7.56 6.624c0 4.128 3.024 6.624 7.56 6.624Zm0-2.64c-2.592 0-4.128-1.56-4.128-3.984s1.536-3.984 4.128-3.984c2.616 0 4.152 1.536 4.152 3.984 0 2.424-1.56 3.984-4.152 3.984Zm8.794 2.4h3.384v-2.88h-3.384v2.88Z"
      />
    </svg>
  )
}

================
File: src/components/images/StylizedImage.tsx
================
import { useId } from 'react'
import Image, { type ImageProps } from 'next/image'
import clsx from 'clsx'

const shapes = [
  {
    width: 655,
    height: 680,
    path: 'M537.827 9.245A11.5 11.5 0 0 1 549.104 0h63.366c7.257 0 12.7 6.64 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 586.87 151h-28.275a15.999 15.999 0 0 0-15.689 12.862l-59.4 297c-1.98 9.901 5.592 19.138 15.689 19.138h17.275l.127.001c.85.009 1.701.074 2.549.009 11.329-.874 21.411-7.529 24.88-25.981.002-.012.016-.016.023-.007.008.009.022.005.024-.006l24.754-123.771A11.5 11.5 0 0 1 580.104 321h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 617.87 472H559c-22.866 0-28.984 7.98-31.989 25.931-.004.026-.037.035-.052.014-.015-.02-.048-.013-.053.012l-24.759 123.798A11.5 11.5 0 0 1 490.87 631h-29.132a14.953 14.953 0 0 0-14.664 12.021c-4.3 21.502-23.18 36.979-45.107 36.979H83.502c-29.028 0-50.8-26.557-45.107-55.021l102.4-512C145.096 91.477 163.975 76 185.902 76h318.465c10.136 0 21.179-5.35 23.167-15.288l10.293-51.467Zm-512 160A11.5 11.5 0 0 1 37.104 160h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 74.87 311H11.504c-7.257 0-12.7-6.639-11.277-13.755l25.6-128Z',
  },
  {
    width: 719,
    height: 680,
    path: 'M89.827 9.245A11.5 11.5 0 0 1 101.104 0h63.366c7.257 0 12.7 6.64 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 138.87 151H75.504c-7.257 0-12.7-6.639-11.277-13.755l25.6-128Zm-64 321A11.5 11.5 0 0 1 37.104 321h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 74.87 472H11.504c-7.257 0-12.7-6.639-11.277-13.755l25.6-128ZM526.795 470a15.999 15.999 0 0 0-15.689 12.862l-32.032 160.159c-4.3 21.502-23.18 36.979-45.107 36.979H115.502c-29.028 0-50.8-26.557-45.107-55.021l102.4-512C177.096 91.477 195.975 76 217.902 76h318.465c29.028 0 50.8 26.557 45.107 55.021l-33.768 168.841c-1.98 9.901 5.592 19.138 15.689 19.138h17.075l.127.001c.85.009 1.701.074 2.549.009 11.329-.874 21.411-7.529 24.88-25.981.002-.012.016-.016.023-.007.008.009.022.005.024-.006l24.754-123.771A11.5 11.5 0 0 1 644.104 160h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 681.87 311H623c-22.866 0-28.984 7.98-31.989 25.931-.004.026-.037.035-.052.014-.015-.02-.048-.013-.053.012l-24.759 123.798A11.5 11.5 0 0 1 554.87 470h-28.075Z',
  },
  {
    width: 719,
    height: 680,
    path: 'M632.827 9.245A11.5 11.5 0 0 1 644.104 0h63.366c7.257 0 12.7 6.64 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 681.87 151h-28.275a15.999 15.999 0 0 0-15.689 12.862l-95.832 479.159c-4.3 21.502-23.18 36.979-45.107 36.979H178.502c-29.028 0-50.8-26.557-45.107-55.021l102.4-512C240.096 91.477 258.975 76 280.902 76h318.465c10.136 0 21.179-5.35 23.167-15.288l10.293-51.467Zm0 479A11.5 11.5 0 0 1 644.104 479h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 681.87 630h-63.366c-7.257 0-12.7-6.639-11.277-13.755l25.6-128ZM37.104 159a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C-1.196 303.361 4.247 310 11.504 310H74.87a11.5 11.5 0 0 0 11.277-9.245l24.76-123.798a.03.03 0 0 1 .052-.012c.015.021.048.012.052-.014C114.016 158.98 120.134 151 143 151h58.87a11.5 11.5 0 0 0 11.277-9.245l25.6-128C240.17 6.64 234.727 0 227.47 0h-63.366a11.5 11.5 0 0 0-11.277 9.245l-24.754 123.771c-.002.011-.016.015-.024.006-.007-.009-.021-.005-.023.007-3.469 18.452-13.551 25.107-24.88 25.981-.848.065-1.699 0-2.549-.009l-.127-.001H37.104Z',
  },
]

type ImagePropsWithOptionalAlt = Omit<ImageProps, 'alt'> & { alt?: string }

export function StylizedImage({
  shape = 0,
  className,
  ...props
}: ImagePropsWithOptionalAlt & { shape?: 0 | 1 | 2 }) {
  let id = useId()
  let { width, height, path } = shapes[shape]

  return (
    <div
      className={clsx(
        className,
        'relative flex aspect-[719/680] w-full grayscale',
      )}
    >
      <svg viewBox={`0 0 ${width} ${height}`} fill="none" className="h-full">
        <g clipPath={`url(#${id}-clip)`} className="group">
          <g className="origin-center scale-100 transition duration-500 motion-safe:group-hover:scale-105">
            <foreignObject width={width} height={height}>
              <Image
                alt=""
                className="w-full bg-neutral-100 object-cover"
                style={{ aspectRatio: `${width} / ${height}` }}
                {...props}
              />
            </foreignObject>
          </g>
          <use
            href={`#${id}-shape`}
            strokeWidth="2"
            className="stroke-neutral-950/10"
          />
        </g>
        <defs>
          <clipPath id={`${id}-clip`}>
            <path
              id={`${id}-shape`}
              d={path}
              fillRule="evenodd"
              clipRule="evenodd"
            />
          </clipPath>
        </defs>
      </svg>
    </div>
  )
}

================
File: src/components/sections/dynamic/Contact/ContactSection.tsx
================
import React from 'react'
import Link from 'next/link'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import { Button } from '@/components/elements/Button'
import { ContactForm } from '@/components/form/ContactForm'
import { Border } from '@/components/ui/Border'
import { ContactContent, ContactProps, Office } from '@/types/contact'
import Icon from '@/components/images/Icon'
import dynamicIconImports from 'lucide-react/dynamicIconImports'
import { useTranslations } from 'next-intl'
import { Section } from '@/components/ui/Section'

interface OfficesSectionProps {
  offices: Office[]
  className?: string
  invert?: boolean
}

const OfficesSection: React.FC<OfficesSectionProps> = ({
  offices,
  className,
  invert = false,
}) => (
  <ul role="list" className={className}>
    {offices.map((office) => (
      <li key={office.id}>
        <p
          className={invert ? 'text-white' : 'text-neutral-950'}
        >{`${office.city}, ${office.country}`}</p>
        <p className={invert ? 'text-neutral-300' : 'text-neutral-600'}>
          {office.address}
        </p>
      </li>
    ))}
  </ul>
)

const ContactDetails: React.FC<{ contactContent: ContactContent }> = ({
  contactContent,
}) => {
  const t = useTranslations('Contact')
  return (
    <FadeIn>
      {contactContent?.offices?.length > 0 && (
        <>
          <h2 className="font-display text-base font-semibold text-neutral-950">
            {t('offices')}
          </h2>
          <OfficesSection
            offices={contactContent.offices}
            className="mt-10 grid grid-cols-1 gap-8 sm:grid-cols-2"
          />
        </>
      )}

      {contactContent?.emails?.length > 0 && (
        <Border className="mt-16 pt-16">
          <h2 className="font-display text-base font-semibold text-neutral-950">
            {t('email_us')}
          </h2>
          <dl className="mt-6 grid grid-cols-1 gap-8 text-sm sm:grid-cols-2">
            {contactContent.emails.map(({ id, label, email }) => (
              <div key={id}>
                <dt className="font-semibold text-neutral-950">{label}</dt>
                <dd>
                  <Link
                    href={`mailto:${email}`}
                    className="text-neutral-600 hover:text-neutral-950"
                  >
                    {email}
                  </Link>
                </dd>
              </div>
            ))}
          </dl>
        </Border>
      )}

      {contactContent?.socials?.length > 0 && (
        <Border className="mt-16 pt-16">
          <h2 className="font-display text-base font-semibold text-neutral-950">
            {t('follow_us')}
          </h2>
          <ul className="mt-6 flex gap-x-10">
            {contactContent.socials.map((social) => (
              <li key={social.id}>
                <Link
                  href={social.url}
                  aria-label={social.name}
                  className="text-neutral-600 hover:text-neutral-950"
                  target="_blank"
                >
                  <Icon
                    name={social.icon as keyof typeof dynamicIconImports}
                    className="h-6 w-6"
                  />
                </Link>
              </li>
            ))}
          </ul>
        </Border>
      )}
    </FadeIn>
  )
}

const RenderContent: React.FC<ContactProps> = ({
  contactSection,
  designType,
}) => {
  switch (designType) {
    case 1:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <FadeIn className="-mx-6 rounded-4xl bg-neutral-950 px-6 py-20 sm:mx-0 sm:py-32 md:px-12">
            <div className="mx-auto max-w-4xl">
              <div className="max-w-xl">
                <div className="mt-6 flex flex-wrap gap-4">
                  {contactSection?.buttons?.map((button) => (
                    <Button key={button.id} href={button.link} invert>
                      {button.text}
                    </Button>
                  ))}
                </div>
                {contactSection?.content?.offices?.length > 0 && (
                  <div className="mt-10 border-t border-white/10 pt-10">
                    <h3 className="font-display text-base font-semibold text-white">
                      Our offices
                    </h3>
                    <OfficesSection
                      offices={contactSection.content.offices}
                      invert
                      className="mt-6 grid grid-cols-1 gap-8 sm:grid-cols-2"
                    />
                  </div>
                )}
              </div>
            </div>
          </FadeIn>
        </Container>
      )

    default:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <div className="grid grid-cols-1 gap-x-8 gap-y-24 lg:grid-cols-2">
            {contactSection.formEnabled && <ContactForm />}
            <ContactDetails contactContent={contactSection.content} />
          </div>
        </Container>
      )
  }
}

const ContactSection: React.FC<ContactProps> = ({
  contactSection,
  designType,
}) => {
  return (
    <Section>
      <SectionIntro {...contactSection.sectionIntro} />
      <RenderContent contactSection={contactSection} designType={designType} />
    </Section>
  )
}

export default ContactSection

================
File: src/components/sections/dynamic/Contact/Offices.tsx
================
import React from 'react'
import clsx from 'clsx'
import { Office } from '@/types/global'

function OfficeCard({ name, children, invert = false }: Office) {
  return (
    <address
      className={clsx(
        'text-sm not-italic',
        invert ? 'text-neutral-300' : 'text-neutral-600',
      )}
    >
      <strong className={invert ? 'text-white' : 'text-neutral-950'}>
        {name}
      </strong>
      <br />
      {children}
    </address>
  )
}

interface OfficeProps {
  id: number
  title: string
  content: string | null
}

interface OfficesProps extends React.ComponentPropsWithoutRef<'ul'> {
  offices: OfficeProps[]
  invert?: boolean
}

export function OfficesSection({
  offices,
  invert = false,
  ...props
}: OfficesProps) {
  return (
    <ul role="list" {...props}>
      {offices && offices.length > 0 ? (
        offices.map(({ id, title, content }) => (
          <li key={id}>
            <OfficeCard name={title} invert={invert}>
              {content ? (
                content.split('\n').map((line, idx) => (
                  <React.Fragment key={idx}>
                    {line}
                    <br />
                  </React.Fragment>
                ))
              ) : (
                <em>No address provided</em>
              )}
            </OfficeCard>
          </li>
        ))
      ) : (
        <li>No offices available</li>
      )}
    </ul>
  )
}

interface OfficeProps {
  id: number
  title: string
  content: string | null
}

interface OfficesProps extends React.ComponentPropsWithoutRef<'ul'> {
  offices: OfficeProps[]
  invert?: boolean
}

================
File: src/components/sections/dynamic/CTA/CTA.tsx
================
import React from 'react'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { ButtonProps, PageIntro } from '@/types/global'
import Link from 'next/link'
import clsx from 'clsx'
import { Section } from '@/components/ui/Section'

interface CTAProps {
  designType?: Number

  ctaSection: {
    sectionIntro: PageIntro
    buttons?: ButtonProps[]
    align?: string
  }
}

const RenderContent: React.FC<CTAProps> = ({ ctaSection, designType }) => {
  switch (designType) {
    default:
      return (
        <div className="bg-white">
          <FadeIn>
            <div
              className={clsx('py-8', {
                'mx-auto text-center': ctaSection.align === 'center',
                'mr-auto text-left': ctaSection.align === 'left',
                'ml-auto text-right': ctaSection.align === 'right',
              })}
            >
              <h2 className="text-base font-semibold leading-7 text-primary-600">
                {ctaSection?.sectionIntro?.eyebrow}
              </h2>
              <p className="text-balance text-3xl font-semibold tracking-tight text-gray-900 sm:text-5xl">
                {ctaSection?.sectionIntro?.title}
              </p>
              <div
                className={clsx(
                  'mt-6 max-w-xl text-pretty text-lg/8 text-gray-600',
                  {
                    'mx-auto text-center': ctaSection.align === 'center',
                    'text-left': ctaSection.align === 'left',
                    'text-right': ctaSection.align === 'right',
                  },
                )}
              >
                <BasicMarkdown>
                  {ctaSection?.sectionIntro?.content}
                </BasicMarkdown>
              </div>
              {ctaSection?.buttons && ctaSection?.buttons?.length > 0 && (
                <div
                  className={clsx('mt-10 flex gap-x-6', {
                    'items-center justify-center':
                      ctaSection.align === 'center',
                    'items-start justify-start': ctaSection.align === 'left',
                    'items-end justify-end': ctaSection.align === 'right',
                  })}
                >
                  {ctaSection?.buttons?.map((button) => (
                    <Link
                      key={button.id}
                      href={button.link}
                      className={`${
                        button.type === 'primary'
                          ? 'rounded-md bg-primary-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600'
                          : 'text-sm font-semibold leading-6 text-gray-900'
                      }`}
                    >
                      {button.text}
                      {button.type === 'secondary' && (
                        <span aria-hidden="true">→</span>
                      )}
                    </Link>
                  ))}
                </div>
              )}
            </div>
          </FadeIn>
        </div>
      )
  }
}

const CTASection: React.FC<CTAProps> = ({ ctaSection, designType }) => {
  // console.log(ctaSection, 'ctaSection')
  return (
    <Section>
      <RenderContent ctaSection={ctaSection} designType={designType} />
    </Section>
  )
}

export default CTASection

================
File: src/components/sections/dynamic/Culture/CultureCard/CultureCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'

import { Culture } from '@/types/global'
import { getTranslations } from 'next-intl/server'
import { GridListItem } from '@/components/ui/GridList'

interface CultureCardProps {
  culture: Culture
}

const CultureCard1: React.FC<CultureCardProps> = async ({ culture }) => {
  const t = await getTranslations('Culture')

  return (
    <>
      <GridListItem key={culture.id} title={culture.title} invert>
        {culture.content}
      </GridListItem>
    </>
  )
}

export default CultureCard1

================
File: src/components/sections/dynamic/Culture/CultureSection.tsx
================
import React from 'react'

import { Culture } from '@/types/global'
import { PageIntro } from '@/types/global'

import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import CultureCard1 from './CultureCard/CultureCard1'
import { GridList } from '@/components/ui/GridList'
import { Section } from '@/components/ui/Section'

interface CulturesProps {
  culturesSection: { sectionIntro: PageIntro } & { values: Culture[] }
  designType: Number
}

interface RenderContentProps {
  cultures: Culture[]
  sectionIntro: PageIntro
  designType?: Number
}

const RenderContent: React.FC<RenderContentProps> = ({
  cultures,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <Section>
          <SectionIntro {...sectionIntro} />
          <GridList>
            {cultures.map((culture: Culture) => (
              <CultureCard1 key={culture.id} culture={culture} />
            ))}
          </GridList>
        </Section>
      )
  }
}

const CultureSection: React.FC<CulturesProps> = async ({
  culturesSection,
  designType,
}) => {
  return (
    <Section className="mt-24 rounded-4xl bg-primary-800 py-16 sm:mt-32 lg:mt-40 lg:py-32">
      <RenderContent
        cultures={
          culturesSection.values.length > 0 ? culturesSection.values : []
        }
        sectionIntro={culturesSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}

export default CultureSection

================
File: src/components/sections/dynamic/Features/FeaturesSection.tsx
================
import React from 'react'
import { PageIntro } from '@/types/global'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import Icon from '@/components/images/Icon'
import { Feature } from '@/types/feature'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import { Section } from '@/components/ui/Section'

interface FeaturesProps {
  featuresSection: { sectionIntro: PageIntro } & { features: Feature[] }
  designType: Number
}

interface RenderContentProps {
  features: Feature[]
  sectionIntro: PageIntro
  designType?: Number
}

const RenderContent: React.FC<RenderContentProps> = ({
  features,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <>
          <FadeIn>
            <SectionIntro {...sectionIntro} />
            <dl className="mt-16 grid max-w-xl grid-cols-1 gap-x-8 gap-y-10 lg:max-w-none lg:grid-cols-2 lg:gap-y-16">
              {features.map((feature) => (
                <div key={feature.name} className="relative pl-16">
                  <dt className="text-base font-semibold leading-7 text-gray-900">
                    <div className="absolute left-0 top-0 flex h-10 w-10 items-center justify-center rounded-lg bg-primary-600">
                      <Icon
                        className="h-6 w-6 text-white"
                        name={feature.classIcon}
                      />
                    </div>
                    {feature.name}
                  </dt>
                  <dd className="mt-2 text-base leading-7 text-gray-600">
                    <BasicMarkdown>{feature.content}</BasicMarkdown>
                  </dd>
                </div>
              ))}
            </dl>
          </FadeIn>
        </>
      )
  }
}

const FeaturesSection: React.FC<FeaturesProps> = ({
  featuresSection,
  designType,
}) => {
  return (
    <Section>
      <RenderContent
        features={featuresSection?.features || []}
        sectionIntro={featuresSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}

export default FeaturesSection

================
File: src/components/sections/dynamic/Hero/HeroSection.tsx
================
'use client'

import React from 'react'
import Link from 'next/link'
import { ChevronRightIcon } from 'lucide-react'
import clsx from 'clsx'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { Section } from '@/components/ui/Section'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import { ButtonProps, MediaItem, PageIntro } from '@/types/global'
import { SectionIntro } from '../../SectionIntro'

interface HeroProps {
  designType?: Number
  heroSection: {
    sectionIntro: PageIntro
    logo?: MediaItem
    buttons?: ButtonProps[]
    badge_text?: string
    version_text?: string
    embedVideo?: string
  }
}

// Common button component to avoid repetition
const HeroButton = ({ button }: { button: ButtonProps }) => (
  <Link
    href={button.link}
    className={clsx(
      button.type === 'primary'
        ? 'rounded-md bg-primary-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600'
        : 'text-sm font-semibold leading-6 text-gray-900',
    )}
  >
    {button.text}
    {button.type === 'secondary' && <span aria-hidden="true">→</span>}
  </Link>
)

// Gradient background decorative element
const GradientDecoration = () => (
  <>
    <div
      aria-hidden="true"
      className="absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80"
    >
      <div
        style={{
          clipPath:
            'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
        }}
        className="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"
      />
    </div>
    <div
      aria-hidden="true"
      className="absolute inset-x-0 top-[calc(100%-13rem)] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[calc(100%-30rem)]"
    >
      <div
        style={{
          clipPath:
            'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
        }}
        className="relative left-[calc(50%+3rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%+36rem)] sm:w-[72.1875rem]"
      />
    </div>
  </>
)

// Hero variants components
const CenteredHero = ({ heroSection }: HeroProps) => (
  <div className="relative isolate px-6 pt-14 lg:px-8">
    <GradientDecoration />
    <div className="mx-auto max-w-2xl py-32 sm:py-48 lg:py-56">
      <div className="text-center">
        <SectionIntro
          {...heroSection.sectionIntro}
          embedVideo={heroSection?.sectionIntro?.embedVideo}
          centered
        />
        {heroSection.buttons && heroSection.buttons.length > 0 && (
          <div className="mt-10 flex items-center justify-center gap-x-6">
            {heroSection.buttons.map((button) => (
              <HeroButton key={button.id} button={button} />
            ))}
          </div>
        )}
      </div>
    </div>
  </div>
)

const SplitHero = ({ heroSection }: HeroProps) => (
  <div className="relative bg-white">
    <div className="mx-auto max-w-7xl lg:grid lg:grid-cols-12 lg:gap-x-8 lg:px-8">
      <div className="px-6 pb-24 pt-10 sm:pb-32 lg:col-span-7 lg:px-0 lg:pb-48 lg:pt-40 xl:col-span-6">
        <Container>
          <FadeIn>
            <div className="mx-auto max-w-lg lg:mx-0">
              {heroSection.logo && (
                <NextCloudinaryImage
                  src={heroSection.logo.url}
                  alt={heroSection.logo.alternativeText}
                  width={124}
                  height={48}
                  className="my-8"
                />
              )}
              <SectionIntro {...heroSection.sectionIntro} />
              {heroSection.buttons && heroSection.buttons.length > 0 && (
                <div className="mt-10 flex items-center gap-x-6">
                  {heroSection.buttons.map((button) => (
                    <HeroButton key={button.id} button={button} />
                  ))}
                </div>
              )}
            </div>
          </FadeIn>
        </Container>
      </div>
      {/* <div className="flex items-center justify-center lg:col-span-5 lg:-mr-8 xl:absolute xl:inset-0 xl:left-1/2 xl:mr-0">
        <SectionIntro
          {...heroSection.sectionIntro}
          embedVideo={heroSection?.sectionIntro?.embedVideo}
          // content={undefined}
          // title=""
          // eyebrow=""
        />
      </div> */}
    </div>
  </div>
)

const DefaultHero = ({ heroSection }: HeroProps) => (
  <div className="relative isolate overflow-hidden bg-white">
    <svg
      aria-hidden="true"
      className="absolute inset-0 -z-10 h-full w-full stroke-gray-200 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
    >
      <defs>
        <pattern
          x="50%"
          y={-1}
          id="hero-pattern"
          width={200}
          height={200}
          patternUnits="userSpaceOnUse"
        >
          <path d="M.5 200V.5H200" fill="none" />
        </pattern>
      </defs>
      <rect
        fill="url(#hero-pattern)"
        width="100%"
        height="100%"
        strokeWidth={0}
      />
    </svg>
    <Container>
      <FadeIn>
        <div className="mx-auto max-w-7xl px-6 pb-24 pt-10 sm:pb-32 lg:flex lg:px-8 lg:py-40">
          <div className="mx-auto max-w-2xl lg:mx-0 lg:flex-shrink-0 lg:pt-8">
            {heroSection.logo && (
              <NextCloudinaryImage
                src={heroSection.logo.url}
                alt={heroSection.logo.alternativeText}
                width={124}
                height={48}
                className="my-8"
              />
            )}
            {(heroSection.badge_text || heroSection.version_text) && (
              <div className="mt-24 sm:mt-32 lg:mt-16">
                <div className="inline-flex space-x-6">
                  {heroSection.badge_text && (
                    <span className="rounded-full bg-primary-600/10 px-3 py-1 text-sm font-semibold leading-6 text-primary-600 ring-1 ring-inset ring-primary-600/10">
                      {heroSection.badge_text}
                    </span>
                  )}
                  {heroSection.version_text && (
                    <span className="inline-flex items-center space-x-2 text-sm font-medium leading-6 text-gray-600">
                      <span>{heroSection.version_text}</span>
                      <ChevronRightIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                    </span>
                  )}
                </div>
              </div>
            )}
            <SectionIntro {...heroSection.sectionIntro} />
            {heroSection.buttons && heroSection.buttons.length > 0 && (
              <div className="mt-10 flex items-center gap-x-6">
                {heroSection.buttons.map((button) => (
                  <HeroButton key={button.id} button={button} />
                ))}
              </div>
            )}
          </div>
        </div>
      </FadeIn>
    </Container>
  </div>
)

const HeroSection: React.FC<HeroProps> = ({ heroSection, designType }) => {
  return (
    <Section>
      {(() => {
        switch (designType) {
          case 1:
            return <CenteredHero heroSection={heroSection} />
          case 2:
            return <SplitHero heroSection={heroSection} />
          case 3:
            return (
              <div className="relative isolate pt-14">
                <GradientDecoration />
                <div className="items-center justify-center py-24 sm:py-32 lg:pb-40">
                  <div className="mx-auto max-w-7xl px-6 lg:px-8">
                    <SectionIntro {...heroSection.sectionIntro} centered />
                    {heroSection.buttons && heroSection.buttons.length > 0 && (
                      <div className="mt-10 flex items-center justify-center gap-x-6">
                        {heroSection.buttons.map((button) => (
                          <HeroButton key={button.id} button={button} />
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )
          case 4:
            return (
              <SectionIntro
                {...heroSection.sectionIntro}
                embedVideo={heroSection?.sectionIntro?.embedVideo}
              />
            )
          default:
            return <DefaultHero heroSection={heroSection} />
        }
      })()}
    </Section>
  )
}

export default HeroSection

================
File: src/components/sections/dynamic/PageIntro/PageIntroSection.tsx
================
import React from 'react'
import { PageIntro } from '@/types/global'
import { PageIntroSections } from '../../PageIntro'
import { Section } from '@/components/ui/Section'

interface PageIntroProps {
  pageIntroSection: PageIntro
  designType: Number
}

const PageIntroSection: React.FC<PageIntroProps> = async ({
  pageIntroSection,
  designType,
}) => {
  try {
    // contacts = await fetchContactPage()
  } catch (error) {
    console.error('Failed to load services:', error)
  }

  return (
    <Section>
      <PageIntroSections {...pageIntroSection} />
    </Section>
  )
}

export default PageIntroSection

================
File: src/components/sections/dynamic/Posts/PostCard/PostCard1.tsx
================
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import { formatDate, truncateWithEllipses } from '@/lib/helper'
import { Post } from '@/types/post'
import Link from 'next/link'

interface PostCard1Props {
  post: Post
}

const PostCard1: React.FC<PostCard1Props> = ({ post }) => {
  return (
    <article
      key={post.slug}
      className="flex flex-col items-start justify-start"
    >
      <div className="relative w-full">
        {post?.pageIntro?.cover?.url && (
          <NextCloudinaryImage
            alt={post.pageIntro.title}
            src={post.pageIntro.cover.url}
            width={300}
            height={200}
            className="aspect-[16/9] w-full rounded-2xl bg-gray-100 object-cover sm:aspect-[2/1] lg:aspect-[3/2]"
          />
        )}
        <div className="absolute inset-0 rounded-2xl ring-1 ring-inset ring-gray-900/10" />
      </div>
      <div className="max-w-xl">
        <div className="mt-4 flex items-center gap-x-4 text-xs">
          <time className="text-gray-500">
            {formatDate(post.publishedAt, 'fr')}
          </time>
          {/* <Link
                    href={post.category.href}
                    className="relative z-10 rounded-full bg-gray-50 px-3 py-1.5 font-medium text-gray-600 hover:bg-gray-100"
                >
                    {post.category.title}
                </Link> */}
        </div>
        {post.pageIntro && (
          <div className="group relative">
            <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
              <Link href={`/blog/${post.slug}`}>
                <span className="absolute inset-0" />
                {post.pageIntro.title}
              </Link>
            </h3>
            {post.pageIntro.content && (
              <p className="mt-5 line-clamp-3 text-sm leading-6 text-gray-600">
                {truncateWithEllipses(post.pageIntro.content, 150)}
              </p>
            )}
          </div>
        )}
        <div className="relative mt-4 flex items-center gap-x-4">
          {post.author?.avatar && (
            <NextCloudinaryImage
              alt={post.author?.fullname}
              src={post.author.avatar.url}
              width={48}
              height={48}
              className="rounded-full bg-gray-100"
            />
          )}
          <div className="text-sm leading-6">
            <p className="font-semibold text-gray-900">
              <span className="absolute inset-0" />
              {post.author?.fullname}
            </p>
            <p className="text-gray-600">{post.author?.title}</p>
          </div>
        </div>
      </div>
    </article>
  )
}

export default PostCard1

================
File: src/components/sections/dynamic/Posts/PostCard/PostCard2.tsx
================
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { formatDate, truncateWithEllipses } from '@/lib/helper'
import { Post } from '@/types/post'
import Link from 'next/link'

interface PostCard2Props {
  post: Post
}

const PostCard2: React.FC<PostCard2Props> = ({ post }) => {
  return (
    <article key={post.slug} className="mb-24 flex flex-col gap-8 lg:flex-row">
      <div>
        {post?.pageIntro?.cover?.url && (
          <NextCloudinaryImage
            src={post.pageIntro.cover.url}
            alt={post.pageIntro.title}
            width={320}
            height={320}
            // crop={'fill'}
            className="inset-0 rounded-2xl object-cover"
          />
        )}
      </div>
      <div>
        <div className="flex items-start gap-x-4 text-xs">
          <time className="text-gray-500">
            {formatDate(post.publishedAt, 'fr')}
          </time>
        </div>
        <div className="group relative max-w-xl">
          <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
            <Link href={`/blog/${post.slug}`}>
              <span className="absolute inset-0" />
              {post.pageIntro.title}
            </Link>
          </h3>

          {post?.pageIntro?.content && (
            <div className="typography">
              <BasicMarkdown>
                {truncateWithEllipses(post.pageIntro.content, 150)}
              </BasicMarkdown>
            </div>
          )}
          {post?.author && (
            <div className="mt-6 flex items-start">
              {post?.author?.avatar && (
                <NextCloudinaryImage
                  src={post.author.avatar.url}
                  alt={post.author.fullname}
                  width={50}
                  height={50}
                  className="h-12 w-12 rounded-full object-cover"
                />
              )}
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-900">
                  {post.author.fullname}
                </p>
                <p className="text-sm text-gray-500">{post.author.title}</p>
              </div>
            </div>
          )}
        </div>
        <div className="mt-6 border-b border-gray-200"></div>
      </div>
    </article>
  )
}

export default PostCard2

================
File: src/components/sections/dynamic/Posts/PostsSection.tsx
================
'use client'
import React from 'react'

import { Post } from '@/types/post'
import { SectionIntro } from '../../SectionIntro'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { fetchPosts } from '@/request/fetch'
import PostCard1 from '../Posts/PostCard/PostCard1'
import PostCard2 from '../Posts/PostCard/PostCard2'
import { PageIntro, Pagination } from '@/types/global'
import { Section } from '@/components/ui/Section'
import Fetcher from '@/request/Fetcher'
import { url } from 'inspector'
import PaginationMain from '../../Pagination'

interface BlogProps {
  postsSection: { sectionIntro: PageIntro } & { posts: Post[] } & {
    pagination: Pagination
  }
  designType: Number
}

interface RenderContentProps {
  posts: Post[]
  sectionIntro: PageIntro
  designType?: Number
}

const RenderContent: React.FC<RenderContentProps> = ({
  posts,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    case 1:
      return (
        <>
          <SectionIntro {...sectionIntro} />
          <FadeIn>
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4">
              {posts.map((post: Post) => (
                <PostCard1 key={post.id} post={post} />
              ))}
            </div>
          </FadeIn>
        </>
      )

    default:
      return (
        <>
          <SectionIntro {...sectionIntro} />
          <FadeIn>
            {posts.map((post: Post) => (
              <PostCard2 key={post.id} post={post} />
            ))}
          </FadeIn>
        </>
      )
  }
}

const PostsSection: React.FC<BlogProps> = ({ postsSection, designType }) => {
  try {
  } catch (error) {
    console.error('Failed to load posts:', error)
  }

  const url = '/posts'

  return (
    <Section>
      {postsSection?.posts && postsSection?.posts?.length > 0 ? (
        <div>
          <RenderContent
            posts={postsSection?.posts}
            sectionIntro={postsSection.sectionIntro}
            designType={designType}
          />
        </div>
      ) : (
        <Fetcher url={url} paginationMode={postsSection?.pagination?.value}>
          {({ data, currentPage, totalPages, goToPage }) => (
            <div>
              <RenderContent
                posts={data.data}
                sectionIntro={postsSection.sectionIntro}
                designType={designType}
              />
              {postsSection?.pagination?.value === 'off' ? null : (
                <PaginationMain
                  currentPage={currentPage}
                  totalPages={totalPages}
                  goToPage={goToPage}
                />
              )}
            </div>
          )}
        </Fetcher>
      )}
    </Section>
  )
}

export default PostsSection

================
File: src/components/sections/dynamic/PricingSection/PricingSection.tsx
================
import React from 'react'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Check, X } from 'lucide-react'
import { PageIntro } from '@/types/global'
import { useTranslations } from 'next-intl'
import { Section } from '@/components/ui/Section'

export interface PricingFeature {
  id: number
  text: string
  included: boolean
}

export interface PricingCard {
  id: number
  name: string
  link: string
  price: string
  frequency: string
  content: string
  features: PricingFeature[]
  popular?: boolean
}

export interface PricingProps {
  designType?: Number
  pricingSection: {
    sectionIntro: PageIntro
    cards: PricingCard[]
  }
}

const classNames = (...classes: string[]) => {
  return classes.filter(Boolean).join(' ')
}

const RenderContent: React.FC<PricingProps> = ({
  pricingSection,
  designType,
}) => {
  const t = useTranslations('Pricing')
  switch (designType) {
    default:
      return (
        <>
          <FadeIn>
            <div className="mx-auto max-w-7xl px-6 lg:px-8">
              <div className="mx-auto max-w-4xl text-center">
                <h2 className="text-base font-semibold leading-7 text-primary-600">
                  {pricingSection?.sectionIntro?.eyebrow}
                </h2>
                <p className="text-balance text-3xl font-semibold tracking-tight text-gray-900 sm:text-5xl">
                  {pricingSection?.sectionIntro?.title}
                </p>
                <div className="mx-auto mt-6 max-w-2xl text-pretty text-center text-lg font-medium text-gray-600 sm:text-xl/8">
                  <BasicMarkdown>
                    {pricingSection?.sectionIntro?.content}
                  </BasicMarkdown>
                </div>
              </div>

              <div className="isolate mx-auto grid max-w-md grid-cols-1 gap-y-8 lg:mx-0 lg:max-w-none lg:grid-cols-3">
                {pricingSection?.cards.map((card, cardIdx) => (
                  <div
                    key={card.id}
                    className={classNames(
                      card?.popular ? 'lg:z-10 lg:rounded-b-none' : 'lg:mt-8',
                      cardIdx === 0 ? 'lg:rounded-r-none' : '',
                      cardIdx === pricingSection?.cards?.length - 1
                        ? 'lg:rounded-l-none'
                        : '',
                      'flex flex-col justify-between rounded-3xl bg-white p-8 ring-1 ring-gray-200 xl:p-10',
                    )}
                  >
                    <div>
                      <div className="flex items-center justify-between gap-x-4">
                        <h3
                          id={`tier-${card.id}`}
                          className={classNames(
                            card.popular ? 'text-primary-600' : 'text-gray-900',
                            'text-lg font-semibold leading-8',
                          )}
                        >
                          {card.name}
                        </h3>
                        {card.popular && (
                          <p className="rounded-full bg-primary-600/10 px-2.5 py-1 text-xs font-semibold leading-5 text-primary-600">
                            {t('most_popular')}
                          </p>
                        )}
                      </div>
                      <div className="mt-4 text-sm leading-6 text-gray-600">
                        <BasicMarkdown>{card.content}</BasicMarkdown>
                      </div>
                      <p className="mt-6 flex items-baseline gap-x-1">
                        <span className="text-4xl font-semibold tracking-tight text-gray-900">
                          {card.price}
                        </span>
                        <span className="text-sm font-semibold leading-6 text-gray-600">
                          /{card.frequency}
                        </span>
                      </p>
                      <ul
                        role="list"
                        className="mt-8 space-y-3 text-sm leading-6 text-gray-600"
                      >
                        {card.features.map((feature) => (
                          <li key={feature.id} className="flex gap-x-3">
                            {feature.included ? (
                              <Check className="h-6 w-5 flex-none text-primary-600" />
                            ) : (
                              <X className="h-6 w-5 flex-none text-gray-400" />
                            )}
                            {feature.text}
                          </li>
                        ))}
                      </ul>
                    </div>
                    {card.link && (
                      <a
                        href={card.link}
                        aria-describedby={`tier-${card.id}`}
                        className={classNames(
                          card.popular
                            ? 'bg-primary-600 text-white shadow-sm hover:bg-primary-500'
                            : 'text-primary-600 ring-1 ring-inset ring-primary-200 hover:ring-primary-300',
                          'mt-8 block rounded-md px-3 py-2 text-center text-sm font-semibold leading-6 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600',
                        )}
                      >
                        {t('btn_pricing')}
                      </a>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </FadeIn>
        </>
      )
  }
}

const PricingSection: React.FC<PricingProps> = ({
  pricingSection,
  designType,
}) => {
  return (
    <Section>
      <RenderContent pricingSection={pricingSection} designType={designType} />
    </Section>
  )
}

export default PricingSection

================
File: src/components/sections/dynamic/Projects/ProjectCard/ProjectCard1.tsx
================
import React from 'react'
import { FadeIn } from '@/components/ui/FadeIn'
import { Button } from '@/components/ui/button'

import { Project } from '@/types/project'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'

import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { useTranslations } from 'next-intl'

interface ProjectCardProps {
  project: Project
}

const ProjectCard1: React.FC<ProjectCardProps> = ({ project }) => {
  const t = useTranslations('Project')

  return (
    <FadeIn
      key={project.id}
      className="flex"
      style={{ opacity: 1, transform: 'none' }}
    >
      <Link href={`/projects/${project.slug}`}>
        <article className="relative flex w-full flex-col rounded-3xl p-6 ring-1 ring-neutral-950/5 transition hover:bg-neutral-50 sm:p-8">
          <div className="flex items-center">
            <div>
              {project?.logo?.url && (
                <NextCloudinaryImage
                  src={project?.logo?.url}
                  alt={project.client}
                  width={100}
                  height={20}
                  // crop="fill_pad"
                  className="mr-3"
                />
              )}
            </div>
          </div>
          {project.pageIntro.cover && (
            <div className="my-6">
              {project?.pageIntro?.cover.url && (
                <NextCloudinaryImage
                  src={project?.pageIntro?.cover.url}
                  alt={project?.pageIntro?.title}
                  width={600}
                  height={500}
                  className="rounded-md"
                  crop="fill"
                />
              )}
            </div>
          )}

          <p className="mt-6 flex gap-x-2 text-sm text-neutral-950">
            <time dateTime={project.year} className="font-semibold">
              {project.year}
            </time>
            <span className="text-neutral-300" aria-hidden="true">
              /
            </span>
            <span>{project.service}</span>
          </p>
          <p className="mt-6 font-display text-2xl font-semibold text-neutral-950">
            {project?.pageIntro?.title}
          </p>
          <div className="mt-4 text-base text-neutral-600">
            <BasicMarkdown>
              {truncateWithEllipses(project?.pageIntro?.content, 75)}
            </BasicMarkdown>
          </div>
          <div className="mt-6">
            <Button variant="primary">{t('view_more')}</Button>
          </div>
        </article>
      </Link>
    </FadeIn>
  )
}

export default ProjectCard1

================
File: src/components/sections/dynamic/Projects/ProjectsSection.tsx
================
'use client'
import React from 'react'

import { Project } from '@/types/project'
import { PageIntro, Pagination } from '@/types/global'
import { fetchProjects } from '@/request/fetch'

import { Container } from '@/components/ui/Container'
import { FadeInStagger } from '@/components/ui/FadeIn'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import ProjectCard1 from './ProjectCard/ProjectCard1'
import { Section } from '@/components/ui/Section'
import Fetcher from '@/request/Fetcher'
import PaginationMain from '../../Pagination'
interface ProjectsProps {
  projectsSection: { sectionIntro: PageIntro } & { projects: Project[] } & {
    pagination: Pagination
  }
  designType: number
}

interface RenderContentProps {
  projects: Project[]
  sectionIntro: PageIntro
  designType?: number
}

const RenderContent: React.FC<RenderContentProps> = ({
  projects,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <>
          <SectionIntro {...sectionIntro} />
          <FadeInStagger className="grid grid-cols-1 gap-8 lg:grid-cols-3">
            {projects.map((project: Project) => (
              <FadeIn key={project.id}>
                <ProjectCard1 key={project.id} project={project} />
              </FadeIn>
            ))}
          </FadeInStagger>
        </>
      )
  }
}

const ProjectsSection: React.FC<ProjectsProps> = ({
  projectsSection,
  designType,
}) => {
  const url = '/projects'
  console.log(projectsSection?.projects, 'projectsSection?.projects')
  return (
    <Section>
      {projectsSection?.projects && projectsSection?.projects?.length > 0 ? (
        <div>
          <RenderContent
            projects={projectsSection?.projects}
            sectionIntro={projectsSection.sectionIntro}
            designType={designType}
          />
        </div>
      ) : (
        <Fetcher url={url} paginationMode={projectsSection?.pagination?.value}>
          {({ data, currentPage, totalPages, goToPage }) => {
            return (
              <div>
                <RenderContent
                  projects={data.data}
                  sectionIntro={projectsSection.sectionIntro}
                  designType={designType}
                />
                {projectsSection?.pagination?.value === 'off' ? null : (
                  <PaginationMain
                    currentPage={currentPage}
                    totalPages={totalPages}
                    goToPage={goToPage}
                  />
                )}
              </div>
            )
          }}
        </Fetcher>
      )}
    </Section>
  )
}

export default ProjectsSection

================
File: src/components/sections/dynamic/References/ClientCard/ClientCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'

import { Client } from '@/types/client'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'

import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { FadeIn } from '@/components/ui/FadeIn'

interface ReferenceCardProps {
  client: Client
}

const ClientCard1: React.FC<ReferenceCardProps> = async ({ client }) => {
  const t = await getTranslations('Reference')
  return (
    <FadeIn className="overflow-hidden">
      {client?.logo && (
        <NextCloudinaryImage
          width={160}
          height={80}
          alt={client?.logo?.alternativeText}
          src={`${client?.logo?.url}`}
          crop="fit"
        />
      )}
    </FadeIn>
  )
}

export default ClientCard1

================
File: src/components/sections/dynamic/References/ReferenceSection.tsx
================
import React from 'react'

import { Client } from '@/types/client'
import { PageIntro } from '@/types/global'
import { fetchClients } from '@/request/fetch'
import { Border } from '@/components/ui/Border'

import { Container } from '@/components/ui/Container'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import ClientCard1 from './ClientCard/ClientCard1'
import { Section } from '@/components/ui/Section'

interface ReferenceProps {
  referenceSection: { sectionIntro: PageIntro } & { clients: Client[] }
  designType: Number
}

interface RenderContentProps {
  clients: Client[]
  sectionIntro: PageIntro
  designType?: Number
}

const RenderContent: React.FC<RenderContentProps> = ({
  clients,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <SectionIntro {...sectionIntro} />
          <FadeInStagger faster>
            <Border className="mb-12" as={FadeIn} />
            <ul
              role="list"
              className="grid grid-cols-2 gap-x-8 gap-y-12 pt-12 sm:grid-cols-3 lg:grid-cols-4"
            >
              {clients.map((client: Client) => (
                <li key={client.id} className="group">
                  <ClientCard1 key={client.id} client={client} />
                </li>
              ))}
            </ul>
          </FadeInStagger>
        </Container>
      )
  }
}

const ReferenceSection: React.FC<ReferenceProps> = async ({
  referenceSection,
  designType,
}) => {
  let clients: Client[] | null = null
  try {
    clients = await fetchClients()
  } catch (error) {
    console.error('Failed to load services:', error)
  }

  return (
    <Section>
      <RenderContent
        clients={
          referenceSection.clients.length > 0
            ? referenceSection.clients
            : clients || []
        }
        sectionIntro={referenceSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}

export default ReferenceSection

================
File: src/components/sections/dynamic/Services/ServiceCard/ServiceCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'

import { Service } from '@/types/service'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'

import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'

interface ServiceCardProps {
  service: Service
}

const ServiceCard1: React.FC<ServiceCardProps> = async ({ service }) => {
  const t = await getTranslations('Service')

  return (
    <div key={service.id} className="flex flex-col">
      <dt className="items-top flex min-h-20 gap-x-3 text-xl font-bold leading-7 text-gray-900">
        <div className="text-primary-600">
          <Icon size={48} name={service.classIcon as any} />
        </div>
        {service.pageIntro.title}
      </dt>
      <dd className="mt-1 flex flex-auto flex-col text-lg leading-6 text-gray-600">
        <BasicMarkdown>
          {truncateWithEllipses(service.pageIntro.content, 150)}
        </BasicMarkdown>
        {/* <BasicMarkdown>{service.pageIntro.content}</BasicMarkdown> */}

        <Link
          href={`/services/${service.slug}`}
          className="mt-4 text-sm font-semibold leading-6 text-primary-600"
        >
          {t('view_more')} <span aria-hidden="true">→</span>
        </Link>
      </dd>
    </div>
  )
}

export default ServiceCard1

================
File: src/components/sections/dynamic/Services/ServiceSection.tsx
================
import React from 'react'

import { Service } from '@/types/service'
import { PageIntro } from '@/types/global'
import { fetchServices } from '@/request/fetch'

import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import ServiceCard1 from './ServiceCard/ServiceCard1'
import { Section } from '@/components/ui/Section'

interface ServicesProps {
  servicesSection: { sectionIntro: PageIntro } & { our_services: Service[] }
  designType: Number
}

interface RenderContentProps {
  services: Service[]
  sectionIntro: PageIntro
  designType?: Number
}

const RenderContent: React.FC<RenderContentProps> = ({
  services,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <Container>
          <SectionIntro {...sectionIntro} />
          <FadeIn>
            <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
              {services.map((service: Service) => (
                <ServiceCard1 key={service.id} service={service} />
              ))}
            </div>
          </FadeIn>
        </Container>
      )
  }
}

const ServiceSection: React.FC<ServicesProps> = async ({
  servicesSection,
  designType,
}) => {
  let services: Service[] | null = null
  try {
    services = await fetchServices()
  } catch (error) {
    console.error('Failed to load services:', error)
  }

  return (
    <Section>
      <RenderContent
        services={
          servicesSection.our_services.length > 0
            ? servicesSection.our_services
            : services || []
        }
        sectionIntro={servicesSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}

export default ServiceSection

================
File: src/components/sections/dynamic/Teams/TeamsCard/TeamCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'

import { Team } from '@/types/team'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'
import { FadeIn } from '@/components/ui/FadeIn'

import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Member } from '@/types/member'

interface TeamCardProps {
  member: Member
}

const TeamCard1: React.FC<TeamCardProps> = async ({ member }) => {
  const t = await getTranslations('Team')

  return (
    <>
      <li key={member.fullname}>
        <FadeIn>
          <div className="group relative overflow-hidden rounded-3xl bg-neutral-100">
            <NextCloudinaryImage
              src={`${member.avatar?.url}`}
              alt={`${member.fullname}`}
              width={500}
              height={700}
              crop={'fill'}
              // crop={'crop'}
              // crop={'pad'}
              className="grayscale transition duration-500 motion-safe:group-hover:scale-105"
            />
            <div className="absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-black to-black/0 to-40% p-6">
              <p className="font-display text-base/6 font-semibold tracking-wide text-white">
                {member.fullname}
              </p>
              <p className="mt-2 text-sm text-white">{member.role}</p>
            </div>
          </div>
        </FadeIn>
      </li>
    </>
  )
}

export default TeamCard1

================
File: src/components/sections/dynamic/Teams/TeamsCardSection.tsx
================
import React from 'react'

import { Team } from '@/types/team'
import { PageIntro } from '@/types/global'
import { fetchServices } from '@/request/fetch'

import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import TeamCard1 from './TeamsCard/TeamCard1'
import { Member } from '@/types/member'
import { Section } from '@/components/ui/Section'
import { CldOgImage } from 'next-cloudinary'

interface TeamsProps {
  teamsSection: { sectionIntro: PageIntro } & { members: Member[] }
  designType: Number
}

interface RenderContentProps {
  members: Member[]
  sectionIntro: PageIntro
  designType?: Number
}

const RenderContent: React.FC<RenderContentProps> = ({
  members,
  sectionIntro,
  designType,
}) => {
  console.log(designType, 'designType')
  switch (designType) {
    default:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <SectionIntro {...sectionIntro} />
          <div className="space-y-24">
            <FadeIn>
              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                <div className="lg:col-span-3">
                  <ul
                    role="list"
                    className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:gap-8"
                  >
                    {members.map((member: Member) => (
                      <TeamCard1 key={member.id} member={member} />
                    ))}
                  </ul>
                </div>
              </div>
            </FadeIn>
          </div>
        </Container>
      )
  }
}

const TeamSection: React.FC<TeamsProps> = async ({
  teamsSection,
  designType,
}) => {
  // let teams: Team[] | null = null
  try {
    // teams = await fetchTeams()
  } catch (error) {
    console.error('Failed to load team:', error)
  }

  return (
    <Section>
      <RenderContent
        members={teamsSection.members.length > 0 ? teamsSection.members : []}
        sectionIntro={teamsSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}

export default TeamSection

================
File: src/components/sections/dynamic/TestimonialSection.tsx
================
import React from 'react'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import { MediaItem, PageIntro } from '@/types/global'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { te } from 'date-fns/locale'
import { SectionIntro } from '../SectionIntro'
import { Section } from '@/components/ui/Section'

interface Author {
  fullname: string
  role?: string
  avatar?: MediaItem
}

interface Testimonial {
  id: number
  title: string
  content: string
  cover?: MediaItem
  author: Author
  pageIntro?: PageIntro
  member?: Author
}

interface TestimonialSectionProps {
  testimonialSection: {
    sectionIntro: PageIntro
    testimonials: Testimonial[]
  }
  designType?: number
}

const RenderContent: React.FC<TestimonialSectionProps> = ({
  testimonialSection,
  designType,
}) => {
  return (
    <>
      <FadeIn>
        {testimonialSection.sectionIntro && (
          <SectionIntro {...testimonialSection?.sectionIntro} />
        )}

        <div className="space-y-16">
          {testimonialSection.testimonials.map((testimonial) => {
            const member = testimonial?.member || testimonial?.author
            const avatar = member?.avatar

            return (
              <section
                key={testimonial.id}
                className="isolate overflow-hidden bg-white px-6 lg:px-8"
              >
                <figure className="grid grid-cols-1 items-center gap-x-6">
                  {/* SVG Decoration */}
                  <div className="relative col-span-2 lg:col-start-1 lg:row-start-2">
                    <svg
                      viewBox="0 0 162 128"
                      aria-hidden="true"
                      className="absolute -top-12 left-0 -z-10 h-32 stroke-gray-900/10"
                    >
                      <use href="#decorative-shape" />
                    </svg>
                    <blockquote className="text-4xl italic text-gray-900">
                      <BasicMarkdown>{testimonial.content}</BasicMarkdown>
                    </blockquote>
                  </div>

                  {/* Avatar and Caption */}
                  {member && (
                    <>
                      {avatar && (
                        <div className="col-end-1 w-16 lg:row-span-4 lg:w-72">
                          <NextCloudinaryImage
                            alt={avatar.alternativeText}
                            src={avatar.url}
                            width={200}
                            height={200}
                            className="rounded-xl bg-indigo-50 lg:rounded-3xl"
                          />
                        </div>
                      )}
                      <figcaption className="text-base lg:col-start-1 lg:row-start-3">
                        <div className="font-semibold text-gray-900">
                          {member.fullname}
                        </div>
                        <div className="mt-1 text-gray-500">{member.role}</div>
                      </figcaption>
                    </>
                  )}
                </figure>
              </section>
            )
          })}
        </div>
      </FadeIn>
    </>
  )
}

const TestimonialSection: React.FC<TestimonialSectionProps> = ({
  testimonialSection,
  designType,
}) => {
  return (
    <Section>
      <RenderContent
        testimonialSection={testimonialSection}
        designType={designType}
      />
    </Section>
  )
}

export default TestimonialSection

================
File: src/components/sections/BlogPageIntro.tsx
================
import clsx from 'clsx'

import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { PageIntro } from '@/types/global'
import BasicMarkdown from '../ui/BasicMarkdown'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import { Post } from '@/types/post'
import { formatDate } from '@/lib/helper'
import { Section } from '../ui/Section'

export function BlogPageIntroSections({
  eyebrow,
  title,
  content,
  cover,
  post,
  showCover = true,
}: PageIntro & { showCover?: boolean; post: Post }) {
  return (
    // <Container className="mt-24 text-center sm:mt-32 lg:mt-40">
    <Section>
      <FadeIn>
        <div className="grid gap-8">
          <div className="col-span-full">
            <h1>
              <span className="block font-display text-base font-semibold text-neutral-950">
                {formatDate(post.publishedAt, 'fr')}
              </span>
              <span className="sr-only"> - </span>
              <span className="mx-auto block max-w-5xl font-display text-5xl font-medium tracking-tight text-neutral-950 [text-wrap:balance] sm:text-6xl">
                {title}
              </span>
            </h1>
            <div className="mx-auto mt-6 max-w-3xl text-xl text-neutral-600">
              <BasicMarkdown>{content}</BasicMarkdown>
            </div>
            <div className="mt-4 flex items-center justify-center space-x-4 text-center">
              {post.author?.avatar && (
                <NextCloudinaryImage
                  alt={post.author.fullname}
                  src={post.author.avatar.url}
                  width={64}
                  height={64}
                  className="rounded-full bg-gray-100"
                />
              )}
              <div className="text-sm leading-6">
                <p className="font-semibold text-gray-900">
                  <span className="absolute inset-0" />
                  {post.author.fullname}
                </p>
                <p className="text-gray-600">{post.author.role}</p>
              </div>
            </div>
          </div>
          {showCover && cover && (
            <div className="col-span-full mx-auto">
              <NextCloudinaryImage
                src={cover.url}
                alt={cover.alternativeText}
                width={1200}
                height={600}
                className="rounded-md shadow-2xl ring-1 ring-gray-900/10"
              />
            </div>
          )}
        </div>
      </FadeIn>
    </Section>
  )
}

================
File: src/components/sections/ContactFooter.tsx
================
import { Button } from '@/components/elements/Button'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { useTranslations } from 'next-intl'

export function ContactFooter() {
  const t = useTranslations('Contact')
  return (
    <Container className="mt-24">
      <FadeIn className="-mx-6 rounded-4xl bg-neutral-950 px-6 py-20 sm:mx-0 sm:py-32 md:px-12">
        <div className="mx-auto max-w-4xl">
          <div className="max-w-xl">
            <h2 className="font-display text-3xl font-medium text-white [text-wrap:balance] sm:text-4xl">
              {t('title')}
            </h2>
            <div className="mt-6 flex">
              <Button href="/contact" invert>
                {t('button_contact')}
              </Button>
            </div>
          </div>
        </div>
      </FadeIn>
    </Container>
  )
}

================
File: src/components/sections/Footer.tsx
================
import Link from 'next/link'

import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'

import { useTranslations } from 'next-intl'
import { socialMediaProfiles } from './SocialMedia'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import { ContactFooter } from './ContactFooter'

function Navigation() {
  const t = useTranslations('Navigation')

  const navigation = [
    // {
    //   title: `${t('project')}`,
    //   links: [
    //     { title: 'Climact', href: '/projects/1' },
    //     { title: 'Community', href: '/projects/2' },
    //     { title: 'Naturalisation', href: '/projects/6' },
    //   ],
    // },
    {
      title: 'Tagadart',
      links: [
        { title: 'About', href: '/about' },
        { title: 'Services', href: '/services' },
        { title: 'Blog', href: '/blog' },
        { title: 'Contact', href: '/contact' },
      ],
    },
    {
      title: `${t('follow_us')}`,
      links: socialMediaProfiles,
    },
  ]

  return (
    <nav>
      <ul role="list" className="grid grid-cols-2 gap-8 sm:grid-cols-3">
        {navigation.map((section, sectionIndex) => (
          <li key={sectionIndex}>
            <div className="font-display text-sm font-semibold tracking-wider text-neutral-950">
              {section.title}
            </div>
            <ul role="list" className="mt-4 text-sm text-neutral-700">
              {section.links.map((link, linkIndex) => (
                <li key={linkIndex} className="mt-4">
                  <Link
                    href={link.href}
                    className="transition hover:text-neutral-950"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
    </nav>
  )
}

export default function Footer() {
  return (
    <>
      <div className="w-full flex-auto">
        <ContactFooter />
      </div>
      <Container as="footer" className="mt-12 w-full sm:mt-16 lg:mt-20">
        <FadeIn>
          <div>
            <Navigation />
          </div>
          <div className="mb-20 mt-24 flex flex-wrap items-center justify-between gap-x-6 gap-y-4 border-t border-neutral-950/10 pt-12">
            <Link href="/" aria-label="Home">
              {/* <Logo className="h-8" fillOnHover /> */}
              <NextCloudinaryImage
                src={'logo_tagadart_2ef62a5f8c'}
                alt="Tagadart Logo"
                width={140}
                height={140}
              />
            </Link>
            <p className="text-sm text-neutral-700">
              © Tagadart Sàrl {new Date().getFullYear()}
            </p>
          </div>
        </FadeIn>
      </Container>
    </>
  )
}

================
File: src/components/sections/Navigation.tsx
================
import { Container, Link } from 'lucide-react'
import { useTranslations } from 'next-intl'

function NavigationRow({ children }: { children: React.ReactNode }) {
  return (
    <div className="even:mt-px sm:bg-neutral-950">
      <Container>
        <div className="grid grid-cols-1 sm:grid-cols-2">{children}</div>
      </Container>
    </div>
  )
}

function NavigationItem({
  href,
  children,
}: {
  href: string
  children: React.ReactNode
}) {
  return (
    <Link
      href={href}
      className="group relative isolate -mx-6 bg-neutral-950 px-6 py-10 even:mt-px sm:mx-0 sm:px-0 sm:py-16 sm:odd:pr-16 sm:even:mt-0 sm:even:border-l sm:even:border-neutral-800 sm:even:pl-16"
    >
      {children}
      <span className="absolute inset-y-0 -z-10 w-screen bg-neutral-900 opacity-0 transition group-odd:right-0 group-even:left-0 group-hover:opacity-100" />
    </Link>
  )
}

export default function Navigation() {
  const t = useTranslations('Navigation')

  return (
    <nav className="mt-px font-display text-5xl font-medium tracking-tight text-white">
      <NavigationRow>
        <NavigationItem href="/projects">{t('project')}</NavigationItem>
        <NavigationItem href="/about">{t('about')}</NavigationItem>
      </NavigationRow>
      <NavigationRow>
        <NavigationItem href="/services">{t('services')}</NavigationItem>
        <NavigationItem href="/blog">{t('blog')}</NavigationItem>
      </NavigationRow>
    </nav>
  )
}

================
File: src/components/sections/PageIntro.tsx
================
import clsx from 'clsx'

import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { PageIntro } from '@/types/global'
import BasicMarkdown from '../ui/BasicMarkdown'
import NextCloudinaryImage from '../images/ImageNextCloudinary'

export function PageIntroSections({
  eyebrow,
  title,
  content,
  cover,
  centered = false,
  showCover = true,
}: PageIntro & { centered?: boolean; showCover?: boolean }) {
  return (
    <div className={clsx('mt-24', centered && 'text-center')}>
      <FadeIn>
        {/* <div className="grid gap-8"> */}
        <div className={`grid gap-8 ${showCover && 'grid-cols-6'}`}>
          <div className="col-span-4">
            <h1>
              <span className="block font-display text-base font-semibold text-neutral-950">
                {eyebrow}
              </span>
              <span className="sr-only"> - </span>
              <span
                className={clsx(
                  'mt-6 block max-w-5xl font-display text-5xl font-medium tracking-tight text-neutral-950 [text-wrap:balance] sm:text-6xl',
                  centered && 'mx-auto',
                )}
              >
                {title}
              </span>
            </h1>
            <div
              className={clsx(
                'mt-6 max-w-3xl text-xl text-neutral-600',
                centered && 'mx-auto',
              )}
            >
              <BasicMarkdown>{content}</BasicMarkdown>
            </div>
          </div>
          {showCover && cover && (
            <div className="col-span-2">
              <NextCloudinaryImage
                src={cover.url}
                alt={cover.alternativeText}
                width={600}
                height={500}
                crop="auto"
                className="rounded-md shadow-2xl ring-1 ring-gray-900/10"
              />
            </div>
          )}
        </div>
      </FadeIn>
    </div>
  )
}

================
File: src/components/sections/Pagination.tsx
================
import React from 'react'
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination'

type PaginationMainProps = {
  currentPage: number
  totalPages: number
  goToPage: (page: number) => void
}

function PaginationMain({
  currentPage,
  totalPages,
  goToPage,
}: PaginationMainProps) {
  // Prevent default link action and navigate programmatically
  const handlePageClick = (
    e: React.MouseEvent<HTMLAnchorElement, MouseEvent>,
    page: number,
  ) => {
    e.preventDefault()
    goToPage(page)
  }

  return (
    <div className="pt-6">
      <Pagination>
        <PaginationContent>
          <PaginationItem>
            <PaginationPrevious
              // aria-disabled={true}
              // className="disabled"
              href="#!"
              onClick={(e) => handlePageClick(e, currentPage - 1)}
              className={currentPage === 1 ? 'pointer-events-none' : ''}
              aria-disabled={currentPage === 1}
              tabIndex={currentPage === 1 ? -1 : undefined}
            />
          </PaginationItem>

          {[...Array(totalPages)].map((_, num) => (
            <PaginationItem key={num + 1}>
              <PaginationLink
                isActive={currentPage === num + 1}
                href="#!"
                onClick={(e) => handlePageClick(e, num + 1)}
              >
                {num + 1}
              </PaginationLink>
            </PaginationItem>
          ))}

          {totalPages > 5 && (
            <PaginationItem>
              <PaginationEllipsis />
            </PaginationItem>
          )}

          <PaginationItem>
            <PaginationNext
              href="#!"
              onClick={(e) => handlePageClick(e, currentPage + 1)}
              className={
                currentPage === totalPages ? 'pointer-events-none' : ''
              }
              aria-disabled={currentPage === totalPages}
              tabIndex={currentPage === totalPages ? -1 : undefined}
            />
          </PaginationItem>
        </PaginationContent>
      </Pagination>
    </div>
  )
}

export default PaginationMain

================
File: src/components/sections/SectionIntro.tsx
================
import clsx from 'clsx'
import Image from 'next/image' // Assuming you're using Next.js, for optimized image handling
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '../ui/BasicMarkdown'
import { MediaItem, PageIntro } from '@/types/global'
import NextCloudinaryImage from '../images/ImageNextCloudinary'

export function SectionIntro({
  title,
  eyebrow,
  content,
  smaller = false,
  invert = false,
  centered = false,
  pagination = false,
  cover,
  embedVideo,
  ...props
}: PageIntro & {
  pagination?: boolean
  centered?: boolean
  showCover?: boolean
  smaller?: boolean
  invert?: boolean
}) {
  const MediaRenderer = ({
    media,
    embedVideo,
  }: {
    media?: MediaItem
    embedVideo?: string
  }) => {
    if (embedVideo) {
      const getYouTubeEmbedUrl = (url: string) => {
        if (url.includes('youtube.com/embed')) return url
        const videoId = url.includes('youtube.com')
          ? new URL(url).searchParams.get('v')
          : url.split('/').pop()
        return `https://www.youtube.com/embed/${videoId}`
      }

      return (
        <div className="aspect-video w-full overflow-hidden rounded-lg">
          <iframe
            width="100%"
            height="100%"
            src={getYouTubeEmbedUrl(embedVideo)}
            title="YouTube Video"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            className="h-full w-full rounded-lg shadow-lg"
          />
        </div>
      )
    }

    if (!media?.url) return null

    const {
      url,
      width = 1200,
      height = 675,
      alternativeText = '',
      provider_metadata,
    } = media
    const fileType = provider_metadata?.resource_type

    if (fileType === 'video') {
      return (
        <div className="aspect-video w-full overflow-hidden rounded-lg">
          <video
            controls
            preload="none"
            className="h-full w-full rounded-lg shadow-lg"
          >
            <source src={url} type="video/mp4" />
            Your browser does not support video playback.
          </video>
        </div>
      )
    }

    return (
      <NextCloudinaryImage
        src={url}
        alt={alternativeText}
        width={width}
        height={height}
        className="w-full rounded-lg shadow-lg"
        crop="fit"
        gravity="center"
        quality="auto"
        fetchFormat="auto"
        showSkeleton
      />
    )
  }

  const renderMedia = ({
    media,
    embedVideo,
  }: {
    media: MediaItem
    embedVideo?: string
  }) => {
    const fileType = cover?.provider_metadata?.resource_type
    const url = cover?.url

    if (embedVideo) {
      let embedUrl
      if (embedVideo.includes('youtube.com/embed')) {
        embedUrl = embedVideo
      } else if (
        embedVideo.includes('youtube.com') ||
        embedVideo.includes('youtu.be')
      ) {
        const videoId = embedVideo.includes('youtube.com')
          ? new URL(embedVideo).searchParams.get('v')
          : embedVideo.split('/').pop()
        embedUrl = `https://www.youtube.com/embed/${videoId}`
      }
      return (
        <iframe
          width="700"
          height="600"
          src={embedUrl}
          title={cover?.alternativeText || 'YouTube Video'}
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          className="w-full rounded-md shadow-2xl ring-1 ring-gray-900/10"
        ></iframe>
      )
    } else if (fileType === 'image' && url) {
      return (
        <Image
          src={url}
          alt={cover.alternativeText || 'Cover Image'}
          width={cover.width}
          height={cover.height}
          className="w-[76rem] rounded-md shadow-2xl ring-1 ring-gray-900/10"
        />
      )
    } else if (fileType === 'video') {
      return (
        <video width="700" height="600" controls preload="none">
          <source src={url} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      )
    }
    return null
  }

  return (
    <div
      {...props}
      className={clsx(centered && 'text-center', 'mb-8', 'pt-10')}
    >
      <FadeIn>
        <h2>
          {eyebrow && (
            <>
              <span
                className={clsx(
                  'block font-display text-base font-semibold',
                  invert ? 'text-primary-50' : 'text-primary-400',
                )}
              >
                {eyebrow}
              </span>
              <span className="sr-only"> - </span>
            </>
          )}
          <span
            className={clsx(
              'block font-display tracking-tight [text-wrap:balance]',
              smaller
                ? 'text-2xl font-semibold'
                : 'text-4xl font-medium sm:text-5xl',
              invert ? 'text-primary-50' : 'text-neutral-950',
            )}
          >
            {title}
          </span>
        </h2>
        {content && (
          <div
            className={clsx(
              'mt-6 max-w-3xl text-xl',
              invert ? 'text-primary-200' : 'text-neutral-600',
              centered && 'mx-auto',
            )}
          >
            <BasicMarkdown>{content}</BasicMarkdown>
          </div>
        )}
        {(cover || embedVideo) && (
          <div className="mt-8">
            <MediaRenderer media={cover ?? undefined} embedVideo={embedVideo} />
          </div>
        )}
        {/* {renderMedia(cover, embedVideo)} */}
      </FadeIn>
    </div>
  )
}

================
File: src/components/sections/SocialMedia.tsx
================
import Link from 'next/link'
import clsx from 'clsx'
import { LinkedinIcon } from 'lucide-react'

function FacebookIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12Z"
      />
    </svg>
  )
}

function InstagramIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465.668.25 1.272.644 1.772 1.153.509.5.902 1.104 1.153 1.772.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.903 4.903 0 0 1-1.153 1.772c-.5.509-1.104.902-1.772 1.153-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.903 4.903 0 0 1-1.772-1.153 4.902 4.902 0 0 1-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 0 1 1.153-1.772A4.902 4.902 0 0 1 5.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63Zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.096 3.096 0 0 0-.748-1.15 3.098 3.098 0 0 0-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058ZM12 6.865a5.135 5.135 0 1 1 0 10.27 5.135 5.135 0 0 1 0-10.27Zm0 1.802a3.333 3.333 0 1 0 0 6.666 3.333 3.333 0 0 0 0-6.666Zm5.338-3.205a1.2 1.2 0 1 1 0 2.4 1.2 1.2 0 0 1 0-2.4Z"
      />
    </svg>
  )
}

// function GitHubIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
//   return (
//     <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
//       <path
//         fillRule="evenodd"
//         clipRule="evenodd"
//         d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0 1 12 6.844a9.59 9.59 0 0 1 2.504.337c1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.02 10.02 0 0 0 22 12.017C22 6.484 17.522 2 12 2Z"
//       />
//     </svg>
//   )
// }

// function DribbbleIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
//   return (
//     <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
//       <path
//         fillRule="evenodd"
//         clipRule="evenodd"
//         d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c5.51 0 10-4.48 10-10S17.51 2 12 2Zm6.605 4.61a8.502 8.502 0 0 1 1.93 5.314c-.281-.054-3.101-.629-5.943-.271-.065-.141-.12-.293-.184-.445a25.42 25.42 0 0 0-.564-1.236c3.145-1.28 4.577-3.124 4.761-3.362ZM12 3.475c2.17 0 4.154.813 5.662 2.148-.152.216-1.443 1.941-4.48 3.08-1.399-2.57-2.95-4.675-3.189-5A8.688 8.688 0 0 1 12 3.475Zm-3.633.803a53.889 53.889 0 0 1 3.167 4.935c-3.992 1.063-7.517 1.04-7.896 1.04a8.581 8.581 0 0 1 4.729-5.975ZM3.453 12.01v-.26c.37.01 4.512.065 8.775-1.215.25.477.477.965.694 1.453-.109.033-.228.065-.336.098-4.404 1.42-6.747 5.303-6.942 5.629a8.523 8.523 0 0 1-2.191-5.705ZM12 20.547a8.482 8.482 0 0 1-5.239-1.8c.152-.315 1.888-3.656 6.703-5.337.022-.01.033-.01.054-.022a35.32 35.32 0 0 1 1.823 6.475 8.402 8.402 0 0 1-3.341.684Zm4.761-1.465c-.086-.52-.542-3.015-1.659-6.084 2.679-.423 5.022.271 5.314.369a8.468 8.468 0 0 1-3.655 5.715Z"
//       />
//     </svg>
//   )
// }

export const socialMediaProfiles = [
  {
    title: 'Facebook',
    href: 'https://www.facebook.com/tagadartcommunication',
    icon: FacebookIcon,
  },
  {
    title: 'Linkedin',
    href: 'https://www.linkedin.com/company/tagadart',
    icon: LinkedinIcon,
  },
  {
    title: 'Instagram',
    href: 'https://www.instagram.com/tagadart_sarl/',
    icon: InstagramIcon,
  },
  // { title: 'GitHub', href: 'https://github.com', icon: GitHubIcon },
  // { title: 'Dribbble', href: 'https://dribbble.com', icon: DribbbleIcon },
]

export default function SocialMedia({
  className,
  invert = false,
}: {
  className?: string
  invert?: boolean
}) {
  return (
    <ul
      role="list"
      className={clsx(
        'flex gap-x-10',
        invert ? 'text-white' : 'text-neutral-950',
        className,
      )}
    >
      {socialMediaProfiles.map((socialMediaProfile) => (
        <li key={socialMediaProfile.title}>
          <Link
            href={socialMediaProfile.href}
            aria-label={socialMediaProfile.title}
            className={clsx(
              'transition',
              invert ? 'hover:text-neutral-200' : 'hover:text-neutral-700',
            )}
          >
            <socialMediaProfile.icon className="h-6 w-6 fill-current" />
          </Link>
        </li>
      ))}
    </ul>
  )
}

================
File: src/components/sections/TagList.tsx
================
import clsx from 'clsx'

export function TagList({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <ul
      role="list"
      className={clsx(className, 'flex flex-wrap gap-4')}
      style={{ listStyleType: 'none', padding: 0, margin: 0 }}
    >
      {children}
    </ul>
  )
}

export function TagListItem({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <li
      className={clsx(
        'rounded-full bg-neutral-100 px-4 py-1.5 text-base text-neutral-600',
        className,
      )}
    >
      {children}
    </li>
  )
}

================
File: src/components/ui/BasicMarkdown.tsx
================
import React, { ReactNode } from 'react'
import ReactMarkdown from 'react-markdown'
import rehypeRaw from 'rehype-raw'
import remarkGfm from 'remark-gfm'

type Props = {
  content?: string
  children?: string
}

function BasicMarkdown({ children, content }: Props) {
  return (
    <ReactMarkdown
      className="markdown-content"
      remarkPlugins={[remarkGfm]}
      rehypePlugins={[rehypeRaw]}
    >
      {children || content}
    </ReactMarkdown>
  )
}

export default BasicMarkdown

================
File: src/components/ui/Border.tsx
================
import clsx from 'clsx'

type BorderProps<T extends React.ElementType> = {
  as?: T
  className?: string
  position?: 'top' | 'left'
  invert?: boolean
}

export function Border<T extends React.ElementType = 'div'>({
  as,
  className,
  position = 'top',
  invert = false,
  ...props
}: Omit<React.ComponentPropsWithoutRef<T>, keyof BorderProps<T>> &
  BorderProps<T>) {
  let Component = as ?? 'div'

  return (
    <Component
      className={clsx(
        className,
        'relative before:absolute after:absolute',
        invert
          ? 'before:bg-white after:bg-white/10'
          : 'before:bg-neutral-950 after:bg-neutral-950/10',
        position === 'top' &&
          'before:left-0 before:top-0 before:h-px before:w-6 after:left-8 after:right-0 after:top-0 after:h-px',
        position === 'left' &&
          'before:left-0 before:top-0 before:h-6 before:w-px after:bottom-0 after:left-0 after:top-8 after:w-px',
      )}
      {...props}
    />
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-neutral-300',
  {
    variants: {
      variant: {
        default:
          'bg-neutral-900 text-neutral-50 shadow hover:bg-neutral-900/90 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50/90',
        primary:
          'bg-primary-700 text-primary-50 shadow hover:bg-primary-700/70 dark:bg-primary-50 dark:text-primary-700 dark:hover:bg-primary-50/90',
        destructive:
          'bg-red-500 text-neutral-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50 dark:hover:bg-red-900/90',
        outline:
          'border border-neutral-200 bg-white shadow-sm hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
        secondary:
          'bg-neutral-100 text-neutral-900 shadow-sm hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80',
        ghost:
          'hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
        link: 'text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50',
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  },
)
Button.displayName = 'Button'

export { Button, buttonVariants }

================
File: src/components/ui/calendar.tsx
================
'use client'

import * as React from 'react'
import { ChevronLeftIcon, ChevronRightIcon } from '@radix-ui/react-icons'
import { DayPicker } from 'react-day-picker'

import { cn } from '@/lib/utils'
import { buttonVariants } from '@/components/ui/button'

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn('p-3', className)}
      classNames={{
        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',
        month: 'space-y-4',
        caption: 'flex justify-center pt-1 relative items-center',
        caption_label: 'text-sm font-medium',
        nav: 'space-x-1 flex items-center',
        nav_button: cn(
          buttonVariants({ variant: 'outline' }),
          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',
        ),
        nav_button_previous: 'absolute left-1',
        nav_button_next: 'absolute right-1',
        table: 'w-full border-collapse space-y-1',
        head_row: 'flex',
        head_cell:
          'text-neutral-500 rounded-md w-8 font-normal text-[0.8rem] dark:text-neutral-400',
        row: 'flex w-full mt-2',
        cell: cn(
          'relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-neutral-100 [&:has([aria-selected].day-outside)]:bg-neutral-100/50 [&:has([aria-selected].day-range-end)]:rounded-r-md dark:[&:has([aria-selected])]:bg-neutral-800 dark:[&:has([aria-selected].day-outside)]:bg-neutral-800/50',
          props.mode === 'range'
            ? '[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md'
            : '[&:has([aria-selected])]:rounded-md',
        ),
        day: cn(
          buttonVariants({ variant: 'ghost' }),
          'h-8 w-8 p-0 font-normal aria-selected:opacity-100',
        ),
        day_range_start: 'day-range-start',
        day_range_end: 'day-range-end',
        day_selected:
          'bg-neutral-900 text-neutral-50 hover:bg-neutral-900 hover:text-neutral-50 focus:bg-neutral-900 focus:text-neutral-50 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50 dark:hover:text-neutral-900 dark:focus:bg-neutral-50 dark:focus:text-neutral-900',
        day_today:
          'bg-neutral-100 text-neutral-900 dark:bg-neutral-800 dark:text-neutral-50',
        day_outside:
          'day-outside text-neutral-500 opacity-50  aria-selected:bg-neutral-100/50 aria-selected:text-neutral-500 aria-selected:opacity-30 dark:text-neutral-400 dark:aria-selected:bg-neutral-800/50 dark:aria-selected:text-neutral-400',
        day_disabled: 'text-neutral-500 opacity-50 dark:text-neutral-400',
        day_range_middle:
          'aria-selected:bg-neutral-100 aria-selected:text-neutral-900 dark:aria-selected:bg-neutral-800 dark:aria-selected:text-neutral-50',
        day_hidden: 'invisible',
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeftIcon className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRightIcon className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = 'Calendar'

export { Calendar }

================
File: src/components/ui/Container.tsx
================
import clsx from 'clsx'

type ContainerProps<T extends React.ElementType> = {
  as?: T
  className?: string
  children: React.ReactNode
}

export function Container<T extends React.ElementType = 'div'>({
  as,
  className,
  children,
}: Omit<React.ComponentPropsWithoutRef<T>, keyof ContainerProps<T>> &
  ContainerProps<T>) {
  let Component = as ?? 'div'

  return (
    <Component className={clsx('mx-auto max-w-7xl px-6', className)}>
      <div>{children}</div>
    </Component>
  )
}

================
File: src/components/ui/FadeIn.tsx
================
'use client'

import { createContext, useContext } from 'react'
import { motion, useReducedMotion } from 'framer-motion'

const FadeInStaggerContext = createContext(false)

const viewport = { once: true, margin: '0px 0px -200px' }

export function FadeIn(
  props: React.ComponentPropsWithoutRef<typeof motion.div>,
) {
  let shouldReduceMotion = useReducedMotion()
  let isInStaggerGroup = useContext(FadeInStaggerContext)

  return (
    <motion.div
      variants={{
        hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 24 },
        visible: { opacity: 1, y: 0 },
      }}
      transition={{ duration: 0.5 }}
      {...(isInStaggerGroup
        ? {}
        : {
            initial: 'hidden',
            whileInView: 'visible',
            viewport,
          })}
      {...props}
    />
  )
}

export function FadeInStagger({
  faster = false,
  ...props
}: React.ComponentPropsWithoutRef<typeof motion.div> & { faster?: boolean }) {
  return (
    <FadeInStaggerContext.Provider value={true}>
      <motion.div
        initial="hidden"
        whileInView="visible"
        viewport={viewport}
        transition={{ staggerChildren: faster ? 0.12 : 0.2 }}
        {...props}
      />
    </FadeInStaggerContext.Provider>
  )
}

================
File: src/components/ui/Fetcher.tsx.off
================
import React, { ReactNode, useEffect, useState } from 'react'
import useSWR, { KeyedMutator } from 'swr'

import { defaultQueryParams, fetchUseSWR } from '@/request/request'
import { Data, RestQueryParams } from '@/types/global'

import * as qs from 'qs'
interface FetcherChildProps<T> {
  data: Data
  currentPage: number
  totalPages: number
  goToPage: (page: number) => void
  isLoading: boolean
  mutate: KeyedMutator<T>
  hasNextPage: boolean
  loadMore: () => void
}

// Update FetcherProps to use the new FetcherChildProps interface
interface FetcherProps<T> {
  url: string
  sort?: string
  populate?: string | object
  filters?: []
  pagination?: object
  paginationMode?: 'infinite' | 'pagination'
  params?: RestQueryParams
  children: (fetchData: FetcherChildProps<T>) => ReactNode
}

function Fetcher<T>({
  url,
  children,
  params = defaultQueryParams,
  filters,
  paginationMode = 'pagination',
  sort,
  populate,
}: FetcherProps<T>) {
  const [page, setPage] = useState(1)
  const [accumulatedData, setAccumulatedData] = useState<Data>()

  const effectiveFilters = { ...params.filters, ...filters }
  const effectivePopulate = populate || params.populate
  const effectiveSort = sort || params.sort
  const effectiveParams = {
    ...params,
    filters: effectiveFilters,
    sort: effectiveSort,
    populate: effectivePopulate,
    pagination: { ...params.pagination, page: page },
  }

  const queryString = qs.stringify(effectiveParams, {
    encode: false,
    arrayFormat: 'indices',
    allowDots: false,
  })

  const { data, error, mutate } = useSWR<any>(
    `${url}?${queryString}`,
    fetchUseSWR,
    {
      refreshInterval: 30000,
    },
  )

  const hasNextPage =
    data?.meta?.pagination?.page < data?.meta?.pagination?.pageCount && true

  const goToPage = (pageNum: number) => {
    setPage(pageNum)
    // You might need to reset accumulatedData here if you want to start fresh for each page navigation
  }

  useEffect(() => {
    if (data) {
      if (paginationMode === 'infinite') {
        setAccumulatedData((prevData) => {
          return {
            data: prevData ? [...prevData?.data, ...data.data] : [...data.data],
            meta: data.meta,
          }
        })
      } else {
        setAccumulatedData(data)
      }
    }
  }, [data])

  const loadMore = async () => {
    setPage(page + 1)
  }

  if (!accumulatedData) return null
  if (error) return <div>Erreur lors du chargement des données...</div>

  return children({
    data: accumulatedData,
    currentPage: page,
    goToPage,
    isLoading: !data && !error,
    mutate,
    totalPages: data?.meta?.pagination?.pageCount || 0,
    loadMore,
    hasNextPage,
  })
}

export default Fetcher

================
File: src/components/ui/form.tsx
================
'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { Slot } from '@radix-ui/react-slot'
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form'

import { cn } from '@/lib/utils'
import { Label } from '@/components/ui/label'

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>')
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = 'FormItem'

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-red-500 dark:text-red-900', className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = 'FormLabel'

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = 'FormControl'

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn(
        'text-[0.8rem] text-neutral-500 dark:text-neutral-400',
        className,
      )}
      {...props}
    />
  )
})
FormDescription.displayName = 'FormDescription'

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn(
        'text-[0.8rem] font-medium text-red-500 dark:text-red-900',
        className,
      )}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = 'FormMessage'

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/GrayscaleTransitionImage.tsx
================
'use client'

import { useRef } from 'react'
import Image, { type ImageProps } from 'next/image'
import {
  motion,
  useMotionTemplate,
  useScroll,
  useTransform,
} from 'framer-motion'

const MotionImage = motion(Image)

export function GrayscaleTransitionImage(
  props: Pick<
    ImageProps,
    'src' | 'quality' | 'className' | 'sizes' | 'priority' | 'width' | 'height'
  > & { alt?: string },
) {
  let ref = useRef<React.ElementRef<'div'>>(null)
  let { scrollYProgress } = useScroll({
    target: ref,
    offset: ['start 65%', 'end 35%'],
  })
  let grayscale = useTransform(scrollYProgress, [0, 0.5, 1], [1, 0, 1])
  let filter = useMotionTemplate`grayscale(${grayscale})`

  return (
    <div ref={ref} className="group relative">
      <MotionImage alt="" style={{ filter } as any} {...props} />
      <div
        className="pointer-events-none absolute left-0 top-0 w-full opacity-0 transition duration-300 group-hover:opacity-100"
        aria-hidden="true"
      >
        <Image alt="" {...props} />
      </div>
    </div>
  )
}

================
File: src/components/ui/GridList.tsx
================
import clsx from 'clsx'

import { Border } from '@/components/ui/Border'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'

export function GridList({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <FadeInStagger>
      <ul
        role="list"
        className={clsx(
          'grid grid-cols-1 gap-10 sm:grid-cols-2 lg:grid-cols-3',
          className,
        )}
      >
        {children}
      </ul>
    </FadeInStagger>
  )
}

export function GridListItem({
  title,
  children,
  className,
  invert = false,
}: {
  title: string
  children: React.ReactNode
  className?: string
  invert?: boolean
}) {
  return (
    <li
      className={clsx(
        'text-base',
        invert
          ? 'text-neutral-300 before:bg-white after:bg-white/10'
          : 'text-neutral-600 before:bg-neutral-950 after:bg-neutral-100',
        className,
      )}
    >
      <FadeIn>
        <Border position="left" className="px-8" invert={invert}>
          <strong
            className={clsx(
              'font-semibold',
              invert ? 'text-white' : 'text-neutral-950',
            )}
          >
            {title}.
          </strong>
          {children}
        </Border>
      </FadeIn>
    </li>
  )
}

================
File: src/components/ui/GridPattern.tsx
================
'use client'

import { useEffect, useId, useRef, useState } from 'react'
import { motion } from 'framer-motion'

function Block({
  x,
  y,
  ...props
}: Omit<React.ComponentPropsWithoutRef<typeof motion.path>, 'x' | 'y'> & {
  x: number
  y: number
}) {
  return (
    <motion.path
      transform={`translate(${-32 * y + 96 * x} ${160 * y})`}
      d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"
      {...props}
    />
  )
}

export function GridPattern({
  yOffset = 0,
  interactive = false,
  ...props
}: React.ComponentPropsWithoutRef<'svg'> & {
  yOffset?: number
  interactive?: boolean
}) {
  let id = useId()
  let ref = useRef<React.ElementRef<'svg'>>(null)
  let currentBlock = useRef<[x: number, y: number]>()
  let counter = useRef(0)
  let [hoveredBlocks, setHoveredBlocks] = useState<
    Array<[x: number, y: number, key: number]>
  >([])
  let staticBlocks = [
    [1, 1],
    [2, 2],
    [4, 3],
    [6, 2],
    [7, 4],
    [5, 5],
  ]

  useEffect(() => {
    if (!interactive) {
      return
    }

    function onMouseMove(event: MouseEvent) {
      if (!ref.current) {
        return
      }

      let rect = ref.current.getBoundingClientRect()
      let x = event.clientX - rect.left
      let y = event.clientY - rect.top
      if (x < 0 || y < 0 || x > rect.width || y > rect.height) {
        return
      }

      x = x - rect.width / 2 - 32
      y = y - yOffset
      x += Math.tan(32 / 160) * y
      x = Math.floor(x / 96)
      y = Math.floor(y / 160)

      if (currentBlock.current?.[0] === x && currentBlock.current?.[1] === y) {
        return
      }

      currentBlock.current = [x, y]

      setHoveredBlocks((blocks) => {
        let key = counter.current++
        let block = [x, y, key] as (typeof hoveredBlocks)[number]
        return [...blocks, block].filter(
          (block) => !(block[0] === x && block[1] === y && block[2] !== key),
        )
      })
    }

    window.addEventListener('mousemove', onMouseMove)

    return () => {
      window.removeEventListener('mousemove', onMouseMove)
    }
  }, [yOffset, interactive])

  return (
    <svg ref={ref} aria-hidden="true" {...props}>
      <rect width="100%" height="100%" fill={`url(#${id})`} strokeWidth="0" />
      <svg x="50%" y={yOffset} strokeWidth="0" className="overflow-visible">
        {staticBlocks.map((block) => (
          <Block key={`${block}`} x={block[0]} y={block[1]} />
        ))}
        {hoveredBlocks.map((block) => (
          <Block
            key={block[2]}
            x={block[0]}
            y={block[1]}
            animate={{ opacity: [0, 1, 0] }}
            transition={{ duration: 1, times: [0, 0, 1] }}
            onAnimationComplete={() => {
              setHoveredBlocks((blocks) =>
                blocks.filter((b) => b[2] !== block[2]),
              )
            }}
          />
        ))}
      </svg>
      <defs>
        <pattern
          id={id}
          width="96"
          height="480"
          x="50%"
          patternUnits="userSpaceOnUse"
          patternTransform={`translate(0 ${yOffset})`}
          fill="none"
        >
          <path d="M128 0 98.572 147.138A16 16 0 0 1 82.883 160H13.117a16 16 0 0 0-15.69 12.862l-26.855 134.276A16 16 0 0 1-45.117 320H-116M64-160 34.572-12.862A16 16 0 0 1 18.883 0h-69.766a16 16 0 0 0-15.69 12.862l-26.855 134.276A16 16 0 0 1-109.117 160H-180M192 160l-29.428 147.138A15.999 15.999 0 0 1 146.883 320H77.117a16 16 0 0 0-15.69 12.862L34.573 467.138A16 16 0 0 1 18.883 480H-52M-136 480h58.883a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1-18.883 320h69.766a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1 109.117 160H192M-72 640h58.883a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1 45.117 480h69.766a15.999 15.999 0 0 0 15.689-12.862l26.856-134.276A15.999 15.999 0 0 1 173.117 320H256M-200 320h58.883a15.999 15.999 0 0 0 15.689-12.862l26.856-134.276A16 16 0 0 1-82.883 160h69.766a16 16 0 0 0 15.69-12.862L29.427 12.862A16 16 0 0 1 45.117 0H128" />
        </pattern>
      </defs>
    </svg>
  )
}

================
File: src/components/ui/input.tsx
================
import * as React from 'react'

import { cn } from '@/lib/utils'

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-9 w-full rounded-md border border-neutral-200 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300',
          className,
        )}
        ref={ref}
        {...props}
      />
    )
  },
)
Input.displayName = 'Input'

export { Input }

================
File: src/components/ui/label.tsx
================
'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/List.tsx
================
import clsx from 'clsx'

import { Border } from '@/components/ui/Border'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'

export function List({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <FadeInStagger>
      <ul role="list" className={clsx('text-base text-neutral-600', className)}>
        {children}
      </ul>
    </FadeInStagger>
  )
}

export function ListItem({
  children,
  title,
}: {
  children: React.ReactNode
  title?: string
}) {
  return (
    <li className="group mt-10 first:mt-0">
      <FadeIn>
        <Border className="pt-10 group-first:pt-0 group-first:before:hidden group-first:after:hidden">
          {title && (
            <strong className="font-semibold text-neutral-950">{`${title}. `}</strong>
          )}
          {children}
        </Border>
      </FadeIn>
    </li>
  )
}

================
File: src/components/ui/MDXComponents.tsx
================
import clsx from 'clsx'

import { Border } from '@/components/ui/Border'
import { GrayscaleTransitionImage } from '@/components/ui/GrayscaleTransitionImage'
import { StatList, StatListItem } from '@/components/ui/StatList'
import { TagList, TagListItem } from '@/components/sections/TagList'
import { Testimonial } from '../elements/Testimonial'

export const MDXComponents = {
  Blockquote({
    className,
    ...props
  }: React.ComponentPropsWithoutRef<typeof Testimonial>) {
    return <Testimonial className={clsx('my-32', className)} {...props} />
  },
  img: function Img({
    className,
    ...props
  }: React.ComponentPropsWithoutRef<typeof GrayscaleTransitionImage>) {
    return (
      <div
        className={clsx(
          'group isolate my-10 overflow-hidden rounded-4xl bg-neutral-100 max-sm:-mx-6',
          className,
        )}
      >
        <GrayscaleTransitionImage
          {...props}
          sizes="(min-width: 768px) 42rem, 100vw"
          className="aspect-[16/10] w-full object-cover"
        />
      </div>
    )
  },
  StatList({
    className,
    ...props
  }: React.ComponentPropsWithoutRef<typeof StatList>) {
    return (
      <StatList className={clsx('my-32 !max-w-none', className)} {...props} />
    )
  },
  StatListItem,
  table: function Table({
    className,
    ...props
  }: React.ComponentPropsWithoutRef<'table'>) {
    return (
      <div
        className={clsx(
          'my-10 max-sm:-mx-6 max-sm:flex max-sm:overflow-x-auto',
          className,
        )}
      >
        <div className="max-sm:min-w-full max-sm:flex-none max-sm:px-6">
          <table {...props} />
        </div>
      </div>
    )
  },
  TagList({
    className,
    ...props
  }: React.ComponentPropsWithoutRef<typeof TagList>) {
    return <TagList className={clsx('my-6', className)} {...props} />
  },
  TagListItem,
  TopTip({
    children,
    className,
  }: {
    children: React.ReactNode
    className?: string
  }) {
    return (
      <Border position="left" className={clsx('my-10 pl-8', className)}>
        <p className="font-display text-sm font-bold uppercase tracking-widest text-neutral-950">
          Top tip
        </p>
        <div className="mt-4">{children}</div>
      </Border>
    )
  },
  Typography({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {
    return <div className={clsx('typography', className)} {...props} />
  },
  wrapper({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {
    return (
      <div
        className={clsx(
          '[&>*]:mx-auto [&>*]:max-w-3xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0',
          className,
        )}
        {...props}
      />
    )
  },
}

================
File: src/components/ui/message-markdown-memoized.tsx
================
import { FC, memo } from 'react'
import ReactMarkdown, { Options } from 'react-markdown'

export const MessageMarkdownMemoized: FC<Options> = memo(
  ReactMarkdown,
  (prevProps, nextProps) =>
    prevProps.children === nextProps.children &&
    prevProps.className === nextProps.className,
)

================
File: src/components/ui/message-markdown.tsx
================
//TODO: Seems a little too much, it comes from another project ?

import React, { FC } from 'react'
import remarkGfm from 'remark-gfm'
import ReactMarkdown from 'react-markdown'
import { TagList, TagListItem } from '../sections/TagList'
import { Testimonial } from '../elements/Testimonial'
import { StatList, StatListItem } from './StatList'
import TopTip from './TopTip' // Import the TopTip component
import rehypeHighlight from 'rehype-highlight'

interface MessageMarkdownProps {
  content: string
}

interface TagListItem {
  tagName: string
}

interface Blockquote {
  author: {
    name: string
    role: string
  }
  image: {
    src: string
  }
  text: string
}

interface StatListItem {
  value: string
  label: string
}

interface ExtractedData {
  tags: TagListItem[]
  blockquote: Blockquote
  stats: StatListItem[]
  otherText: string
  topTipContent: string
}

function extractDataFromMDX(mdxString: string): ExtractedData {
  const tags: TagListItem[] = []
  const stats: StatListItem[] = []
  let topTipContent = ''

  let tagListMatch
  try {
    if (typeof mdxString === 'undefined') {
      throw new Error('mdxString is undefined')
    }
    tagListMatch = mdxString.match(/<TagList>[\s\S]*?<\/TagList>/)
  } catch (error) {
    console.log('error')
  }
  if (tagListMatch) {
    const tagListItems = tagListMatch[0].match(
      /<TagListItem>(.*?)<\/TagListItem>/g,
    )
    if (tagListItems) {
      tagListItems.forEach((tag) => {
        const tagNameMatch = tag.match(/<TagListItem>(.*?)<\/TagListItem>/)
        if (tagNameMatch) {
          tags.push({ tagName: tagNameMatch[1] })
        }
      })
    }
  }

  const blockquoteMatch = mdxString.match(
    /<Blockquote[\s\S]*?>([\s\S]*?)<\/Blockquote>/,
  )
  let blockquote = {
    author: {
      name: '',
      role: '',
    },
    image: { src: '' },
    text: '',
  }

  if (blockquoteMatch) {
    const authorNameMatch = blockquoteMatch[0].match(/name: '([^']*)'/)
    const authorRoleMatch = blockquoteMatch[0].match(/role: '([^']*)'/)
    const imageSrcMatch = blockquoteMatch[0].match(/src: ([^\s}]*)/)
    const textMatch = blockquoteMatch[1].match(/>([\s\S]*?)<\/Blockquote>/)

    blockquote = {
      author: {
        name: authorNameMatch ? authorNameMatch[1] : '',
        role: authorRoleMatch ? authorRoleMatch[1] : '',
      },
      image: { src: imageSrcMatch ? imageSrcMatch[1].trim() : '' },
      text: textMatch
        ? textMatch[1].trim()
        : blockquoteMatch[1].replace(/<[^>]+>/g, '').trim(),
    }
  }

  const statListMatch = mdxString.match(/<StatList>[\s\S]*?<\/StatList>/)
  if (statListMatch) {
    const statListItems = statListMatch[0].match(
      /<StatListItem value="([^"]+)" label="([^"]+)" \/>/g,
    )
    if (statListItems) {
      statListItems.forEach((stat) => {
        const statMatch = stat.match(
          /<StatListItem value="([^"]+)" label="([^"]+)" \/>/,
        )
        if (statMatch) {
          stats.push({ value: statMatch[1], label: statMatch[2] })
        }
      })
    }
  }

  const topTipMatch = mdxString.match(/<TopTip>([\s\S]*?)<\/TopTip>/)
  if (topTipMatch) {
    topTipContent = topTipMatch[1].trim()
  }

  const cleanedMdxString = mdxString
    .replace(/<TagList>[\s\S]*?<\/TagList>/, '')
    .replace(/<Blockquote[\s\S]*?>([\s\S]*?)<\/Blockquote>/, '')
    .replace(/<StatList>[\s\S]*?<\/StatList>/, '')
    .replace(/<TopTip>[\s\S]*?<\/TopTip>/, '')

  const otherText = cleanedMdxString.trim()

  return {
    tags,
    blockquote,
    stats,
    otherText,
    topTipContent,
  }
}

export const MessageMarkdown: FC<MessageMarkdownProps> = ({ content }) => {
  const { tags, blockquote, stats, otherText, topTipContent } =
    extractDataFromMDX(content)
  const isBlockquoteEmpty =
    !blockquote.author.name &&
    !blockquote.author.role &&
    !blockquote.image.src &&
    !blockquote.text

  return (
    <div className="main_content mt-24 sm:mt-32 lg:mt-40 [&>*]:mx-auto [&>*]:max-w-3xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0">
      <div className="typography">
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeHighlight]}
        >
          {otherText}
        </ReactMarkdown>
        {topTipContent && <TopTip>{topTipContent}</TopTip>}
        <TagList>
          {tags.map((tag, index) => (
            <TagListItem key={index}>{tag.tagName}</TagListItem>
          ))}
        </TagList>
        {/* {!isBlockquoteEmpty && (
          <Testimonial author={blockquote.author}>
            {blockquote.text}
          </Testimonial>
        )} */}
        <StatList>
          {stats.map((stat, index) => (
            <StatListItem key={index} label={stat.label} value={stat.value} />
          ))}
        </StatList>
      </div>
    </div>
  )
}

================
File: src/components/ui/pagination.tsx
================
import * as React from 'react'
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react'
import Link from 'next/link'
import { cn } from '@/lib/utils'
import { ButtonProps, buttonVariants } from '@/components/ui/button'
import { useTranslations } from 'next-intl' // Import useTranslations

const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn('mx-auto flex w-full justify-center', className)}
    {...props}
  />
)
Pagination.displayName = 'Pagination'

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<'ul'>
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn('flex flex-row items-center gap-1', className)}
    {...props}
  />
))
PaginationContent.displayName = 'PaginationContent'

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<'li'>
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn('', className)} {...props} />
))
PaginationItem.displayName = 'PaginationItem'

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, 'size'> &
  React.ComponentProps<typeof Link>

const PaginationLink = ({
  className,
  isActive,
  size = 'icon',
  ...props
}: PaginationLinkProps) => (
  <Link
    aria-current={isActive ? 'page' : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? 'outline' : 'ghost',
        size,
      }),
      className,
    )}
    {...props}
  />
)
PaginationLink.displayName = 'PaginationLink'

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => {
  const t = useTranslations('Pagination')
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn('gap-1 pl-2.5', className)}
      {...props}
    >
      <ChevronLeft className="h-4 w-4" />
      <span>{t('previous')}</span>
    </PaginationLink>
  )
}
PaginationPrevious.displayName = 'PaginationPrevious'

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => {
  const t = useTranslations('Pagination')
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn('gap-1 pr-2.5', className)}
      {...props}
    >
      <span>{t('next')}</span> {/* Use translation key */}
      <ChevronRight className="h-4 w-4" />
    </PaginationLink>
  )
}
PaginationNext.displayName = 'PaginationNext'

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => {
  const t = useTranslations('Pagination')
  return (
    <span
      aria-hidden
      className={cn('flex h-9 w-9 items-center justify-center', className)}
      {...props}
    >
      <MoreHorizontal className="h-4 w-4" />
      <span className="sr-only">{t('morePages')}</span>{' '}
      {/* Use translation key */}
    </span>
  )
}
PaginationEllipsis.displayName = 'PaginationEllipsis'

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: src/components/ui/popover.tsx
================
'use client'

import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'

import { cn } from '@/lib/utils'

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border border-neutral-200 bg-white p-4 text-neutral-950 shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50',
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: src/components/ui/ReadMore.tsx
================
import React, { useState } from 'react'
import { getTranslations } from 'next-intl/server'

export async function TruncatedTextReadMore({
  text,
  max,
}: {
  text: string
  max: number
}) {
  const [isTruncated, setIsTruncated] = useState(true)
  const toggleTruncated = () => setIsTruncated(!isTruncated)

  const t = await getTranslations('General')

  if (text.length <= max) {
    return (
      <p className="pt-2 text-secondary-700">
        <em>{text}</em>
      </p>
    )
  }

  const displayText = isTruncated ? text.substr(0, max - 1) + '...' : text

  return (
    <p className="pt-2 text-secondary-700">
      <em>{displayText}</em>
      <br />
      <a className="link cursor-pointer" onClick={toggleTruncated}>
        {isTruncated ? t('read_more') : t('read_less')}
      </a>
    </p>
  )
}

================
File: src/components/ui/RootLayout.tsx
================
//TODO: Refactoring, it's not very clean, too much comments and unuse components
'use client'
import {
  createContext,
  useContext,
  useEffect,
  useId,
  useRef,
  useState,
} from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import clsx from 'clsx'
import { motion, MotionConfig, useReducedMotion } from 'framer-motion'
import dynamic from 'next/dynamic'

import { Button } from '@/components/elements/Button'
import { Container } from '@/components/ui/Container'
import { GridPattern } from '@/components/ui/GridPattern'
import ErrorBoundary from '@/components/elements/ErrorBoundary'

import { useTranslations } from 'next-intl'

import NextCloudinaryImage from '../images/ImageNextCloudinary'

const Footer = dynamic(() => import('@/components/sections/Footer'), {
  loading: () => <p>Loading footer...</p>,
})

const SocialMedia = dynamic(() => import('@/components/sections/SocialMedia'), {
  loading: () => <p>Loading socialMedia...</p>,
})

function NavigationRow({ children }: { children: React.ReactNode }) {
  return (
    <div className="even:mt-px sm:bg-neutral-950">
      <Container>
        <div className="grid grid-cols-1 sm:grid-cols-2">{children}</div>
      </Container>
    </div>
  )
}

function NavigationItem({
  href,
  children,
}: {
  href: string
  children: React.ReactNode
}) {
  return (
    <Link
      href={href}
      className="group relative isolate -mx-6 bg-neutral-950 px-6 py-10 even:mt-px sm:mx-0 sm:px-0 sm:py-16 sm:odd:pr-16 sm:even:mt-0 sm:even:border-l sm:even:border-neutral-800 sm:even:pl-16"
    >
      {children}
      <span className="absolute inset-y-0 -z-10 w-screen bg-neutral-900 opacity-0 transition group-odd:right-0 group-even:left-0 group-hover:opacity-100" />
    </Link>
  )
}

export default function Navigation() {
  const t = useTranslations('Navigation')

  return (
    <nav className="mt-px font-display text-5xl font-medium tracking-tight text-white">
      <NavigationRow>
        <NavigationItem href="/projects">{t('project')}</NavigationItem>
        <NavigationItem href="/about">{t('about')}</NavigationItem>
      </NavigationRow>
      <NavigationRow>
        <NavigationItem href="/services">{t('services')}</NavigationItem>
        <NavigationItem href="/blog">{t('blog')}</NavigationItem>
      </NavigationRow>
    </nav>
  )
}

const RootLayoutContext = createContext<{
  logoHovered: boolean
  setLogoHovered: React.Dispatch<React.SetStateAction<boolean>>
} | null>(null)

function XIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path d="m5.636 4.223 14.142 14.142-1.414 1.414L4.222 5.637z" />
      <path d="M4.222 18.363 18.364 4.22l1.414 1.414L5.636 19.777z" />
    </svg>
  )
}

function MenuIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path d="M2 6h20v2H2zM2 16h20v2H2z" />
    </svg>
  )
}

function Header({
  panelId,
  icon: Icon,
  expanded,
  onToggle,
  toggleRef,
  invert = false,
}: {
  panelId: string
  icon: React.ComponentType<{ className?: string }>
  expanded: boolean
  onToggle: () => void
  toggleRef: React.RefObject<HTMLButtonElement>
  invert?: boolean
}) {
  let { logoHovered, setLogoHovered } = useContext(RootLayoutContext)!

  const t = useTranslations('Contact')

  return (
    <Container>
      <div className="flex items-center justify-between">
        <Link
          href="/"
          aria-label="Home"
          onMouseEnter={() => setLogoHovered(true)}
          onMouseLeave={() => setLogoHovered(false)}
        >
          <NextCloudinaryImage
            src={
              invert
                ? 'logo_tagadart_white_a60e46ff2a'
                : 'logo_tagadart_2ef62a5f8c'
            }
            alt="Tagadart Logo"
            width={140}
            height={140}
            crop="fit"
            className="m-auto"
          />

          {/* <Logo
            className="hidden h-8 sm:block"
            invert={invert}
            filled={logoHovered}
          /> */}
        </Link>
        <div className="flex items-center gap-x-8">
          <Button href="/contact" invert={invert}>
            {t('button_contact')}
          </Button>
          <button
            ref={toggleRef}
            type="button"
            onClick={onToggle}
            aria-expanded={expanded ? 'true' : 'false'}
            aria-controls={panelId}
            className={clsx(
              'group -m-2.5 rounded-full p-2.5 transition',
              invert ? 'hover:bg-white/10' : 'hover:bg-neutral-950/10',
            )}
            aria-label="Toggle navigation"
          >
            <Icon
              className={clsx(
                'h-6 w-6',
                invert
                  ? 'fill-white group-hover:fill-neutral-200'
                  : 'fill-neutral-950 group-hover:fill-neutral-700',
              )}
            />
          </button>
        </div>
      </div>
    </Container>
  )
}

function RootLayoutInner({ children }: { children: React.ReactNode }) {
  let panelId = useId()
  let [expanded, setExpanded] = useState(false)
  let openRef = useRef<React.ElementRef<'button'>>(null)
  let closeRef = useRef<React.ElementRef<'button'>>(null)
  let navRef = useRef<React.ElementRef<'div'>>(null)
  let shouldReduceMotion = useReducedMotion()

  useEffect(() => {
    function onClick(event: MouseEvent) {
      if (
        event.target instanceof HTMLElement &&
        event.target.closest('a')?.href === window.location.href
      ) {
        setExpanded(false)
      }
    }

    window.addEventListener('click', onClick)

    return () => {
      window.removeEventListener('click', onClick)
    }
  }, [])
  const t = useTranslations('Navigation')
  return (
    <MotionConfig transition={shouldReduceMotion ? { duration: 0 } : undefined}>
      <header>
        <div
          className="absolute left-0 right-0 top-2 z-40 pt-14"
          aria-hidden={expanded ? 'true' : undefined}
          // @ts-ignore (https://github.com/facebook/react/issues/17157)
          inert={expanded ? '' : undefined}
        >
          <Header
            panelId={panelId}
            icon={MenuIcon}
            toggleRef={openRef}
            expanded={expanded}
            onToggle={() => {
              setExpanded((expanded) => !expanded)
              window.setTimeout(() =>
                closeRef.current?.focus({ preventScroll: true }),
              )
            }}
          />
        </div>

        <motion.div
          layout
          id={panelId}
          style={{ height: expanded ? 'auto' : '0.5rem' }}
          className="relative z-50 overflow-hidden bg-neutral-950 pt-2"
          aria-hidden={expanded ? undefined : 'true'}
          // @ts-ignore (https://github.com/facebook/react/issues/17157)
          inert={expanded ? undefined : ''}
        >
          <motion.div layout className="bg-neutral-800">
            <div ref={navRef} className="bg-neutral-950 pb-16 pt-14">
              <Header
                invert
                panelId={panelId}
                icon={XIcon}
                toggleRef={closeRef}
                expanded={expanded}
                onToggle={() => {
                  setExpanded((expanded) => !expanded)
                  window.setTimeout(() =>
                    openRef.current?.focus({ preventScroll: true }),
                  )
                }}
              />
            </div>
            <ErrorBoundary>
              <Navigation />
            </ErrorBoundary>
            <div className="relative bg-neutral-950 before:absolute before:inset-x-0 before:top-0 before:h-px before:bg-neutral-800">
              <Container>
                <div className="grid grid-cols-1 gap-y-10 pb-16 pt-10 sm:grid-cols-2 sm:pt-16">
                  <div className="sm:border-l sm:border-transparent sm:pl-16">
                    <h2 className="font-display text-base font-semibold text-white">
                      {t('follow_us')}
                    </h2>
                    <ErrorBoundary>
                      <SocialMedia className="mt-6" invert />
                    </ErrorBoundary>
                  </div>
                </div>
              </Container>
            </div>
          </motion.div>
        </motion.div>
      </header>

      <motion.div
        layout
        style={{ borderTopLeftRadius: 40, borderTopRightRadius: 40 }}
        className="relative flex flex-auto overflow-hidden bg-white pt-40"
      >
        <motion.div
          layout
          className="relative isolate flex w-full flex-col pt-9"
        >
          <GridPattern
            className="absolute inset-x-0 -top-14 -z-10 h-[1000px] w-full fill-neutral-50 stroke-neutral-950/5 [mask-image:linear-gradient(to_bottom_left,white_40%,transparent_50%)]"
            yOffset={-96}
            interactive
          />

          <main className="w-full flex-auto pt-20">{children}</main>
          <ErrorBoundary>
            <Footer />
          </ErrorBoundary>
        </motion.div>
      </motion.div>
    </MotionConfig>
  )
}

export function RootLayout({ children }: { children: React.ReactNode }) {
  let pathname = usePathname()
  let [logoHovered, setLogoHovered] = useState(false)

  return (
    <RootLayoutContext.Provider value={{ logoHovered, setLogoHovered }}>
      <RootLayoutInner key={pathname}>{children}</RootLayoutInner>
    </RootLayoutContext.Provider>
  )
}

================
File: src/components/ui/Section.tsx
================
import clsx from 'clsx'

type SectionProps<T extends React.ElementType> = {
  as?: T
  className?: string
  children: React.ReactNode
}

export function Section<T extends React.ElementType = 'section'>({
  as,
  className,
  children,
}: Omit<React.ComponentPropsWithoutRef<T>, keyof SectionProps<T>> &
  SectionProps<T>) {
  let Component = as ?? 'section'

  return (
    <Component className={clsx('pb-16', className)}>
      <div>{children}</div>
    </Component>
  )
}

================
File: src/components/ui/select.tsx
================
'use client'

import * as React from 'react'
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from '@radix-ui/react-icons'
import * as SelectPrimitive from '@radix-ui/react-select'

import { cn } from '@/lib/utils'

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-neutral-200 bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-white placeholder:text-neutral-500 focus:outline-none focus:ring-1 focus:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus:ring-neutral-300 [&>span]:line-clamp-1',
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-neutral-200 bg-white text-neutral-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-neutral-100 focus:text-neutral-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-neutral-800 dark:focus:text-neutral-50',
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn(
      '-mx-1 my-1 h-px bg-neutral-100 dark:bg-neutral-800',
      className,
    )}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/StatList.tsx
================
import { Border } from '@/components/ui/Border'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'

export function StatList({
  children,
  ...props
}: Omit<React.ComponentPropsWithoutRef<typeof FadeInStagger>, 'children'> & {
  children: React.ReactNode
}) {
  return (
    <FadeInStagger {...props}>
      <dl className="grid grid-cols-1 gap-10 sm:grid-cols-2 lg:auto-cols-fr lg:grid-flow-col lg:grid-cols-none">
        {children}
      </dl>
    </FadeInStagger>
  )
}

export function StatListItem({
  label,
  value,
}: {
  label: string
  value: string
}) {
  return (
    <Border as={FadeIn} position="left" className="flex flex-col-reverse pl-8">
      <dt className="mt-2 text-base text-neutral-600">{label}</dt>
      <dd className="font-display text-3xl font-semibold text-neutral-950 sm:text-4xl">
        {value}
      </dd>
    </Border>
  )
}

================
File: src/components/ui/textarea.tsx
================
import * as React from 'react'

import { cn } from '@/lib/utils'

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[60px] w-full rounded-md border border-neutral-200 bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300',
          className,
        )}
        ref={ref}
        {...props}
      />
    )
  },
)
Textarea.displayName = 'Textarea'

export { Textarea }

================
File: src/components/ui/toast.tsx
================
'use client'

import * as React from 'react'
import { Cross2Icon } from '@radix-ui/react-icons'
import * as ToastPrimitives from '@radix-ui/react-toast'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className,
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border border-neutral-200 p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full dark:border-neutral-800',
  {
    variants: {
      variant: {
        default:
          'border bg-white text-neutral-950 dark:bg-neutral-950 dark:text-neutral-50',
        success:
          'border-green-500 bg-green-500 text-neutral-50 dark:border-green-900 dark:bg-green-900 dark:text-neutral-50',
        destructive:
          'destructive group border-red-500 bg-red-500 text-neutral-50 dark:border-red-900 dark:bg-red-900 dark:text-neutral-50',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border border-neutral-200 bg-transparent px-3 text-sm font-medium transition-colors hover:bg-neutral-100 focus:outline-none focus:ring-1 focus:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-neutral-100/40 group-[.destructive]:hover:border-red-500/30 group-[.destructive]:hover:bg-red-500 group-[.destructive]:hover:text-neutral-50 group-[.destructive]:focus:ring-red-500 dark:border-neutral-800 dark:hover:bg-neutral-800 dark:focus:ring-neutral-300 dark:group-[.destructive]:border-neutral-800/40 dark:group-[.destructive]:hover:border-red-900/30 dark:group-[.destructive]:hover:bg-red-900 dark:group-[.destructive]:hover:text-neutral-50 dark:group-[.destructive]:focus:ring-red-900',
      className,
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-1 top-1 rounded-md p-1 text-neutral-950/50 opacity-0 transition-opacity hover:text-neutral-950 focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 dark:text-neutral-50/50 dark:hover:text-neutral-50',
      className,
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold [&+div]:text-xs', className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
'use client'

import { useToast } from '@/hooks/use-toast'
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast'

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/TopTip.tsx
================
import React from 'react'
import clsx from 'clsx'
import { Border } from '@/components/ui/Border'

interface TopTipProps {
  children: React.ReactNode
  className?: string
}

const TopTip: React.FC<TopTipProps> = ({ children, className }) => {
  return (
    <Border position="left" className={clsx('my-10 pl-8', className)}>
      <p className="font-display text-sm font-bold uppercase tracking-widest text-neutral-950">
        Top tip
      </p>
      <div className="mt-4">{children}</div>
    </Border>
  )
}

export default TopTip

================
File: src/hooks/use-toast.ts
================
'use client'

// Inspired by react-hot-toast library
import * as React from 'react'

import type { ToastActionElement, ToastProps } from '@/components/ui/toast'

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType['ADD_TOAST']
      toast: ToasterToast
    }
  | {
      type: ActionType['UPDATE_TOAST']
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType['DISMISS_TOAST']
      toastId?: ToasterToast['id']
    }
  | {
      type: ActionType['REMOVE_TOAST']
      toastId?: ToasterToast['id']
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      }

    case 'DISMISS_TOAST': {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      }
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, 'id'>

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  }
}

export { useToast, toast }

================
File: src/hooks/useSWRConfig.ts
================
import { SWRConfiguration } from 'swr'

export const swrConfig: SWRConfiguration = {
  revalidateOnFocus: false,
  revalidateIfStale: false,
  dedupingInterval: 600000,
  focusThrottleInterval: 5000,
  errorRetryCount: 3,
  fetcher: async (url: string) => {
    const res = await fetch(url, {
      headers: {
        'Cache-Control': 'max-age=3600, s-maxage=3600, stale-while-revalidate',
      },
    })
    if (!res.ok) {
      const error = new Error('An error occurred while fetching the data.')
      throw error
    }
    return res.json()
  },
}

================
File: src/i18n/request.ts
================
import { notFound } from 'next/navigation'
import { getRequestConfig } from 'next-intl/server'
import { routing } from './routing'

export default getRequestConfig(async ({ locale }) => {
  // Validate that the incoming `locale` parameter is valid
  if (!routing.locales.includes(locale as any)) notFound()

  return {
    messages: (await import(`../../messages/${locale}.json`)).default,
  }
})

================
File: src/i18n/routing.ts
================
import { defineRouting } from 'next-intl/routing'
import { createSharedPathnamesNavigation } from 'next-intl/navigation'

export const routing = defineRouting({
  // A list of all locales that are supported
  locales: ['fr', 'en'],
  localePrefix: 'as-needed',
  // Used when no locale matches
  defaultLocale: 'fr',
})

// Lightweight wrappers around Next.js' navigation APIs
// that will consider the routing configuration
export const { Link, redirect, usePathname, useRouter } =
  createSharedPathnamesNavigation(routing)

================
File: src/images/clients/bright-path/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="12" fill="#0A0A0A" />
  <path
    d="M11.5 10H16.5C18.7091 10 20.5 11.7909 20.5 14C20.5 14.805 20.4336 15.5545 20.2282 16.1821C19.9 17.1849 18.7594 17.5 17.7041 17.5H16.5C15.6716 17.5 15 16.8284 15 16C15 15.7239 14.7761 15.5 14.5 15.5C14.2239 15.5 14 15.7239 14 16C14 16.8284 13.3284 17.5 12.5 17.5C12.2239 17.5 12 17.7239 12 18C12 18.2761 12.2239 18.5 12.5 18.5C13.3284 18.5 14 19.1716 14 20C14 20.2761 14.2239 20.5 14.5 20.5C14.7761 20.5 15 20.2761 15 20C15 19.1716 15.6716 18.5 16.5 18.5H17.7041C18.7594 18.5 19.9 18.8151 20.2282 19.8179C20.4336 20.4455 20.5 21.195 20.5 22C20.5 24.2091 18.7091 26 16.5 26H11.5C10.3954 26 9.5 25.1046 9.5 24V12C9.5 10.8954 10.3954 10 11.5 10Z"
    fill="white" />
  <path
    d="M44.21 25V11.4H48.052C49.4347 11.4 50.517 11.7287 51.299 12.386C52.0923 13.032 52.489 13.9273 52.489 15.072C52.489 15.752 52.3077 16.3413 51.945 16.84C51.5823 17.3273 51.078 17.6673 50.432 17.86V18.115C51.1573 18.3303 51.7183 18.7157 52.115 19.271C52.5117 19.8263 52.71 20.5007 52.71 21.294C52.71 22.45 52.2963 23.3567 51.469 24.014C50.6417 24.6713 49.5027 25 48.052 25H44.21ZM45.91 23.436H48.052C49.0153 23.436 49.7463 23.2377 50.245 22.841C50.755 22.433 51.01 21.872 51.01 21.158C51.01 20.4213 50.755 19.8547 50.245 19.458C49.7463 19.0613 49.0153 18.863 48.052 18.863H45.91V23.436ZM45.91 17.384H48.052C48.9587 17.384 49.65 17.197 50.126 16.823C50.6133 16.4377 50.857 15.888 50.857 15.174C50.857 14.4713 50.619 13.9273 50.143 13.542C49.667 13.1567 48.97 12.964 48.052 12.964H45.91V17.384ZM55.2123 14.834H59.0543V15.616H59.5303C59.7457 15.2873 60.029 15.0323 60.3803 14.851C60.743 14.6697 61.1567 14.579 61.6213 14.579C62.4487 14.579 63.0947 14.8567 63.5593 15.412C64.0353 15.9673 64.2733 16.738 64.2733 17.724V19.22H62.5733V17.979C62.5733 16.7437 62.069 16.126 61.0603 16.126C60.4143 16.126 59.9327 16.4037 59.6153 16.959C59.298 17.503 59.1393 18.319 59.1393 19.407V23.47H62.4203V25H55.5523V23.47H57.5073V16.364H55.2123V14.834ZM67.6936 14.834H72.4196V23.47H75.5136V25H67.6936V23.47H70.7876V16.364H67.6936V14.834ZM71.4676 13.253C71.071 13.253 70.7593 13.1397 70.5326 12.913C70.306 12.6863 70.1926 12.369 70.1926 11.961C70.1926 11.5643 70.306 11.2583 70.5326 11.043C70.7593 10.8163 71.071 10.703 71.4676 10.703C71.8643 10.703 72.176 10.8163 72.4026 11.043C72.6293 11.2583 72.7426 11.57 72.7426 11.978C72.7426 12.3747 72.6293 12.6863 72.4026 12.913C72.176 13.1397 71.8643 13.253 71.4676 13.253ZM86.737 24.711C86.737 25.527 86.5613 26.2297 86.21 26.819C85.87 27.4083 85.377 27.8617 84.731 28.179C84.085 28.4963 83.303 28.655 82.385 28.655C81.5576 28.655 80.8266 28.5247 80.192 28.264C79.5573 28.0147 79.0586 27.6463 78.696 27.159C78.3333 26.683 78.1293 26.1163 78.084 25.459H79.648C79.8066 26.003 80.124 26.4223 80.6 26.717C81.0873 27.023 81.6823 27.176 82.385 27.176C83.2463 27.176 83.915 26.9493 84.391 26.496C84.867 26.054 85.105 25.4307 85.105 24.626V23.385H84.629C84.4023 23.7363 84.0623 24.014 83.609 24.218C83.1556 24.422 82.6683 24.524 82.147 24.524C81.3196 24.524 80.6 24.3257 79.988 23.929C79.3873 23.521 78.9226 22.9487 78.594 22.212C78.2653 21.464 78.101 20.5857 78.101 19.577C78.101 18.5457 78.2653 17.6617 78.594 16.925C78.9226 16.177 79.3873 15.599 79.988 15.191C80.6 14.783 81.3196 14.579 82.147 14.579C82.6796 14.579 83.167 14.6867 83.609 14.902C84.0623 15.1173 84.4023 15.4063 84.629 15.769H85.105V14.834H86.737V24.711ZM79.733 19.577C79.733 20.6763 79.971 21.532 80.447 22.144C80.9343 22.7447 81.6086 23.045 82.47 23.045C83.3313 23.045 84 22.7447 84.476 22.144C84.9633 21.532 85.207 20.6763 85.207 19.577C85.207 18.4777 84.9633 17.6277 84.476 17.027C84 16.415 83.3313 16.109 82.47 16.109C81.6086 16.109 80.9343 16.415 80.447 17.027C79.971 17.6277 79.733 18.4777 79.733 19.577ZM90.2933 25V10.584H91.9253V15.65H92.4013C92.6619 15.31 93.0019 15.0493 93.4213 14.868C93.8406 14.6753 94.2996 14.579 94.7983 14.579C95.5236 14.579 96.1469 14.7377 96.6683 15.055C97.1896 15.3723 97.5919 15.82 97.8753 16.398C98.1699 16.9647 98.3173 17.639 98.3173 18.421V25H96.6853V18.863C96.6853 17.979 96.4813 17.3047 96.0733 16.84C95.6653 16.3753 95.0759 16.143 94.3053 16.143C93.5346 16.143 92.9453 16.3753 92.5373 16.84C92.1293 17.3047 91.9253 17.979 91.9253 18.863V25H90.2933ZM105.172 12.25V14.834H109.813V16.364H105.172V21.719C105.172 22.3763 105.308 22.875 105.58 23.215C105.852 23.555 106.248 23.725 106.77 23.725C107.314 23.725 107.739 23.5437 108.045 23.181C108.351 22.807 108.56 22.246 108.674 21.498H110.136C110.079 22.722 109.756 23.657 109.167 24.303C108.577 24.9377 107.756 25.255 106.702 25.255C105.693 25.255 104.911 24.9547 104.356 24.354C103.812 23.742 103.54 22.8807 103.54 21.77V16.364H101.228V14.834H103.54V12.25H105.172ZM112.689 25V11.4H118.027C119.002 11.4 119.846 11.5813 120.56 11.944C121.274 12.2953 121.829 12.794 122.226 13.44C122.623 14.086 122.821 14.8567 122.821 15.752C122.821 16.602 122.623 17.3443 122.226 17.979C121.829 18.6023 121.274 19.084 120.56 19.424C119.846 19.764 119.002 19.934 118.027 19.934H115.885V25H112.689ZM115.885 17.061H118.027C118.537 17.061 118.928 16.9477 119.2 16.721C119.483 16.4943 119.625 16.1657 119.625 15.735C119.625 15.3157 119.483 14.9927 119.2 14.766C118.928 14.528 118.537 14.409 118.027 14.409H115.885V17.061ZM130.627 18.319V20.495L128.315 20.852C128.009 20.8973 127.76 21.0107 127.567 21.192C127.375 21.362 127.278 21.583 127.278 21.855C127.278 22.1497 127.369 22.382 127.55 22.552C127.743 22.7107 128.026 22.79 128.4 22.79C128.797 22.79 129.148 22.7107 129.454 22.552C129.76 22.3933 130.004 22.1837 130.185 21.923C130.367 21.651 130.457 21.3507 130.457 21.022V18.37C130.457 17.8147 130.321 17.401 130.049 17.129C129.777 16.857 129.352 16.721 128.774 16.721C128.389 16.721 128.049 16.7833 127.754 16.908C127.471 17.0327 127.239 17.214 127.057 17.452C126.876 17.69 126.757 17.979 126.7 18.319H123.759C123.839 17.4463 124.094 16.6983 124.524 16.075C124.955 15.4403 125.533 14.9587 126.258 14.63C126.984 14.29 127.822 14.12 128.774 14.12C130.293 14.12 131.449 14.4657 132.242 15.157C133.036 15.837 133.432 16.8287 133.432 18.132V25H130.457V23.929H129.777C129.596 24.3597 129.318 24.6883 128.944 24.915C128.582 25.1417 128.1 25.255 127.499 25.255C126.853 25.255 126.281 25.1247 125.782 24.864C125.295 24.6033 124.91 24.2407 124.626 23.776C124.354 23.3113 124.218 22.7787 124.218 22.178C124.218 21.2373 124.507 20.478 125.085 19.9C125.675 19.322 126.513 18.948 127.601 18.778L130.627 18.319ZM140.525 11.74V14.46H145.098V17.146H140.525V21.26C140.525 21.7247 140.598 22.076 140.746 22.314C140.904 22.5407 141.142 22.654 141.46 22.654C141.788 22.654 142.049 22.5067 142.242 22.212C142.446 21.9173 142.616 21.43 142.752 20.75H145.455C145.387 22.2347 145.001 23.3737 144.299 24.167C143.607 24.949 142.638 25.34 141.392 25.34C140.122 25.34 139.148 24.9887 138.468 24.286C137.799 23.5833 137.465 22.5747 137.465 21.26V17.146H135.612V14.46H137.465V11.74H140.525ZM147.43 25V10.584H150.49V15.48H151.17C151.385 15.0493 151.697 14.715 152.105 14.477C152.513 14.239 152.995 14.12 153.55 14.12C154.23 14.12 154.808 14.2843 155.284 14.613C155.76 14.9417 156.123 15.4233 156.372 16.058C156.621 16.6927 156.746 17.4633 156.746 18.37V25H153.686V19.101C153.686 18.387 153.55 17.8543 153.278 17.503C153.017 17.1403 152.621 16.959 152.088 16.959C151.555 16.959 151.153 17.1403 150.881 17.503C150.62 17.8543 150.49 18.387 150.49 19.101V25H147.43Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/bright-path/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="12" fill="white" />
  <path
    d="M11.5 10H16.5C18.7091 10 20.5 11.7909 20.5 14C20.5 14.805 20.4336 15.5545 20.2282 16.1821C19.9 17.1849 18.7594 17.5 17.7041 17.5H16.5C15.6716 17.5 15 16.8284 15 16C15 15.7239 14.7761 15.5 14.5 15.5C14.2239 15.5 14 15.7239 14 16C14 16.8284 13.3284 17.5 12.5 17.5C12.2239 17.5 12 17.7239 12 18C12 18.2761 12.2239 18.5 12.5 18.5C13.3284 18.5 14 19.1716 14 20C14 20.2761 14.2239 20.5 14.5 20.5C14.7761 20.5 15 20.2761 15 20C15 19.1716 15.6716 18.5 16.5 18.5H17.7041C18.7594 18.5 19.9 18.8151 20.2282 19.8179C20.4336 20.4455 20.5 21.195 20.5 22C20.5 24.2091 18.7091 26 16.5 26H11.5C10.3954 26 9.5 25.1046 9.5 24V12C9.5 10.8954 10.3954 10 11.5 10Z"
    fill="#0A0A0A" />
  <path
    d="M44.21 25V11.4H48.052C49.4347 11.4 50.517 11.7287 51.299 12.386C52.0923 13.032 52.489 13.9273 52.489 15.072C52.489 15.752 52.3077 16.3413 51.945 16.84C51.5823 17.3273 51.078 17.6673 50.432 17.86V18.115C51.1573 18.3303 51.7183 18.7157 52.115 19.271C52.5117 19.8263 52.71 20.5007 52.71 21.294C52.71 22.45 52.2963 23.3567 51.469 24.014C50.6417 24.6713 49.5027 25 48.052 25H44.21ZM45.91 23.436H48.052C49.0153 23.436 49.7463 23.2377 50.245 22.841C50.755 22.433 51.01 21.872 51.01 21.158C51.01 20.4213 50.755 19.8547 50.245 19.458C49.7463 19.0613 49.0153 18.863 48.052 18.863H45.91V23.436ZM45.91 17.384H48.052C48.9587 17.384 49.65 17.197 50.126 16.823C50.6133 16.4377 50.857 15.888 50.857 15.174C50.857 14.4713 50.619 13.9273 50.143 13.542C49.667 13.1567 48.97 12.964 48.052 12.964H45.91V17.384ZM55.2123 14.834H59.0543V15.616H59.5303C59.7457 15.2873 60.029 15.0323 60.3803 14.851C60.743 14.6697 61.1567 14.579 61.6213 14.579C62.4487 14.579 63.0947 14.8567 63.5593 15.412C64.0353 15.9673 64.2733 16.738 64.2733 17.724V19.22H62.5733V17.979C62.5733 16.7437 62.069 16.126 61.0603 16.126C60.4143 16.126 59.9327 16.4037 59.6153 16.959C59.298 17.503 59.1393 18.319 59.1393 19.407V23.47H62.4203V25H55.5523V23.47H57.5073V16.364H55.2123V14.834ZM67.6936 14.834H72.4196V23.47H75.5136V25H67.6936V23.47H70.7876V16.364H67.6936V14.834ZM71.4676 13.253C71.071 13.253 70.7593 13.1397 70.5326 12.913C70.306 12.6863 70.1926 12.369 70.1926 11.961C70.1926 11.5643 70.306 11.2583 70.5326 11.043C70.7593 10.8163 71.071 10.703 71.4676 10.703C71.8643 10.703 72.176 10.8163 72.4026 11.043C72.6293 11.2583 72.7426 11.57 72.7426 11.978C72.7426 12.3747 72.6293 12.6863 72.4026 12.913C72.176 13.1397 71.8643 13.253 71.4676 13.253ZM86.737 24.711C86.737 25.527 86.5613 26.2297 86.21 26.819C85.87 27.4083 85.377 27.8617 84.731 28.179C84.085 28.4963 83.303 28.655 82.385 28.655C81.5576 28.655 80.8266 28.5247 80.192 28.264C79.5573 28.0147 79.0586 27.6463 78.696 27.159C78.3333 26.683 78.1293 26.1163 78.084 25.459H79.648C79.8066 26.003 80.124 26.4223 80.6 26.717C81.0873 27.023 81.6823 27.176 82.385 27.176C83.2463 27.176 83.915 26.9493 84.391 26.496C84.867 26.054 85.105 25.4307 85.105 24.626V23.385H84.629C84.4023 23.7363 84.0623 24.014 83.609 24.218C83.1556 24.422 82.6683 24.524 82.147 24.524C81.3196 24.524 80.6 24.3257 79.988 23.929C79.3873 23.521 78.9226 22.9487 78.594 22.212C78.2653 21.464 78.101 20.5857 78.101 19.577C78.101 18.5457 78.2653 17.6617 78.594 16.925C78.9226 16.177 79.3873 15.599 79.988 15.191C80.6 14.783 81.3196 14.579 82.147 14.579C82.6796 14.579 83.167 14.6867 83.609 14.902C84.0623 15.1173 84.4023 15.4063 84.629 15.769H85.105V14.834H86.737V24.711ZM79.733 19.577C79.733 20.6763 79.971 21.532 80.447 22.144C80.9343 22.7447 81.6086 23.045 82.47 23.045C83.3313 23.045 84 22.7447 84.476 22.144C84.9633 21.532 85.207 20.6763 85.207 19.577C85.207 18.4777 84.9633 17.6277 84.476 17.027C84 16.415 83.3313 16.109 82.47 16.109C81.6086 16.109 80.9343 16.415 80.447 17.027C79.971 17.6277 79.733 18.4777 79.733 19.577ZM90.2933 25V10.584H91.9253V15.65H92.4013C92.6619 15.31 93.0019 15.0493 93.4213 14.868C93.8406 14.6753 94.2996 14.579 94.7983 14.579C95.5236 14.579 96.1469 14.7377 96.6683 15.055C97.1896 15.3723 97.5919 15.82 97.8753 16.398C98.1699 16.9647 98.3173 17.639 98.3173 18.421V25H96.6853V18.863C96.6853 17.979 96.4813 17.3047 96.0733 16.84C95.6653 16.3753 95.0759 16.143 94.3053 16.143C93.5346 16.143 92.9453 16.3753 92.5373 16.84C92.1293 17.3047 91.9253 17.979 91.9253 18.863V25H90.2933ZM105.172 12.25V14.834H109.813V16.364H105.172V21.719C105.172 22.3763 105.308 22.875 105.58 23.215C105.852 23.555 106.248 23.725 106.77 23.725C107.314 23.725 107.739 23.5437 108.045 23.181C108.351 22.807 108.56 22.246 108.674 21.498H110.136C110.079 22.722 109.756 23.657 109.167 24.303C108.577 24.9377 107.756 25.255 106.702 25.255C105.693 25.255 104.911 24.9547 104.356 24.354C103.812 23.742 103.54 22.8807 103.54 21.77V16.364H101.228V14.834H103.54V12.25H105.172ZM112.689 25V11.4H118.027C119.002 11.4 119.846 11.5813 120.56 11.944C121.274 12.2953 121.829 12.794 122.226 13.44C122.623 14.086 122.821 14.8567 122.821 15.752C122.821 16.602 122.623 17.3443 122.226 17.979C121.829 18.6023 121.274 19.084 120.56 19.424C119.846 19.764 119.002 19.934 118.027 19.934H115.885V25H112.689ZM115.885 17.061H118.027C118.537 17.061 118.928 16.9477 119.2 16.721C119.483 16.4943 119.625 16.1657 119.625 15.735C119.625 15.3157 119.483 14.9927 119.2 14.766C118.928 14.528 118.537 14.409 118.027 14.409H115.885V17.061ZM130.627 18.319V20.495L128.315 20.852C128.009 20.8973 127.76 21.0107 127.567 21.192C127.375 21.362 127.278 21.583 127.278 21.855C127.278 22.1497 127.369 22.382 127.55 22.552C127.743 22.7107 128.026 22.79 128.4 22.79C128.797 22.79 129.148 22.7107 129.454 22.552C129.76 22.3933 130.004 22.1837 130.185 21.923C130.367 21.651 130.457 21.3507 130.457 21.022V18.37C130.457 17.8147 130.321 17.401 130.049 17.129C129.777 16.857 129.352 16.721 128.774 16.721C128.389 16.721 128.049 16.7833 127.754 16.908C127.471 17.0327 127.239 17.214 127.057 17.452C126.876 17.69 126.757 17.979 126.7 18.319H123.759C123.839 17.4463 124.094 16.6983 124.524 16.075C124.955 15.4403 125.533 14.9587 126.258 14.63C126.984 14.29 127.822 14.12 128.774 14.12C130.293 14.12 131.449 14.4657 132.242 15.157C133.036 15.837 133.432 16.8287 133.432 18.132V25H130.457V23.929H129.777C129.596 24.3597 129.318 24.6883 128.944 24.915C128.582 25.1417 128.1 25.255 127.499 25.255C126.853 25.255 126.281 25.1247 125.782 24.864C125.295 24.6033 124.91 24.2407 124.626 23.776C124.354 23.3113 124.218 22.7787 124.218 22.178C124.218 21.2373 124.507 20.478 125.085 19.9C125.675 19.322 126.513 18.948 127.601 18.778L130.627 18.319ZM140.525 11.74V14.46H145.098V17.146H140.525V21.26C140.525 21.7247 140.598 22.076 140.746 22.314C140.904 22.5407 141.142 22.654 141.46 22.654C141.788 22.654 142.049 22.5067 142.242 22.212C142.446 21.9173 142.616 21.43 142.752 20.75H145.455C145.387 22.2347 145.001 23.3737 144.299 24.167C143.607 24.949 142.638 25.34 141.392 25.34C140.122 25.34 139.148 24.9887 138.468 24.286C137.799 23.5833 137.465 22.5747 137.465 21.26V17.146H135.612V14.46H137.465V11.74H140.525ZM147.43 25V10.584H150.49V15.48H151.17C151.385 15.0493 151.697 14.715 152.105 14.477C152.513 14.239 152.995 14.12 153.55 14.12C154.23 14.12 154.808 14.2843 155.284 14.613C155.76 14.9417 156.123 15.4233 156.372 16.058C156.621 16.6927 156.746 17.4633 156.746 18.37V25H153.686V19.101C153.686 18.387 153.55 17.8543 153.278 17.503C153.017 17.1403 152.621 16.959 152.088 16.959C151.555 16.959 151.153 17.1403 150.881 17.503C150.62 17.8543 150.49 18.387 150.49 19.101V25H147.43Z"
    fill="white" />
</svg>

================
File: src/images/clients/bright-path/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="12" fill="#0A0A0A" />
  <path
    d="M11.5 10H16.5C18.7091 10 20.5 11.7909 20.5 14C20.5 14.805 20.4336 15.5545 20.2282 16.1821C19.9 17.1849 18.7594 17.5 17.7041 17.5H16.5C15.6716 17.5 15 16.8284 15 16C15 15.7239 14.7761 15.5 14.5 15.5C14.2239 15.5 14 15.7239 14 16C14 16.8284 13.3284 17.5 12.5 17.5C12.2239 17.5 12 17.7239 12 18C12 18.2761 12.2239 18.5 12.5 18.5C13.3284 18.5 14 19.1716 14 20C14 20.2761 14.2239 20.5 14.5 20.5C14.7761 20.5 15 20.2761 15 20C15 19.1716 15.6716 18.5 16.5 18.5H17.7041C18.7594 18.5 19.9 18.8151 20.2282 19.8179C20.4336 20.4455 20.5 21.195 20.5 22C20.5 24.2091 18.7091 26 16.5 26H11.5C10.3954 26 9.5 25.1046 9.5 24V12C9.5 10.8954 10.3954 10 11.5 10Z"
    fill="white" />
</svg>

================
File: src/images/clients/bright-path/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="12" fill="white" />
  <path
    d="M11.5 10H16.5C18.7091 10 20.5 11.7909 20.5 14C20.5 14.805 20.4336 15.5545 20.2282 16.1821C19.9 17.1849 18.7594 17.5 17.7041 17.5H16.5C15.6716 17.5 15 16.8284 15 16C15 15.7239 14.7761 15.5 14.5 15.5C14.2239 15.5 14 15.7239 14 16C14 16.8284 13.3284 17.5 12.5 17.5C12.2239 17.5 12 17.7239 12 18C12 18.2761 12.2239 18.5 12.5 18.5C13.3284 18.5 14 19.1716 14 20C14 20.2761 14.2239 20.5 14.5 20.5C14.7761 20.5 15 20.2761 15 20C15 19.1716 15.6716 18.5 16.5 18.5H17.7041C18.7594 18.5 19.9 18.8151 20.2282 19.8179C20.4336 20.4455 20.5 21.195 20.5 22C20.5 24.2091 18.7091 26 16.5 26H11.5C10.3954 26 9.5 25.1046 9.5 24V12C9.5 10.8954 10.3954 10 11.5 10Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/family-fund/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="#0A0A0A" />
  <path d="M8.5 10H19.5L21.5 12L19.5 14H8.5V10Z" fill="white" />
  <path d="M8.5 16H15.5L17.5 18L15.5 20H8.5V16Z" fill="white" />
  <rect x="8.5" y="22" width="4" height="4" fill="white" />
  <path
    d="M43.3629 25V11.1818H52.2152V13.2802H45.8661V17.0316H51.608V19.13H45.8661V25H43.3629ZM56.8973 25.2092C56.2405 25.2092 55.649 25.0922 55.1228 24.8583C54.601 24.6199 54.1871 24.2691 53.8813 23.8058C53.5799 23.3424 53.4292 22.7712 53.4292 22.092C53.4292 21.5072 53.5372 21.0237 53.7531 20.6413C53.969 20.259 54.2636 19.9531 54.637 19.7237C55.0103 19.4943 55.4309 19.3211 55.8987 19.2042C56.371 19.0827 56.859 18.995 57.3628 18.9411C57.9701 18.8781 58.4626 18.8219 58.8404 18.7724C59.2183 18.7184 59.4927 18.6374 59.6636 18.5295C59.839 18.417 59.9267 18.2438 59.9267 18.0099V17.9695C59.9267 17.4612 59.776 17.0676 59.4747 16.7887C59.1733 16.5098 58.7392 16.3704 58.1725 16.3704C57.5742 16.3704 57.0997 16.5008 56.7488 16.7617C56.4025 17.0226 56.1686 17.3307 56.0471 17.6861L53.7666 17.3622C53.9465 16.7325 54.2434 16.2062 54.6572 15.7834C55.071 15.3561 55.5771 15.0367 56.1753 14.8253C56.7736 14.6094 57.4348 14.5014 58.159 14.5014C58.6583 14.5014 59.1553 14.5599 59.6501 14.6768C60.1449 14.7938 60.5969 14.9872 61.0063 15.2571C61.4156 15.5225 61.744 15.8846 61.9914 16.3434C62.2433 16.8022 62.3692 17.3757 62.3692 18.0639V25H60.0212V23.5763H59.9402C59.7918 23.8642 59.5826 24.1341 59.3127 24.386C59.0473 24.6334 58.7122 24.8336 58.3074 24.9865C57.9071 25.1349 57.437 25.2092 56.8973 25.2092ZM57.5315 23.4144C58.0218 23.4144 58.4469 23.3177 58.8067 23.1243C59.1665 22.9264 59.4432 22.6655 59.6366 22.3416C59.8345 22.0178 59.9335 21.6647 59.9335 21.2823V20.0611C59.857 20.1241 59.7266 20.1825 59.5421 20.2365C59.3622 20.2905 59.1598 20.3377 58.9349 20.3782C58.71 20.4187 58.4873 20.4547 58.2669 20.4862C58.0465 20.5176 57.8554 20.5446 57.6934 20.5671C57.3291 20.6166 57.003 20.6976 56.7151 20.81C56.4272 20.9225 56.2 21.0799 56.0336 21.2823C55.8672 21.4802 55.784 21.7366 55.784 22.0515C55.784 22.5013 55.9482 22.8409 56.2765 23.0703C56.6049 23.2997 57.0232 23.4144 57.5315 23.4144ZM64.4452 25V14.6364H66.7797V16.3974H66.9011C67.117 15.8036 67.4746 15.3403 67.9739 15.0075C68.4732 14.6701 69.0692 14.5014 69.7619 14.5014C70.4636 14.5014 71.0551 14.6723 71.5364 15.0142C72.0222 15.3516 72.3641 15.8126 72.562 16.3974H72.67C72.8994 15.8216 73.2862 15.3628 73.8305 15.021C74.3792 14.6746 75.0292 14.5014 75.7804 14.5014C76.734 14.5014 77.5122 14.8028 78.1149 15.4055C78.7177 16.0083 79.019 16.8877 79.019 18.0437V25H76.5698V18.4215C76.5698 17.7783 76.3989 17.3082 76.057 17.0114C75.7152 16.71 75.2968 16.5593 74.8021 16.5593C74.2128 16.5593 73.7517 16.7437 73.4189 17.1126C73.0905 17.4769 72.9263 17.9515 72.9263 18.5362V25H70.5311V18.3203C70.5311 17.785 70.3692 17.3577 70.0453 17.0384C69.7259 16.719 69.3076 16.5593 68.7903 16.5593C68.4395 16.5593 68.1201 16.6493 67.8322 16.8292C67.5444 17.0046 67.315 17.2543 67.144 17.5781C66.9731 17.8975 66.8876 18.2708 66.8876 18.6982V25H64.4452ZM81.1169 25V14.6364H83.5594V25H81.1169ZM82.3449 13.1655C81.9581 13.1655 81.6252 13.0373 81.3463 12.7809C81.0674 12.52 80.928 12.2074 80.928 11.843C80.928 11.4742 81.0674 11.1616 81.3463 10.9052C81.6252 10.6443 81.9581 10.5138 82.3449 10.5138C82.7362 10.5138 83.0691 10.6443 83.3435 10.9052C83.6224 11.1616 83.7618 11.4742 83.7618 11.843C83.7618 12.2074 83.6224 12.52 83.3435 12.7809C83.0691 13.0373 82.7362 13.1655 82.3449 13.1655ZM88.1335 11.1818V25H85.691V11.1818H88.1335ZM91.7832 28.8864C91.4504 28.8864 91.1423 28.8594 90.8589 28.8054C90.58 28.7559 90.3573 28.6974 90.1909 28.63L90.7577 26.7273C91.113 26.8307 91.4301 26.8802 91.709 26.8757C91.9879 26.8712 92.233 26.7835 92.4445 26.6126C92.6604 26.4461 92.8425 26.1673 92.991 25.7759L93.2001 25.2159L89.442 14.6364H92.0329L94.4214 22.4631H94.5293L96.9246 14.6364H99.5222L95.3727 26.255C95.1793 26.8037 94.9229 27.2738 94.6035 27.6651C94.2842 28.061 93.8928 28.3623 93.4295 28.5692C92.9707 28.7807 92.422 28.8864 91.7832 28.8864ZM103.937 25L106.231 11.1818H115.947L115.434 14.2045H109.47L109.092 16.5795H114.463L113.95 19.6023H108.579L107.689 25H103.937ZM121.533 20.4659L122.505 14.6364H126.229L124.502 25H120.967L121.291 23.0298H121.183C120.863 23.6911 120.386 24.2083 119.752 24.5817C119.122 24.9505 118.421 25.1349 117.647 25.1349C116.923 25.1349 116.318 24.9685 115.832 24.6357C115.346 24.3028 115.002 23.844 114.8 23.2592C114.597 22.6745 114.557 22.0043 114.678 21.2486L115.785 14.6364H119.509L118.538 20.4659C118.461 20.9787 118.526 21.3813 118.733 21.6737C118.945 21.966 119.284 22.1122 119.752 22.1122C120.063 22.1122 120.341 22.047 120.589 21.9165C120.841 21.7816 121.048 21.5927 121.21 21.3498C121.376 21.1024 121.484 20.8078 121.533 20.4659ZM130.739 19.1705L129.768 25H126.043L127.771 14.6364H131.306L130.982 16.6065H131.09C131.419 15.9453 131.898 15.4303 132.527 15.0614C133.162 14.6881 133.861 14.5014 134.626 14.5014C135.359 14.5014 135.968 14.6679 136.454 15.0007C136.94 15.3336 137.284 15.7924 137.487 16.3771C137.689 16.9619 137.725 17.6321 137.595 18.3878L136.488 25H132.764L133.735 19.1705C133.821 18.6577 133.758 18.2551 133.546 17.9627C133.339 17.6703 132.997 17.5241 132.521 17.5241C132.219 17.5241 131.943 17.5916 131.691 17.7266C131.443 17.857 131.236 18.0459 131.07 18.2933C130.908 18.5362 130.798 18.8286 130.739 19.1705ZM141.658 25.1349C140.92 25.1349 140.272 24.9415 139.714 24.5547C139.161 24.1679 138.763 23.5808 138.52 22.7937C138.282 22.0065 138.261 21.0147 138.459 19.8182C138.666 18.5677 139.028 17.5511 139.546 16.7685C140.067 15.9858 140.666 15.4123 141.34 15.0479C142.02 14.6836 142.701 14.5014 143.385 14.5014C143.898 14.5014 144.332 14.5914 144.687 14.7713C145.047 14.9467 145.333 15.1829 145.544 15.4798C145.755 15.7721 145.899 16.0937 145.976 16.4446H146.03L146.907 11.1818H150.631L148.337 25H144.64L144.923 23.2997H144.842C144.64 23.6506 144.381 23.9654 144.066 24.2443C143.756 24.5187 143.398 24.7369 142.993 24.8988C142.589 25.0562 142.143 25.1349 141.658 25.1349ZM143.506 22.2741C143.848 22.2741 144.159 22.1752 144.437 21.9773C144.716 21.7749 144.952 21.4915 145.146 21.1271C145.339 20.7583 145.476 20.322 145.557 19.8182C145.643 19.3054 145.65 18.8668 145.578 18.5025C145.506 18.1336 145.362 17.8525 145.146 17.6591C144.934 17.4612 144.658 17.3622 144.316 17.3622C143.974 17.3622 143.666 17.4612 143.392 17.6591C143.117 17.8525 142.886 18.1336 142.697 18.5025C142.512 18.8668 142.377 19.3054 142.292 19.8182C142.206 20.331 142.195 20.7718 142.258 21.1406C142.326 21.505 142.465 21.7861 142.676 21.984C142.888 22.1774 143.164 22.2741 143.506 22.2741Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/family-fund/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="white" />
  <path d="M8.5 10H19.5L21.5 12L19.5 14H8.5V10Z" fill="#0A0A0A" />
  <path d="M8.5 16H15.5L17.5 18L15.5 20H8.5V16Z" fill="#0A0A0A" />
  <rect x="8.5" y="22" width="4" height="4" fill="#0A0A0A" />
  <path
    d="M43.3629 25V11.1818H52.2152V13.2802H45.8661V17.0316H51.608V19.13H45.8661V25H43.3629ZM56.8973 25.2092C56.2405 25.2092 55.649 25.0922 55.1228 24.8583C54.601 24.6199 54.1871 24.2691 53.8813 23.8058C53.5799 23.3424 53.4292 22.7712 53.4292 22.092C53.4292 21.5072 53.5372 21.0237 53.7531 20.6413C53.969 20.259 54.2636 19.9531 54.637 19.7237C55.0103 19.4943 55.4309 19.3211 55.8987 19.2042C56.371 19.0827 56.859 18.995 57.3628 18.9411C57.9701 18.8781 58.4626 18.8219 58.8404 18.7724C59.2183 18.7184 59.4927 18.6374 59.6636 18.5295C59.839 18.417 59.9267 18.2438 59.9267 18.0099V17.9695C59.9267 17.4612 59.776 17.0676 59.4747 16.7887C59.1733 16.5098 58.7392 16.3704 58.1725 16.3704C57.5742 16.3704 57.0997 16.5008 56.7488 16.7617C56.4025 17.0226 56.1686 17.3307 56.0471 17.6861L53.7666 17.3622C53.9465 16.7325 54.2434 16.2062 54.6572 15.7834C55.071 15.3561 55.5771 15.0367 56.1753 14.8253C56.7736 14.6094 57.4348 14.5014 58.159 14.5014C58.6583 14.5014 59.1553 14.5599 59.6501 14.6768C60.1449 14.7938 60.5969 14.9872 61.0063 15.2571C61.4156 15.5225 61.744 15.8846 61.9914 16.3434C62.2433 16.8022 62.3692 17.3757 62.3692 18.0639V25H60.0212V23.5763H59.9402C59.7918 23.8642 59.5826 24.1341 59.3127 24.386C59.0473 24.6334 58.7122 24.8336 58.3074 24.9865C57.9071 25.1349 57.437 25.2092 56.8973 25.2092ZM57.5315 23.4144C58.0218 23.4144 58.4469 23.3177 58.8067 23.1243C59.1665 22.9264 59.4432 22.6655 59.6366 22.3416C59.8345 22.0178 59.9335 21.6647 59.9335 21.2823V20.0611C59.857 20.1241 59.7266 20.1825 59.5421 20.2365C59.3622 20.2905 59.1598 20.3377 58.9349 20.3782C58.71 20.4187 58.4873 20.4547 58.2669 20.4862C58.0465 20.5176 57.8554 20.5446 57.6934 20.5671C57.3291 20.6166 57.003 20.6976 56.7151 20.81C56.4272 20.9225 56.2 21.0799 56.0336 21.2823C55.8672 21.4802 55.784 21.7366 55.784 22.0515C55.784 22.5013 55.9482 22.8409 56.2765 23.0703C56.6049 23.2997 57.0232 23.4144 57.5315 23.4144ZM64.4452 25V14.6364H66.7797V16.3974H66.9011C67.117 15.8036 67.4746 15.3403 67.9739 15.0075C68.4732 14.6701 69.0692 14.5014 69.7619 14.5014C70.4636 14.5014 71.0551 14.6723 71.5364 15.0142C72.0222 15.3516 72.3641 15.8126 72.562 16.3974H72.67C72.8994 15.8216 73.2862 15.3628 73.8305 15.021C74.3792 14.6746 75.0292 14.5014 75.7804 14.5014C76.734 14.5014 77.5122 14.8028 78.1149 15.4055C78.7177 16.0083 79.019 16.8877 79.019 18.0437V25H76.5698V18.4215C76.5698 17.7783 76.3989 17.3082 76.057 17.0114C75.7152 16.71 75.2968 16.5593 74.8021 16.5593C74.2128 16.5593 73.7517 16.7437 73.4189 17.1126C73.0905 17.4769 72.9263 17.9515 72.9263 18.5362V25H70.5311V18.3203C70.5311 17.785 70.3692 17.3577 70.0453 17.0384C69.7259 16.719 69.3076 16.5593 68.7903 16.5593C68.4395 16.5593 68.1201 16.6493 67.8322 16.8292C67.5444 17.0046 67.315 17.2543 67.144 17.5781C66.9731 17.8975 66.8876 18.2708 66.8876 18.6982V25H64.4452ZM81.1169 25V14.6364H83.5594V25H81.1169ZM82.3449 13.1655C81.9581 13.1655 81.6252 13.0373 81.3463 12.7809C81.0674 12.52 80.928 12.2074 80.928 11.843C80.928 11.4742 81.0674 11.1616 81.3463 10.9052C81.6252 10.6443 81.9581 10.5138 82.3449 10.5138C82.7362 10.5138 83.0691 10.6443 83.3435 10.9052C83.6224 11.1616 83.7618 11.4742 83.7618 11.843C83.7618 12.2074 83.6224 12.52 83.3435 12.7809C83.0691 13.0373 82.7362 13.1655 82.3449 13.1655ZM88.1335 11.1818V25H85.691V11.1818H88.1335ZM91.7832 28.8864C91.4504 28.8864 91.1423 28.8594 90.8589 28.8054C90.58 28.7559 90.3573 28.6974 90.1909 28.63L90.7577 26.7273C91.113 26.8307 91.4301 26.8802 91.709 26.8757C91.9879 26.8712 92.233 26.7835 92.4445 26.6126C92.6604 26.4461 92.8425 26.1673 92.991 25.7759L93.2001 25.2159L89.442 14.6364H92.0329L94.4214 22.4631H94.5293L96.9246 14.6364H99.5222L95.3727 26.255C95.1793 26.8037 94.9229 27.2738 94.6035 27.6651C94.2842 28.061 93.8928 28.3623 93.4295 28.5692C92.9707 28.7807 92.422 28.8864 91.7832 28.8864ZM103.937 25L106.231 11.1818H115.947L115.434 14.2045H109.47L109.092 16.5795H114.463L113.95 19.6023H108.579L107.689 25H103.937ZM121.533 20.4659L122.505 14.6364H126.229L124.502 25H120.967L121.291 23.0298H121.183C120.863 23.6911 120.386 24.2083 119.752 24.5817C119.122 24.9505 118.421 25.1349 117.647 25.1349C116.923 25.1349 116.318 24.9685 115.832 24.6357C115.346 24.3028 115.002 23.844 114.8 23.2592C114.597 22.6745 114.557 22.0043 114.678 21.2486L115.785 14.6364H119.509L118.538 20.4659C118.461 20.9787 118.526 21.3813 118.733 21.6737C118.945 21.966 119.284 22.1122 119.752 22.1122C120.063 22.1122 120.341 22.047 120.589 21.9165C120.841 21.7816 121.048 21.5927 121.21 21.3498C121.376 21.1024 121.484 20.8078 121.533 20.4659ZM130.739 19.1705L129.768 25H126.043L127.771 14.6364H131.306L130.982 16.6065H131.09C131.419 15.9453 131.898 15.4303 132.527 15.0614C133.162 14.6881 133.861 14.5014 134.626 14.5014C135.359 14.5014 135.968 14.6679 136.454 15.0007C136.94 15.3336 137.284 15.7924 137.487 16.3771C137.689 16.9619 137.725 17.6321 137.595 18.3878L136.488 25H132.764L133.735 19.1705C133.821 18.6577 133.758 18.2551 133.546 17.9627C133.339 17.6703 132.997 17.5241 132.521 17.5241C132.219 17.5241 131.943 17.5916 131.691 17.7266C131.443 17.857 131.236 18.0459 131.07 18.2933C130.908 18.5362 130.798 18.8286 130.739 19.1705ZM141.658 25.1349C140.92 25.1349 140.272 24.9415 139.714 24.5547C139.161 24.1679 138.763 23.5808 138.52 22.7937C138.282 22.0065 138.261 21.0147 138.459 19.8182C138.666 18.5677 139.028 17.5511 139.546 16.7685C140.067 15.9858 140.666 15.4123 141.34 15.0479C142.02 14.6836 142.701 14.5014 143.385 14.5014C143.898 14.5014 144.332 14.5914 144.687 14.7713C145.047 14.9467 145.333 15.1829 145.544 15.4798C145.755 15.7721 145.899 16.0937 145.976 16.4446H146.03L146.907 11.1818H150.631L148.337 25H144.64L144.923 23.2997H144.842C144.64 23.6506 144.381 23.9654 144.066 24.2443C143.756 24.5187 143.398 24.7369 142.993 24.8988C142.589 25.0562 142.143 25.1349 141.658 25.1349ZM143.506 22.2741C143.848 22.2741 144.159 22.1752 144.437 21.9773C144.716 21.7749 144.952 21.4915 145.146 21.1271C145.339 20.7583 145.476 20.322 145.557 19.8182C145.643 19.3054 145.65 18.8668 145.578 18.5025C145.506 18.1336 145.362 17.8525 145.146 17.6591C144.934 17.4612 144.658 17.3622 144.316 17.3622C143.974 17.3622 143.666 17.4612 143.392 17.6591C143.117 17.8525 142.886 18.1336 142.697 18.5025C142.512 18.8668 142.377 19.3054 142.292 19.8182C142.206 20.331 142.195 20.7718 142.258 21.1406C142.326 21.505 142.465 21.7861 142.676 21.984C142.888 22.1774 143.164 22.2741 143.506 22.2741Z"
    fill="white" />
</svg>

================
File: src/images/clients/family-fund/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="#0A0A0A" />
  <path d="M8.5 10H19.5L21.5 12L19.5 14H8.5V10Z" fill="white" />
  <path d="M8.5 16H15.5L17.5 18L15.5 20H8.5V16Z" fill="white" />
  <rect x="8.5" y="22" width="4" height="4" fill="white" />
</svg>

================
File: src/images/clients/family-fund/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="white" />
  <path d="M8.5 10H19.5L21.5 12L19.5 14H8.5V10Z" fill="#0A0A0A" />
  <path d="M8.5 16H15.5L17.5 18L15.5 20H8.5V16Z" fill="#0A0A0A" />
  <rect x="8.5" y="22" width="4" height="4" fill="#0A0A0A" />
</svg>

================
File: src/images/clients/green-life/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="#0A0A0A" />
  <path
    d="M15 15.3636C15 11.8491 12.0899 9 8.5 9V16.6364C8.5 20.1509 11.4101 23 15 23C18.5898 23 21.5 20.1509 21.5 16.6364V9C17.9101 9 15 11.8491 15 15.3636Z"
    fill="white" />
  <path d="M19 25V25C16.7909 25 15 26.7909 15 29V29V29C17.2091 29 19 27.2091 19 25V25Z" fill="white" />
  <path d="M11 25V25C13.2091 25 15 26.7909 15 29V29V29C12.7909 29 11 27.2091 11 25V25Z" fill="white" />
  <path
    d="M48.973 25.285C52.944 25.285 55.338 22.5015 55.338 18.6255C55.338 18.5495 55.319 18.027 55.3 17.8275H50.455V19.623H52.868C52.5165 21.979 51.177 23.157 49.1155 23.1285C46.3605 23.0905 44.983 21.1525 44.9925 18.16C45.002 15.1675 46.3605 13.163 49.1155 13.201C50.93 13.2105 52.1175 14.2555 52.64 15.8705L54.977 15.5C54.2835 12.688 52.336 11.035 48.973 11.035C45.3155 11.035 42.57 13.676 42.57 18.16C42.57 22.72 45.4105 25.285 48.973 25.285ZM59.165 25V19.7845C59.165 18.597 59.583 17.6375 60.5235 17.1245C61.16 16.754 62.0245 16.7065 62.642 16.8775V14.74C61.7205 14.5975 60.6755 14.759 59.9155 15.2815C59.488 15.5475 59.146 15.937 58.8895 16.3835V14.74H56.866V25H59.165ZM68.5538 25.285C70.5298 25.285 72.2968 24.221 73.0853 22.359L70.8243 21.675C70.3778 22.625 69.5418 23.138 68.4208 23.138C66.8628 23.138 65.9508 22.1975 65.7703 20.5065H73.1993C73.4653 16.811 71.6033 14.455 68.4208 14.455C65.3998 14.455 63.3193 16.621 63.3193 19.984C63.3193 23.1 65.4378 25.285 68.5538 25.285ZM68.5158 16.4595C69.9313 16.4595 70.6818 17.172 70.8813 18.7775H65.8273C66.0933 17.2575 66.9768 16.4595 68.5158 16.4595ZM79.6035 25.285C81.5795 25.285 83.3465 24.221 84.135 22.359L81.874 21.675C81.4275 22.625 80.5915 23.138 79.4705 23.138C77.9125 23.138 77.0005 22.1975 76.82 20.5065H84.249C84.515 16.811 82.653 14.455 79.4705 14.455C76.4495 14.455 74.369 16.621 74.369 19.984C74.369 23.1 76.4875 25.285 79.6035 25.285ZM79.5655 16.4595C80.981 16.4595 81.7315 17.172 81.931 18.7775H76.877C77.143 17.2575 78.0265 16.4595 79.5655 16.4595ZM88.0094 25V19.7275C88.0094 17.2385 89.2444 16.602 90.4129 16.602C92.5979 16.602 92.8069 18.7965 92.8069 20.06V25H95.1249V19.2715C95.1249 18.0555 94.8684 14.4455 91.0874 14.4455C89.6054 14.4455 88.4844 14.9965 87.7339 15.88V14.74H85.6914V25H88.0094ZM109.169 25V22.853H103.127V11.32H100.838V25H109.169ZM112.878 13.182V11.0825H110.589V13.182H112.878ZM112.878 25V14.74H110.589V25H112.878ZM118.526 25V16.5355H121.006V14.74H118.526V14.0845C118.526 13.3815 118.944 12.897 119.818 12.897H121.006V11.035H119.723C118.973 11.035 117.776 10.9685 116.911 11.9375C116.218 12.6975 116.237 13.7995 116.237 14.5785V14.74H114.584V16.5355H116.237V25H118.526ZM126.438 25.285C128.414 25.285 130.181 24.221 130.969 22.359L128.708 21.675C128.262 22.625 127.426 23.138 126.305 23.138C124.747 23.138 123.835 22.1975 123.654 20.5065H131.083C131.349 16.811 129.487 14.455 126.305 14.455C123.284 14.455 121.203 16.621 121.203 19.984C121.203 23.1 123.322 25.285 126.438 25.285ZM126.4 16.4595C127.815 16.4595 128.566 17.172 128.765 18.7775H123.711C123.977 17.2575 124.861 16.4595 126.4 16.4595Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/green-life/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="white" />
  <path
    d="M15 15.3636C15 11.8491 12.0899 9 8.5 9V16.6364C8.5 20.1509 11.4101 23 15 23C18.5898 23 21.5 20.1509 21.5 16.6364V9C17.9101 9 15 11.8491 15 15.3636Z"
    fill="#0A0A0A" />
  <path d="M19 25V25C16.7909 25 15 26.7909 15 29V29V29C17.2091 29 19 27.2091 19 25V25Z" fill="#0A0A0A" />
  <path d="M11 25V25C13.2091 25 15 26.7909 15 29V29V29C12.7909 29 11 27.2091 11 25V25Z" fill="#0A0A0A" />
  <path
    d="M48.973 25.285C52.944 25.285 55.338 22.5015 55.338 18.6255C55.338 18.5495 55.319 18.027 55.3 17.8275H50.455V19.623H52.868C52.5165 21.979 51.177 23.157 49.1155 23.1285C46.3605 23.0905 44.983 21.1525 44.9925 18.16C45.002 15.1675 46.3605 13.163 49.1155 13.201C50.93 13.2105 52.1175 14.2555 52.64 15.8705L54.977 15.5C54.2835 12.688 52.336 11.035 48.973 11.035C45.3155 11.035 42.57 13.676 42.57 18.16C42.57 22.72 45.4105 25.285 48.973 25.285ZM59.165 25V19.7845C59.165 18.597 59.583 17.6375 60.5235 17.1245C61.16 16.754 62.0245 16.7065 62.642 16.8775V14.74C61.7205 14.5975 60.6755 14.759 59.9155 15.2815C59.488 15.5475 59.146 15.937 58.8895 16.3835V14.74H56.866V25H59.165ZM68.5538 25.285C70.5298 25.285 72.2968 24.221 73.0853 22.359L70.8243 21.675C70.3778 22.625 69.5418 23.138 68.4208 23.138C66.8628 23.138 65.9508 22.1975 65.7703 20.5065H73.1993C73.4653 16.811 71.6033 14.455 68.4208 14.455C65.3998 14.455 63.3193 16.621 63.3193 19.984C63.3193 23.1 65.4378 25.285 68.5538 25.285ZM68.5158 16.4595C69.9313 16.4595 70.6818 17.172 70.8813 18.7775H65.8273C66.0933 17.2575 66.9768 16.4595 68.5158 16.4595ZM79.6035 25.285C81.5795 25.285 83.3465 24.221 84.135 22.359L81.874 21.675C81.4275 22.625 80.5915 23.138 79.4705 23.138C77.9125 23.138 77.0005 22.1975 76.82 20.5065H84.249C84.515 16.811 82.653 14.455 79.4705 14.455C76.4495 14.455 74.369 16.621 74.369 19.984C74.369 23.1 76.4875 25.285 79.6035 25.285ZM79.5655 16.4595C80.981 16.4595 81.7315 17.172 81.931 18.7775H76.877C77.143 17.2575 78.0265 16.4595 79.5655 16.4595ZM88.0094 25V19.7275C88.0094 17.2385 89.2444 16.602 90.4129 16.602C92.5979 16.602 92.8069 18.7965 92.8069 20.06V25H95.1249V19.2715C95.1249 18.0555 94.8684 14.4455 91.0874 14.4455C89.6054 14.4455 88.4844 14.9965 87.7339 15.88V14.74H85.6914V25H88.0094ZM109.169 25V22.853H103.127V11.32H100.838V25H109.169ZM112.878 13.182V11.0825H110.589V13.182H112.878ZM112.878 25V14.74H110.589V25H112.878ZM118.526 25V16.5355H121.006V14.74H118.526V14.0845C118.526 13.3815 118.944 12.897 119.818 12.897H121.006V11.035H119.723C118.973 11.035 117.776 10.9685 116.911 11.9375C116.218 12.6975 116.237 13.7995 116.237 14.5785V14.74H114.584V16.5355H116.237V25H118.526ZM126.438 25.285C128.414 25.285 130.181 24.221 130.969 22.359L128.708 21.675C128.262 22.625 127.426 23.138 126.305 23.138C124.747 23.138 123.835 22.1975 123.654 20.5065H131.083C131.349 16.811 129.487 14.455 126.305 14.455C123.284 14.455 121.203 16.621 121.203 19.984C121.203 23.1 123.322 25.285 126.438 25.285ZM126.4 16.4595C127.815 16.4595 128.566 17.172 128.765 18.7775H123.711C123.977 17.2575 124.861 16.4595 126.4 16.4595Z"
    fill="white" />
</svg>

================
File: src/images/clients/green-life/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="#0A0A0A" />
  <path
    d="M15 15.3636C15 11.8491 12.0899 9 8.5 9V16.6364C8.5 20.1509 11.4101 23 15 23C18.5898 23 21.5 20.1509 21.5 16.6364V9C17.9101 9 15 11.8491 15 15.3636Z"
    fill="white" />
  <path d="M19 25V25C16.7909 25 15 26.7909 15 29V29V29C17.2091 29 19 27.2091 19 25V25Z" fill="white" />
  <path d="M11 25V25C13.2091 25 15 26.7909 15 29V29V29C12.7909 29 11 27.2091 11 25V25Z" fill="white" />
</svg>

================
File: src/images/clients/green-life/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="white" />
  <path
    d="M15 15.3636C15 11.8491 12.0899 9 8.5 9V16.6364C8.5 20.1509 11.4101 23 15 23C18.5898 23 21.5 20.1509 21.5 16.6364V9C17.9101 9 15 11.8491 15 15.3636Z"
    fill="#0A0A0A" />
  <path d="M19 25V25C16.7909 25 15 26.7909 15 29V29V29C17.2091 29 19 27.2091 19 25V25Z" fill="#0A0A0A" />
  <path d="M11 25V25C13.2091 25 15 26.7909 15 29V29V29C12.7909 29 11 27.2091 11 25V25Z" fill="#0A0A0A" />
</svg>

================
File: src/images/clients/home-work/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M1.10557 30.7889C1.03614 30.9277 1 31.0808 1 31.2361V31.5C1 32.0523 1.44772 32.5 2 32.5H28C28.5523 32.5 29 32.0523 29 31.5V31.2361C29 31.0808 28.9639 30.9277 28.8944 30.7889L27.2764 27.5528C27.107 27.214 26.7607 27 26.382 27H3.61803C3.23926 27 2.893 27.214 2.72361 27.5528L1.10557 30.7889Z"
    fill="#0A0A0A" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M4 12.9739C4 12.6739 4.13463 12.3899 4.36676 12.1999L15 3.5L18.3817 6.26687C19.0287 6.79619 20 6.3359 20 5.5H24V10.3898C24 10.6897 24.1346 10.9738 24.3668 11.1637L25.6332 12.1999C25.8654 12.3899 26 12.6739 26 12.9739V24C26 24.5523 25.5523 25 25 25H5C4.44772 25 4 24.5523 4 24V12.9739ZM15 16C13.3431 16 12 17.3431 12 19V24H18V19C18 17.3431 16.6569 16 15 16Z"
    fill="#0A0A0A" />
  <path
    d="M45.6195 25V19.224H52.0985V25H54.3785V11.32H52.0985V17.077H45.6195V11.32H43.33V25H45.6195ZM61.1934 25.285C64.2619 25.285 66.3139 23.0715 66.3139 19.87C66.3139 16.697 64.2904 14.455 61.1934 14.455C58.1629 14.455 56.0919 16.6495 56.0919 19.87C56.0919 23.043 58.1059 25.285 61.1934 25.285ZM61.1934 23.138C59.4264 23.138 58.5144 21.865 58.5144 19.87C58.5144 17.932 59.3504 16.602 61.1934 16.602C62.9889 16.602 63.8914 17.8845 63.8914 19.87C63.8914 21.7985 63.0079 23.138 61.1934 23.138ZM70.3165 25V18.6825C70.3165 17.4 71.0765 16.526 72.245 16.526C73.442 16.526 74.1925 17.3715 74.1925 18.7965V25H76.4725V18.6825C76.4725 17.324 77.3085 16.526 78.4105 16.526C79.5885 16.526 80.3485 17.362 80.3485 18.768V25H82.638V18.1885C82.638 15.9655 81.3935 14.4835 79.123 14.4835C77.793 14.4835 76.634 15.101 75.9975 16.1175C75.456 15.12 74.449 14.4835 73.005 14.4835C71.77 14.4835 70.706 15.006 70.0315 15.8515V14.74H68.008V25H70.3165ZM89.2334 25.285C91.2094 25.285 92.9764 24.221 93.7649 22.359L91.5039 21.675C91.0574 22.625 90.2214 23.138 89.1004 23.138C87.5424 23.138 86.6304 22.1975 86.4499 20.5065H93.8789C94.1449 16.811 92.2829 14.455 89.1004 14.455C86.0794 14.455 83.9989 16.621 83.9989 19.984C83.9989 23.1 86.1174 25.285 89.2334 25.285ZM89.1954 16.4595C90.6109 16.4595 91.3614 17.172 91.5609 18.7775H86.5069C86.7729 17.2575 87.6564 16.4595 89.1954 16.4595ZM104.191 25L106.984 15.272L109.777 25H112.038L116.028 11.32H113.625L110.908 21.2L108.181 11.32L105.778 11.339L103.061 21.2L100.334 11.32H97.9308L101.93 25H104.191ZM120.598 25.285C123.667 25.285 125.719 23.0715 125.719 19.87C125.719 16.697 123.695 14.455 120.598 14.455C117.568 14.455 115.497 16.6495 115.497 19.87C115.497 23.043 117.511 25.285 120.598 25.285ZM120.598 23.138C118.831 23.138 117.919 21.865 117.919 19.87C117.919 17.932 118.755 16.602 120.598 16.602C122.394 16.602 123.296 17.8845 123.296 19.87C123.296 21.7985 122.413 23.138 120.598 23.138ZM129.731 25V19.7845C129.731 18.597 130.149 17.6375 131.089 17.1245C131.726 16.754 132.59 16.7065 133.208 16.8775V14.74C132.286 14.5975 131.241 14.759 130.481 15.2815C130.054 15.5475 129.712 15.937 129.455 16.3835V14.74H127.432V25H129.731ZM136.959 25V20.06L140.882 25H143.913L139.59 19.87L143.571 14.74H140.711L136.959 19.68V11.32H134.641L134.622 25H136.959Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/home-work/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M1.10557 30.7889C1.03614 30.9277 1 31.0808 1 31.2361V31.5C1 32.0523 1.44772 32.5 2 32.5H28C28.5523 32.5 29 32.0523 29 31.5V31.2361C29 31.0808 28.9639 30.9277 28.8944 30.7889L27.2764 27.5528C27.107 27.214 26.7607 27 26.382 27H3.61803C3.23926 27 2.893 27.214 2.72361 27.5528L1.10557 30.7889Z"
    fill="white" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M4 12.9739C4 12.6739 4.13463 12.3899 4.36676 12.1999L15 3.5L18.3817 6.26687C19.0287 6.79619 20 6.3359 20 5.5H24V10.3898C24 10.6897 24.1346 10.9738 24.3668 11.1637L25.6332 12.1999C25.8654 12.3899 26 12.6739 26 12.9739V24C26 24.5523 25.5523 25 25 25H5C4.44772 25 4 24.5523 4 24V12.9739ZM15 16C13.3431 16 12 17.3431 12 19V24H18V19C18 17.3431 16.6569 16 15 16Z"
    fill="white" />
  <path
    d="M45.6195 25V19.224H52.0985V25H54.3785V11.32H52.0985V17.077H45.6195V11.32H43.33V25H45.6195ZM61.1934 25.285C64.2619 25.285 66.3139 23.0715 66.3139 19.87C66.3139 16.697 64.2904 14.455 61.1934 14.455C58.1629 14.455 56.0919 16.6495 56.0919 19.87C56.0919 23.043 58.1059 25.285 61.1934 25.285ZM61.1934 23.138C59.4264 23.138 58.5144 21.865 58.5144 19.87C58.5144 17.932 59.3504 16.602 61.1934 16.602C62.9889 16.602 63.8914 17.8845 63.8914 19.87C63.8914 21.7985 63.0079 23.138 61.1934 23.138ZM70.3165 25V18.6825C70.3165 17.4 71.0765 16.526 72.245 16.526C73.442 16.526 74.1925 17.3715 74.1925 18.7965V25H76.4725V18.6825C76.4725 17.324 77.3085 16.526 78.4105 16.526C79.5885 16.526 80.3485 17.362 80.3485 18.768V25H82.638V18.1885C82.638 15.9655 81.3935 14.4835 79.123 14.4835C77.793 14.4835 76.634 15.101 75.9975 16.1175C75.456 15.12 74.449 14.4835 73.005 14.4835C71.77 14.4835 70.706 15.006 70.0315 15.8515V14.74H68.008V25H70.3165ZM89.2334 25.285C91.2094 25.285 92.9764 24.221 93.7649 22.359L91.5039 21.675C91.0574 22.625 90.2214 23.138 89.1004 23.138C87.5424 23.138 86.6304 22.1975 86.4499 20.5065H93.8789C94.1449 16.811 92.2829 14.455 89.1004 14.455C86.0794 14.455 83.9989 16.621 83.9989 19.984C83.9989 23.1 86.1174 25.285 89.2334 25.285ZM89.1954 16.4595C90.6109 16.4595 91.3614 17.172 91.5609 18.7775H86.5069C86.7729 17.2575 87.6564 16.4595 89.1954 16.4595ZM104.191 25L106.984 15.272L109.777 25H112.038L116.028 11.32H113.625L110.908 21.2L108.181 11.32L105.778 11.339L103.061 21.2L100.334 11.32H97.9308L101.93 25H104.191ZM120.598 25.285C123.667 25.285 125.719 23.0715 125.719 19.87C125.719 16.697 123.695 14.455 120.598 14.455C117.568 14.455 115.497 16.6495 115.497 19.87C115.497 23.043 117.511 25.285 120.598 25.285ZM120.598 23.138C118.831 23.138 117.919 21.865 117.919 19.87C117.919 17.932 118.755 16.602 120.598 16.602C122.394 16.602 123.296 17.8845 123.296 19.87C123.296 21.7985 122.413 23.138 120.598 23.138ZM129.731 25V19.7845C129.731 18.597 130.149 17.6375 131.089 17.1245C131.726 16.754 132.59 16.7065 133.208 16.8775V14.74C132.286 14.5975 131.241 14.759 130.481 15.2815C130.054 15.5475 129.712 15.937 129.455 16.3835V14.74H127.432V25H129.731ZM136.959 25V20.06L140.882 25H143.913L139.59 19.87L143.571 14.74H140.711L136.959 19.68V11.32H134.641L134.622 25H136.959Z"
    fill="white" />
</svg>

================
File: src/images/clients/home-work/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M1.10557 30.7889C1.03614 30.9277 1 31.0808 1 31.2361V31.5C1 32.0523 1.44772 32.5 2 32.5H28C28.5523 32.5 29 32.0523 29 31.5V31.2361C29 31.0808 28.9639 30.9277 28.8944 30.7889L27.2764 27.5528C27.107 27.214 26.7607 27 26.382 27H3.61803C3.23926 27 2.893 27.214 2.72361 27.5528L1.10557 30.7889Z"
    fill="#0A0A0A" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M4 12.9739C4 12.6739 4.13463 12.3899 4.36676 12.1999L15 3.5L18.3817 6.26687C19.0287 6.79619 20 6.3359 20 5.5H24V10.3898C24 10.6897 24.1346 10.9738 24.3668 11.1637L25.6332 12.1999C25.8654 12.3899 26 12.6739 26 12.9739V24C26 24.5523 25.5523 25 25 25H5C4.44772 25 4 24.5523 4 24V12.9739ZM15 16C13.3431 16 12 17.3431 12 19V24H18V19C18 17.3431 16.6569 16 15 16Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/home-work/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M1.10557 30.7889C1.03614 30.9277 1 31.0808 1 31.2361V31.5C1 32.0523 1.44772 32.5 2 32.5H28C28.5523 32.5 29 32.0523 29 31.5V31.2361C29 31.0808 28.9639 30.9277 28.8944 30.7889L27.2764 27.5528C27.107 27.214 26.7607 27 26.382 27H3.61803C3.23926 27 2.893 27.214 2.72361 27.5528L1.10557 30.7889Z"
    fill="white" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M4 12.9739C4 12.6739 4.13463 12.3899 4.36676 12.1999L15 3.5L18.3817 6.26687C19.0287 6.79619 20 6.3359 20 5.5H24V10.3898C24 10.6897 24.1346 10.9738 24.3668 11.1637L25.6332 12.1999C25.8654 12.3899 26 12.6739 26 12.9739V24C26 24.5523 25.5523 25 25 25H5C4.44772 25 4 24.5523 4 24V12.9739ZM15 16C13.3431 16 12 17.3431 12 19V24H18V19C18 17.3431 16.6569 16 15 16Z"
    fill="white" />
</svg>

================
File: src/images/clients/mail-smirk/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="#0A0A0A" />
  <path
    d="M7 15.154C7 14.7567 7.23519 14.3971 7.59918 14.2379L15 11L22.4008 14.2379C22.7648 14.3971 23 14.7567 23 15.154V21.3944C23 22.3975 22.4943 23.3355 21.5706 23.7267C20.2201 24.2988 17.9607 25 15 25C12.0393 25 9.77993 24.2988 8.42936 23.7267C7.50573 23.3355 7 22.3975 7 21.3944V15.154Z"
    fill="white" />
  <path d="M11 18C11 18 12 20.5 15 20.5C18 20.5 19 18 19 18" stroke="#0A0A0A" stroke-linecap="round"
    stroke-linejoin="round" />
  <path
    d="M43.6 24H44.928V14.976H44.992L48.96 22.08H49.12L53.088 15.024H53.152V24H54.48V12.8H52.864L49.088 19.632H49.024L45.248 12.8H43.6V24ZM63.8221 12.8H62.1101L57.9981 23.84V24H59.4541L60.5101 21.072H65.4061L66.4621 24H67.9501V23.84L63.8221 12.8ZM60.9581 19.824L62.9261 14.352H62.9901L64.9581 19.824H60.9581ZM71.4644 24H72.8724V12.8H71.4644V24ZM77.5137 24H84.3138V22.72H78.9057V12.8H77.5137V24ZM91.1906 24.144C94.5506 24.144 95.8626 22.704 95.8626 20.704C95.8626 18.512 94.2786 17.664 92.1986 17.232L90.6786 16.912C89.6386 16.688 89.4146 16.304 89.4146 15.872C89.4146 15.408 89.8626 14.896 91.1746 14.896C92.5026 14.896 93.0626 15.568 93.1266 16.304H95.6706C95.6546 14.16 93.7666 12.656 91.2066 12.656C88.5666 12.656 86.8386 13.984 86.8386 15.872C86.8386 18.016 88.3586 18.816 90.2946 19.232L91.9266 19.584C92.9186 19.792 93.2866 20.16 93.2866 20.768C93.2866 21.44 92.7266 21.92 91.1906 21.92C89.9746 21.92 89.1266 21.376 89.0146 20.16H86.4706C86.6146 22.576 88.1986 24.144 91.1906 24.144ZM98.82 24H101.252V16.72H101.316L104.66 22.144H104.82L108.164 16.768H108.228V24H110.66V12.8H107.94L104.788 17.936H104.724L101.572 12.8H98.82V24ZM114.338 24H116.866V12.8H114.338V24ZM127.28 19.744C128.64 19.2 129.488 17.984 129.488 16.368C129.488 14.464 128.048 12.8 125.664 12.8H120.544V24H123.056V20.048H124.624L127.04 24H129.984V23.84L127.28 19.744ZM123.056 15.04H125.536C126.512 15.04 126.912 15.712 126.912 16.384C126.912 17.088 126.544 17.808 125.536 17.808H123.056V15.04ZM137.231 18.176L142.047 12.96V12.8H139.103L135.215 17.04V12.8H132.703V24H135.215V19.36L139.263 24H142.239V23.84L137.231 18.176Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/mail-smirk/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="white" />
  <path
    d="M7 15.154C7 14.7567 7.23519 14.3971 7.59918 14.2379L15 11L22.4008 14.2379C22.7648 14.3971 23 14.7567 23 15.154V21.3944C23 22.3975 22.4943 23.3355 21.5706 23.7267C20.2201 24.2988 17.9607 25 15 25C12.0393 25 9.77993 24.2988 8.42936 23.7267C7.50573 23.3355 7 22.3975 7 21.3944V15.154Z"
    fill="#0A0A0A" />
  <path d="M11 18C11 18 12 20.5 15 20.5C18 20.5 19 18 19 18" stroke="white" stroke-linecap="round"
    stroke-linejoin="round" />
  <path
    d="M43.6 24H44.928V14.976H44.992L48.96 22.08H49.12L53.088 15.024H53.152V24H54.48V12.8H52.864L49.088 19.632H49.024L45.248 12.8H43.6V24ZM63.8221 12.8H62.1101L57.9981 23.84V24H59.4541L60.5101 21.072H65.4061L66.4621 24H67.9501V23.84L63.8221 12.8ZM60.9581 19.824L62.9261 14.352H62.9901L64.9581 19.824H60.9581ZM71.4644 24H72.8724V12.8H71.4644V24ZM77.5137 24H84.3138V22.72H78.9057V12.8H77.5137V24ZM91.1906 24.144C94.5506 24.144 95.8626 22.704 95.8626 20.704C95.8626 18.512 94.2786 17.664 92.1986 17.232L90.6786 16.912C89.6386 16.688 89.4146 16.304 89.4146 15.872C89.4146 15.408 89.8626 14.896 91.1746 14.896C92.5026 14.896 93.0626 15.568 93.1266 16.304H95.6706C95.6546 14.16 93.7666 12.656 91.2066 12.656C88.5666 12.656 86.8386 13.984 86.8386 15.872C86.8386 18.016 88.3586 18.816 90.2946 19.232L91.9266 19.584C92.9186 19.792 93.2866 20.16 93.2866 20.768C93.2866 21.44 92.7266 21.92 91.1906 21.92C89.9746 21.92 89.1266 21.376 89.0146 20.16H86.4706C86.6146 22.576 88.1986 24.144 91.1906 24.144ZM98.82 24H101.252V16.72H101.316L104.66 22.144H104.82L108.164 16.768H108.228V24H110.66V12.8H107.94L104.788 17.936H104.724L101.572 12.8H98.82V24ZM114.338 24H116.866V12.8H114.338V24ZM127.28 19.744C128.64 19.2 129.488 17.984 129.488 16.368C129.488 14.464 128.048 12.8 125.664 12.8H120.544V24H123.056V20.048H124.624L127.04 24H129.984V23.84L127.28 19.744ZM123.056 15.04H125.536C126.512 15.04 126.912 15.712 126.912 16.384C126.912 17.088 126.544 17.808 125.536 17.808H123.056V15.04ZM137.231 18.176L142.047 12.96V12.8H139.103L135.215 17.04V12.8H132.703V24H135.215V19.36L139.263 24H142.239V23.84L137.231 18.176Z"
    fill="white" />
</svg>

================
File: src/images/clients/mail-smirk/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="#0A0A0A" />
  <path
    d="M7 15.154C7 14.7567 7.23519 14.3971 7.59918 14.2379L15 11L22.4008 14.2379C22.7648 14.3971 23 14.7567 23 15.154V21.3944C23 22.3975 22.4943 23.3355 21.5706 23.7267C20.2201 24.2988 17.9607 25 15 25C12.0393 25 9.77993 24.2988 8.42936 23.7267C7.50573 23.3355 7 22.3975 7 21.3944V15.154Z"
    fill="white" />
  <path d="M11 18C11 18 12 20.5 15 20.5C18 20.5 19 18 19 18" stroke="#0A0A0A" stroke-linecap="round"
    stroke-linejoin="round" />
</svg>

================
File: src/images/clients/mail-smirk/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="15" cy="18" r="15" fill="white" />
  <path
    d="M7 15.154C7 14.7567 7.23519 14.3971 7.59918 14.2379L15 11L22.4008 14.2379C22.7648 14.3971 23 14.7567 23 15.154V21.3944C23 22.3975 22.4943 23.3355 21.5706 23.7267C20.2201 24.2988 17.9607 25 15 25C12.0393 25 9.77993 24.2988 8.42936 23.7267C7.50573 23.3355 7 22.3975 7 21.3944V15.154Z"
    fill="#0A0A0A" />
  <path d="M11 18C11 18 12 20.5 15 20.5C18 20.5 19 18 19 18" stroke="white" stroke-linecap="round"
    stroke-linejoin="round" />
</svg>

================
File: src/images/clients/meetme/meetme-logo-380x380.svg
================
<svg width="380" height="380" viewBox="0 0 380 380" fill="none" xmlns="http://www.w3.org/2000/svg" baseProfile="tiny-ps" version="1.2">
<title>Meetme logo</title>
<path d="M134.195 56.129H98.7805V133.548H134.195V56.129Z" fill="white"/>
<path d="M282.293 53.0323H246.878V130.452H282.293V53.0323Z" fill="white"/>
<path d="M329.512 153.161H53.7073V338.968H329.512V153.161Z" fill="white"/>
<path d="M55.2402 321.571V156.143H314.471V321.571H55.2402ZM125.939 119.5C125.939 122.935 123.362 125.607 120.048 125.607H108.264C104.951 125.607 102.373 122.935 102.373 119.5V64.5357C102.373 61.1004 104.951 58.4285 108.264 58.4285H120.048C123.362 58.4285 125.939 61.1004 125.939 64.5357V119.5ZM267.338 119.5C267.338 122.935 264.761 125.607 261.446 125.607H249.663C246.349 125.607 243.772 122.935 243.772 119.5V64.5357C243.772 61.1004 246.349 58.4285 249.663 58.4285H261.446C264.761 58.4285 267.338 61.1004 267.338 64.5357V119.5ZM338.037 107.285C338.037 93.9263 327.359 82.8571 314.471 82.8571H290.904V64.5357C290.904 47.741 277.648 34 261.446 34H249.663C233.462 34 220.205 47.741 220.205 64.5357V82.8571H149.506V64.5357C149.506 47.741 136.25 34 120.048 34H108.264C92.0628 34 78.8066 47.741 78.8066 64.5357V82.8571H55.2402C42.3523 82.8571 31.6738 93.9263 31.6738 107.285V321.571C31.6738 334.931 42.3523 346 55.2402 346H314.471C327.359 346 338.037 334.931 338.037 321.571V107.285Z" fill="#1386EB"/>
<path d="M241.793 171C252.954 171 262.913 173.23 271.67 177.689C280.599 182.148 287.553 188.755 292.533 197.508C297.684 206.262 300.259 216.832 300.259 229.219V309.735H271.155V233.431C271.155 221.209 267.979 211.877 261.625 205.436C255.272 198.83 246.601 195.526 235.612 195.526C224.622 195.526 215.865 198.83 209.34 205.436C202.987 211.877 199.811 221.209 199.811 233.431V309.735H170.706V233.431C170.706 221.209 167.53 211.877 161.177 205.436C154.823 198.83 146.152 195.526 135.163 195.526C124.174 195.526 115.417 198.83 108.892 205.436C102.539 211.877 99.3619 221.209 99.3619 233.431V309.735H70V173.23H99.3619V188.837C104.17 183.222 110.265 178.845 117.649 175.707C125.032 172.569 132.931 171 141.344 171C152.677 171 162.808 173.312 171.737 177.937C180.665 182.561 187.534 189.25 192.341 198.004C196.634 189.746 203.331 183.222 212.431 178.432C221.532 173.477 231.319 171 241.793 171Z" fill="#505050"/>
</svg>

================
File: src/images/clients/north-adventures/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="8" fill="#0A0A0A" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M16.8978 24.5245C18.0241 24.1337 18.9697 23.4994 19.7122 22.7122C20.4994 21.9698 21.1337 21.0241 21.5245 19.8978L24.5 8.5L13.1022 11.4755C11.9759 11.8663 11.0302 12.5006 10.2878 13.2878C9.50061 14.0302 8.8663 14.9759 8.47549 16.1022L5.5 27.5L16.8978 24.5245ZM18 15.5C18 14.9477 17.5523 14.5 17 14.5C16.4477 14.5 16 14.9477 16 15.5V17.6492L14.6713 15.9883C13.7855 14.8811 12 15.5075 12 16.9254V20.5C12 21.0523 12.4477 21.5 13 21.5C13.5523 21.5 14 21.0523 14 20.5V18.3508L15.3287 20.0117C16.2145 21.1189 18 20.4925 18 19.0746V15.5Z"
    fill="white" />
  <path
    d="M43.207 24V12.661H45.553L51.384 20.515L50.568 22.215V12.661H53.101V24H51.027L45.094 16.248L45.74 15.007V24H43.207ZM58.9598 24.255C57.5091 24.255 56.4154 23.8697 55.6788 23.099C54.9534 22.317 54.5908 21.1723 54.5908 19.665C54.5908 18.0443 54.9591 16.8827 55.6958 16.18C56.4438 15.466 57.5318 15.109 58.9598 15.109C59.9231 15.109 60.7278 15.2733 61.3738 15.602C62.0311 15.9193 62.5241 16.4123 62.8528 17.081C63.1928 17.7497 63.3628 18.611 63.3628 19.665C63.3628 21.1723 62.9831 22.317 62.2238 23.099C61.4644 23.8697 60.3764 24.255 58.9598 24.255ZM58.9598 22.232C59.3791 22.232 59.7248 22.1357 59.9968 21.943C60.2801 21.739 60.4898 21.45 60.6258 21.076C60.7731 20.6907 60.8468 20.2203 60.8468 19.665C60.8468 19.0303 60.7731 18.5317 60.6258 18.169C60.4898 17.795 60.2801 17.5287 59.9968 17.37C59.7134 17.2 59.3678 17.115 58.9598 17.115C58.5291 17.115 58.1778 17.2 57.9058 17.37C57.6338 17.54 57.4298 17.812 57.2938 18.186C57.1691 18.5487 57.1068 19.0417 57.1068 19.665C57.1068 20.5263 57.2541 21.1723 57.5488 21.603C57.8548 22.0223 58.3251 22.232 58.9598 22.232ZM64.7711 24V16.299C64.9298 16.163 65.2131 16.01 65.6211 15.84C66.0291 15.6587 66.4938 15.5 67.0151 15.364C67.5478 15.2167 68.0804 15.143 68.6131 15.143C69.1458 15.143 69.5651 15.1827 69.8711 15.262C70.1771 15.3413 70.4094 15.4433 70.5681 15.568V17.421C70.3754 17.3757 70.1318 17.3417 69.8371 17.319C69.5424 17.2963 69.2364 17.285 68.9191 17.285C68.6018 17.2737 68.3014 17.2737 68.0181 17.285C67.7348 17.2963 67.4968 17.319 67.3041 17.353V24H64.7711ZM75.2216 24.34C74.2243 24.34 73.4819 24.1077 72.9946 23.643C72.5073 23.167 72.2636 22.4983 72.2636 21.637V17.336H71.0056V15.398H72.2636V13.035H74.9156V15.398H76.8026V17.336H74.9156V21.314C74.9156 21.6087 74.9779 21.8297 75.1026 21.977C75.2273 22.113 75.4369 22.181 75.7316 22.181C75.9016 22.181 76.0886 22.147 76.2926 22.079C76.4966 22.011 76.6666 21.926 76.8026 21.824V24C76.5646 24.1247 76.3039 24.2097 76.0206 24.255C75.7486 24.3117 75.4823 24.34 75.2216 24.34ZM78.385 24V11.998H80.935V17.098L79.864 16.52C80.3174 16.1233 80.85 15.8003 81.462 15.551C82.0854 15.2903 82.72 15.16 83.366 15.16C83.9894 15.16 84.539 15.262 85.015 15.466C85.491 15.67 85.8594 16.0043 86.12 16.469C86.392 16.9223 86.528 17.5513 86.528 18.356V24H83.995V18.883C83.995 18.3163 83.8534 17.9083 83.57 17.659C83.298 17.3983 82.8957 17.268 82.363 17.268C82.091 17.268 81.819 17.3077 81.547 17.387C81.2864 17.455 81.0824 17.5457 80.935 17.659L80.901 24H78.385ZM91.8949 24L96.1789 12.661H99.1879L103.2 24H100.378L96.7569 13.307L98.0999 13.188L94.4959 24H91.8949ZM94.3089 21.552L94.8699 19.529H100.021L100.276 21.552H94.3089ZM108.141 24.255C107.472 24.255 106.855 24.1813 106.288 24.034C105.733 23.8867 105.251 23.643 104.843 23.303C104.435 22.9517 104.112 22.4757 103.874 21.875C103.647 21.2743 103.534 20.5263 103.534 19.631C103.534 18.237 103.874 17.1377 104.554 16.333C105.245 15.5283 106.277 15.126 107.648 15.126C107.829 15.126 108.067 15.143 108.362 15.177C108.657 15.1997 108.963 15.2677 109.28 15.381C109.597 15.4943 109.881 15.687 110.13 15.959L109.62 16.741V11.862H112.136V21.756C112.136 22.1753 112.023 22.5437 111.796 22.861C111.569 23.167 111.263 23.422 110.878 23.626C110.504 23.83 110.079 23.983 109.603 24.085C109.127 24.1983 108.64 24.255 108.141 24.255ZM108.243 22.13C108.651 22.13 108.98 22.079 109.229 21.977C109.49 21.8637 109.62 21.6993 109.62 21.484V17.523C109.416 17.4097 109.195 17.3247 108.957 17.268C108.73 17.2 108.509 17.166 108.294 17.166C107.818 17.166 107.416 17.2453 107.087 17.404C106.758 17.5627 106.509 17.829 106.339 18.203C106.18 18.577 106.101 19.0813 106.101 19.716C106.101 20.2147 106.169 20.6453 106.305 21.008C106.441 21.3593 106.662 21.637 106.968 21.841C107.285 22.0337 107.71 22.13 108.243 22.13ZM116.92 24L113.333 15.398H116.087L118.688 22.028L118.076 22.045L120.388 15.398H123.057L119.47 24H116.92ZM127.627 24.255C126.766 24.255 126.001 24.0793 125.332 23.728C124.675 23.3653 124.159 22.8553 123.785 22.198C123.422 21.5293 123.241 20.736 123.241 19.818C123.241 18.322 123.609 17.166 124.346 16.35C125.094 15.5227 126.159 15.109 127.542 15.109C128.494 15.109 129.259 15.313 129.837 15.721C130.426 16.129 130.857 16.724 131.129 17.506C131.401 18.288 131.531 19.24 131.52 20.362H124.975L124.703 18.747H129.429L129.055 19.546C129.044 18.628 128.913 17.982 128.664 17.608C128.415 17.234 128.007 17.047 127.44 17.047C127.123 17.047 126.834 17.1263 126.573 17.285C126.324 17.4437 126.125 17.71 125.978 18.084C125.842 18.4467 125.774 18.951 125.774 19.597C125.774 20.413 125.967 21.042 126.352 21.484C126.749 21.926 127.378 22.147 128.239 22.147C128.556 22.147 128.868 22.113 129.174 22.045C129.491 21.9657 129.786 21.875 130.058 21.773C130.33 21.671 130.562 21.5803 130.755 21.501V23.677C130.347 23.847 129.888 23.983 129.378 24.085C128.879 24.1983 128.296 24.255 127.627 24.255ZM132.94 16.129C133.155 16.0157 133.438 15.9023 133.79 15.789C134.141 15.6643 134.526 15.5567 134.946 15.466C135.365 15.3753 135.784 15.3017 136.204 15.245C136.634 15.1883 137.031 15.16 137.394 15.16C138.164 15.16 138.822 15.262 139.366 15.466C139.91 15.6587 140.323 15.976 140.607 16.418C140.901 16.86 141.049 17.4607 141.049 18.22V24H138.516V18.73C138.516 18.5147 138.482 18.3163 138.414 18.135C138.357 17.9537 138.266 17.8007 138.142 17.676C138.017 17.54 137.847 17.438 137.632 17.37C137.416 17.2907 137.156 17.251 136.85 17.251C136.589 17.251 136.328 17.285 136.068 17.353C135.807 17.4097 135.609 17.472 135.473 17.54V24H132.94V16.129ZM146.478 24.34C145.481 24.34 144.738 24.1077 144.251 23.643C143.764 23.167 143.52 22.4983 143.52 21.637V17.336H142.262V15.398H143.52V13.035H146.172V15.398H148.059V17.336H146.172V21.314C146.172 21.6087 146.234 21.8297 146.359 21.977C146.484 22.113 146.693 22.181 146.988 22.181C147.158 22.181 147.345 22.147 147.549 22.079C147.753 22.011 147.923 21.926 148.059 21.824V24C147.821 24.1247 147.56 24.2097 147.277 24.255C147.005 24.3117 146.739 24.34 146.478 24.34ZM153.688 24.255C152.894 24.255 152.192 24.1303 151.58 23.881C150.968 23.6317 150.492 23.252 150.152 22.742C149.812 22.2207 149.642 21.5463 149.642 20.719V15.398H152.175V20.515C152.175 21.059 152.294 21.467 152.532 21.739C152.781 21.9997 153.172 22.13 153.705 22.13C154.249 22.13 154.64 21.9997 154.878 21.739C155.116 21.467 155.235 21.059 155.235 20.515V15.398H157.615V20.719C157.615 21.943 157.263 22.8383 156.561 23.405C155.858 23.9717 154.9 24.255 153.688 24.255ZM159.512 24V16.299C159.67 16.163 159.954 16.01 160.362 15.84C160.77 15.6587 161.234 15.5 161.756 15.364C162.288 15.2167 162.821 15.143 163.354 15.143C163.886 15.143 164.306 15.1827 164.612 15.262C164.918 15.3413 165.15 15.4433 165.309 15.568V17.421C165.116 17.3757 164.872 17.3417 164.578 17.319C164.283 17.2963 163.977 17.285 163.66 17.285C163.342 17.2737 163.042 17.2737 162.759 17.285C162.475 17.2963 162.237 17.319 162.045 17.353V24H159.512ZM170.037 24.255C169.176 24.255 168.411 24.0793 167.742 23.728C167.085 23.3653 166.569 22.8553 166.195 22.198C165.833 21.5293 165.651 20.736 165.651 19.818C165.651 18.322 166.02 17.166 166.756 16.35C167.504 15.5227 168.57 15.109 169.952 15.109C170.904 15.109 171.669 15.313 172.247 15.721C172.837 16.129 173.267 16.724 173.539 17.506C173.811 18.288 173.942 19.24 173.93 20.362H167.385L167.113 18.747H171.839L171.465 19.546C171.454 18.628 171.324 17.982 171.074 17.608C170.825 17.234 170.417 17.047 169.85 17.047C169.533 17.047 169.244 17.1263 168.983 17.285C168.734 17.4437 168.536 17.71 168.388 18.084C168.252 18.4467 168.184 18.951 168.184 19.597C168.184 20.413 168.377 21.042 168.762 21.484C169.159 21.926 169.788 22.147 170.649 22.147C170.967 22.147 171.278 22.113 171.584 22.045C171.902 21.9657 172.196 21.875 172.468 21.773C172.74 21.671 172.973 21.5803 173.165 21.501V23.677C172.757 23.847 172.298 23.983 171.788 24.085C171.29 24.1983 170.706 24.255 170.037 24.255ZM177.9 24.255C177.288 24.255 176.761 24.187 176.319 24.051C175.888 23.9263 175.48 23.7847 175.095 23.626V21.399C175.333 21.5577 175.599 21.722 175.894 21.892C176.189 22.0507 176.512 22.181 176.863 22.283C177.226 22.385 177.605 22.436 178.002 22.436C178.41 22.436 178.693 22.368 178.852 22.232C179.022 22.0847 179.107 21.909 179.107 21.705C179.107 21.5123 179.022 21.3593 178.852 21.246C178.682 21.1213 178.461 21.0193 178.189 20.94C177.917 20.8607 177.628 20.787 177.322 20.719C177.05 20.6623 176.778 20.5773 176.506 20.464C176.234 20.3393 175.99 20.175 175.775 19.971C175.56 19.767 175.384 19.5177 175.248 19.223C175.123 18.917 175.061 18.5487 175.061 18.118C175.061 17.5627 175.169 17.1037 175.384 16.741C175.599 16.367 175.883 16.0667 176.234 15.84C176.585 15.6133 176.965 15.4547 177.373 15.364C177.781 15.262 178.178 15.2167 178.563 15.228C179.266 15.2507 179.821 15.33 180.229 15.466C180.648 15.5907 181.028 15.755 181.368 15.959V17.948C180.983 17.7327 180.597 17.5343 180.212 17.353C179.838 17.1603 179.407 17.064 178.92 17.064C178.478 17.064 178.161 17.132 177.968 17.268C177.775 17.404 177.679 17.5853 177.679 17.812C177.679 18.0273 177.741 18.1973 177.866 18.322C178.002 18.4467 178.178 18.5487 178.393 18.628C178.608 18.696 178.846 18.764 179.107 18.832C179.39 18.9 179.679 18.985 179.974 19.087C180.28 19.1777 180.563 19.3137 180.824 19.495C181.096 19.665 181.311 19.9087 181.47 20.226C181.64 20.532 181.725 20.94 181.725 21.45C181.714 22.1413 181.527 22.6967 181.164 23.116C180.801 23.524 180.331 23.8187 179.753 24C179.186 24.17 178.569 24.255 177.9 24.255Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/north-adventures/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="8" fill="white" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M16.8978 24.5245C18.0241 24.1337 18.9697 23.4994 19.7122 22.7122C20.4994 21.9698 21.1337 21.0241 21.5245 19.8978L24.5 8.5L13.1022 11.4755C11.9759 11.8663 11.0302 12.5006 10.2878 13.2878C9.50061 14.0302 8.8663 14.9759 8.47549 16.1022L5.5 27.5L16.8978 24.5245ZM18 15.5C18 14.9477 17.5523 14.5 17 14.5C16.4477 14.5 16 14.9477 16 15.5V17.6492L14.6713 15.9883C13.7855 14.8811 12 15.5075 12 16.9254V20.5C12 21.0523 12.4477 21.5 13 21.5C13.5523 21.5 14 21.0523 14 20.5V18.3508L15.3287 20.0117C16.2145 21.1189 18 20.4925 18 19.0746V15.5Z"
    fill="#0A0A0A" />
  <path
    d="M43.207 24V12.661H45.553L51.384 20.515L50.568 22.215V12.661H53.101V24H51.027L45.094 16.248L45.74 15.007V24H43.207ZM58.9598 24.255C57.5091 24.255 56.4154 23.8697 55.6788 23.099C54.9534 22.317 54.5908 21.1723 54.5908 19.665C54.5908 18.0443 54.9591 16.8827 55.6958 16.18C56.4438 15.466 57.5318 15.109 58.9598 15.109C59.9231 15.109 60.7278 15.2733 61.3738 15.602C62.0311 15.9193 62.5241 16.4123 62.8528 17.081C63.1928 17.7497 63.3628 18.611 63.3628 19.665C63.3628 21.1723 62.9831 22.317 62.2238 23.099C61.4644 23.8697 60.3764 24.255 58.9598 24.255ZM58.9598 22.232C59.3791 22.232 59.7248 22.1357 59.9968 21.943C60.2801 21.739 60.4898 21.45 60.6258 21.076C60.7731 20.6907 60.8468 20.2203 60.8468 19.665C60.8468 19.0303 60.7731 18.5317 60.6258 18.169C60.4898 17.795 60.2801 17.5287 59.9968 17.37C59.7134 17.2 59.3678 17.115 58.9598 17.115C58.5291 17.115 58.1778 17.2 57.9058 17.37C57.6338 17.54 57.4298 17.812 57.2938 18.186C57.1691 18.5487 57.1068 19.0417 57.1068 19.665C57.1068 20.5263 57.2541 21.1723 57.5488 21.603C57.8548 22.0223 58.3251 22.232 58.9598 22.232ZM64.7711 24V16.299C64.9298 16.163 65.2131 16.01 65.6211 15.84C66.0291 15.6587 66.4938 15.5 67.0151 15.364C67.5478 15.2167 68.0804 15.143 68.6131 15.143C69.1458 15.143 69.5651 15.1827 69.8711 15.262C70.1771 15.3413 70.4094 15.4433 70.5681 15.568V17.421C70.3754 17.3757 70.1318 17.3417 69.8371 17.319C69.5424 17.2963 69.2364 17.285 68.9191 17.285C68.6018 17.2737 68.3014 17.2737 68.0181 17.285C67.7348 17.2963 67.4968 17.319 67.3041 17.353V24H64.7711ZM75.2216 24.34C74.2243 24.34 73.4819 24.1077 72.9946 23.643C72.5073 23.167 72.2636 22.4983 72.2636 21.637V17.336H71.0056V15.398H72.2636V13.035H74.9156V15.398H76.8026V17.336H74.9156V21.314C74.9156 21.6087 74.9779 21.8297 75.1026 21.977C75.2273 22.113 75.4369 22.181 75.7316 22.181C75.9016 22.181 76.0886 22.147 76.2926 22.079C76.4966 22.011 76.6666 21.926 76.8026 21.824V24C76.5646 24.1247 76.3039 24.2097 76.0206 24.255C75.7486 24.3117 75.4823 24.34 75.2216 24.34ZM78.385 24V11.998H80.935V17.098L79.864 16.52C80.3174 16.1233 80.85 15.8003 81.462 15.551C82.0854 15.2903 82.72 15.16 83.366 15.16C83.9894 15.16 84.539 15.262 85.015 15.466C85.491 15.67 85.8594 16.0043 86.12 16.469C86.392 16.9223 86.528 17.5513 86.528 18.356V24H83.995V18.883C83.995 18.3163 83.8534 17.9083 83.57 17.659C83.298 17.3983 82.8957 17.268 82.363 17.268C82.091 17.268 81.819 17.3077 81.547 17.387C81.2864 17.455 81.0824 17.5457 80.935 17.659L80.901 24H78.385ZM91.8949 24L96.1789 12.661H99.1879L103.2 24H100.378L96.7569 13.307L98.0999 13.188L94.4959 24H91.8949ZM94.3089 21.552L94.8699 19.529H100.021L100.276 21.552H94.3089ZM108.141 24.255C107.472 24.255 106.855 24.1813 106.288 24.034C105.733 23.8867 105.251 23.643 104.843 23.303C104.435 22.9517 104.112 22.4757 103.874 21.875C103.647 21.2743 103.534 20.5263 103.534 19.631C103.534 18.237 103.874 17.1377 104.554 16.333C105.245 15.5283 106.277 15.126 107.648 15.126C107.829 15.126 108.067 15.143 108.362 15.177C108.657 15.1997 108.963 15.2677 109.28 15.381C109.597 15.4943 109.881 15.687 110.13 15.959L109.62 16.741V11.862H112.136V21.756C112.136 22.1753 112.023 22.5437 111.796 22.861C111.569 23.167 111.263 23.422 110.878 23.626C110.504 23.83 110.079 23.983 109.603 24.085C109.127 24.1983 108.64 24.255 108.141 24.255ZM108.243 22.13C108.651 22.13 108.98 22.079 109.229 21.977C109.49 21.8637 109.62 21.6993 109.62 21.484V17.523C109.416 17.4097 109.195 17.3247 108.957 17.268C108.73 17.2 108.509 17.166 108.294 17.166C107.818 17.166 107.416 17.2453 107.087 17.404C106.758 17.5627 106.509 17.829 106.339 18.203C106.18 18.577 106.101 19.0813 106.101 19.716C106.101 20.2147 106.169 20.6453 106.305 21.008C106.441 21.3593 106.662 21.637 106.968 21.841C107.285 22.0337 107.71 22.13 108.243 22.13ZM116.92 24L113.333 15.398H116.087L118.688 22.028L118.076 22.045L120.388 15.398H123.057L119.47 24H116.92ZM127.627 24.255C126.766 24.255 126.001 24.0793 125.332 23.728C124.675 23.3653 124.159 22.8553 123.785 22.198C123.422 21.5293 123.241 20.736 123.241 19.818C123.241 18.322 123.609 17.166 124.346 16.35C125.094 15.5227 126.159 15.109 127.542 15.109C128.494 15.109 129.259 15.313 129.837 15.721C130.426 16.129 130.857 16.724 131.129 17.506C131.401 18.288 131.531 19.24 131.52 20.362H124.975L124.703 18.747H129.429L129.055 19.546C129.044 18.628 128.913 17.982 128.664 17.608C128.415 17.234 128.007 17.047 127.44 17.047C127.123 17.047 126.834 17.1263 126.573 17.285C126.324 17.4437 126.125 17.71 125.978 18.084C125.842 18.4467 125.774 18.951 125.774 19.597C125.774 20.413 125.967 21.042 126.352 21.484C126.749 21.926 127.378 22.147 128.239 22.147C128.556 22.147 128.868 22.113 129.174 22.045C129.491 21.9657 129.786 21.875 130.058 21.773C130.33 21.671 130.562 21.5803 130.755 21.501V23.677C130.347 23.847 129.888 23.983 129.378 24.085C128.879 24.1983 128.296 24.255 127.627 24.255ZM132.94 16.129C133.155 16.0157 133.438 15.9023 133.79 15.789C134.141 15.6643 134.526 15.5567 134.946 15.466C135.365 15.3753 135.784 15.3017 136.204 15.245C136.634 15.1883 137.031 15.16 137.394 15.16C138.164 15.16 138.822 15.262 139.366 15.466C139.91 15.6587 140.323 15.976 140.607 16.418C140.901 16.86 141.049 17.4607 141.049 18.22V24H138.516V18.73C138.516 18.5147 138.482 18.3163 138.414 18.135C138.357 17.9537 138.266 17.8007 138.142 17.676C138.017 17.54 137.847 17.438 137.632 17.37C137.416 17.2907 137.156 17.251 136.85 17.251C136.589 17.251 136.328 17.285 136.068 17.353C135.807 17.4097 135.609 17.472 135.473 17.54V24H132.94V16.129ZM146.478 24.34C145.481 24.34 144.738 24.1077 144.251 23.643C143.764 23.167 143.52 22.4983 143.52 21.637V17.336H142.262V15.398H143.52V13.035H146.172V15.398H148.059V17.336H146.172V21.314C146.172 21.6087 146.234 21.8297 146.359 21.977C146.484 22.113 146.693 22.181 146.988 22.181C147.158 22.181 147.345 22.147 147.549 22.079C147.753 22.011 147.923 21.926 148.059 21.824V24C147.821 24.1247 147.56 24.2097 147.277 24.255C147.005 24.3117 146.739 24.34 146.478 24.34ZM153.688 24.255C152.894 24.255 152.192 24.1303 151.58 23.881C150.968 23.6317 150.492 23.252 150.152 22.742C149.812 22.2207 149.642 21.5463 149.642 20.719V15.398H152.175V20.515C152.175 21.059 152.294 21.467 152.532 21.739C152.781 21.9997 153.172 22.13 153.705 22.13C154.249 22.13 154.64 21.9997 154.878 21.739C155.116 21.467 155.235 21.059 155.235 20.515V15.398H157.615V20.719C157.615 21.943 157.263 22.8383 156.561 23.405C155.858 23.9717 154.9 24.255 153.688 24.255ZM159.512 24V16.299C159.67 16.163 159.954 16.01 160.362 15.84C160.77 15.6587 161.234 15.5 161.756 15.364C162.288 15.2167 162.821 15.143 163.354 15.143C163.886 15.143 164.306 15.1827 164.612 15.262C164.918 15.3413 165.15 15.4433 165.309 15.568V17.421C165.116 17.3757 164.872 17.3417 164.578 17.319C164.283 17.2963 163.977 17.285 163.66 17.285C163.342 17.2737 163.042 17.2737 162.759 17.285C162.475 17.2963 162.237 17.319 162.045 17.353V24H159.512ZM170.037 24.255C169.176 24.255 168.411 24.0793 167.742 23.728C167.085 23.3653 166.569 22.8553 166.195 22.198C165.833 21.5293 165.651 20.736 165.651 19.818C165.651 18.322 166.02 17.166 166.756 16.35C167.504 15.5227 168.57 15.109 169.952 15.109C170.904 15.109 171.669 15.313 172.247 15.721C172.837 16.129 173.267 16.724 173.539 17.506C173.811 18.288 173.942 19.24 173.93 20.362H167.385L167.113 18.747H171.839L171.465 19.546C171.454 18.628 171.324 17.982 171.074 17.608C170.825 17.234 170.417 17.047 169.85 17.047C169.533 17.047 169.244 17.1263 168.983 17.285C168.734 17.4437 168.536 17.71 168.388 18.084C168.252 18.4467 168.184 18.951 168.184 19.597C168.184 20.413 168.377 21.042 168.762 21.484C169.159 21.926 169.788 22.147 170.649 22.147C170.967 22.147 171.278 22.113 171.584 22.045C171.902 21.9657 172.196 21.875 172.468 21.773C172.74 21.671 172.973 21.5803 173.165 21.501V23.677C172.757 23.847 172.298 23.983 171.788 24.085C171.29 24.1983 170.706 24.255 170.037 24.255ZM177.9 24.255C177.288 24.255 176.761 24.187 176.319 24.051C175.888 23.9263 175.48 23.7847 175.095 23.626V21.399C175.333 21.5577 175.599 21.722 175.894 21.892C176.189 22.0507 176.512 22.181 176.863 22.283C177.226 22.385 177.605 22.436 178.002 22.436C178.41 22.436 178.693 22.368 178.852 22.232C179.022 22.0847 179.107 21.909 179.107 21.705C179.107 21.5123 179.022 21.3593 178.852 21.246C178.682 21.1213 178.461 21.0193 178.189 20.94C177.917 20.8607 177.628 20.787 177.322 20.719C177.05 20.6623 176.778 20.5773 176.506 20.464C176.234 20.3393 175.99 20.175 175.775 19.971C175.56 19.767 175.384 19.5177 175.248 19.223C175.123 18.917 175.061 18.5487 175.061 18.118C175.061 17.5627 175.169 17.1037 175.384 16.741C175.599 16.367 175.883 16.0667 176.234 15.84C176.585 15.6133 176.965 15.4547 177.373 15.364C177.781 15.262 178.178 15.2167 178.563 15.228C179.266 15.2507 179.821 15.33 180.229 15.466C180.648 15.5907 181.028 15.755 181.368 15.959V17.948C180.983 17.7327 180.597 17.5343 180.212 17.353C179.838 17.1603 179.407 17.064 178.92 17.064C178.478 17.064 178.161 17.132 177.968 17.268C177.775 17.404 177.679 17.5853 177.679 17.812C177.679 18.0273 177.741 18.1973 177.866 18.322C178.002 18.4467 178.178 18.5487 178.393 18.628C178.608 18.696 178.846 18.764 179.107 18.832C179.39 18.9 179.679 18.985 179.974 19.087C180.28 19.1777 180.563 19.3137 180.824 19.495C181.096 19.665 181.311 19.9087 181.47 20.226C181.64 20.532 181.725 20.94 181.725 21.45C181.714 22.1413 181.527 22.6967 181.164 23.116C180.801 23.524 180.331 23.8187 179.753 24C179.186 24.17 178.569 24.255 177.9 24.255Z"
    fill="white" />
</svg>

================
File: src/images/clients/north-adventures/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="8" fill="#0A0A0A" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M16.8978 24.5245C18.0241 24.1337 18.9697 23.4994 19.7122 22.7122C20.4994 21.9698 21.1337 21.0241 21.5245 19.8978L24.5 8.5L13.1022 11.4755C11.9759 11.8663 11.0302 12.5006 10.2878 13.2878C9.50061 14.0302 8.8663 14.9759 8.47549 16.1022L5.5 27.5L16.8978 24.5245ZM18 15.5C18 14.9477 17.5523 14.5 17 14.5C16.4477 14.5 16 14.9477 16 15.5V17.6492L14.6713 15.9883C13.7855 14.8811 12 15.5075 12 16.9254V20.5C12 21.0523 12.4477 21.5 13 21.5C13.5523 21.5 14 21.0523 14 20.5V18.3508L15.3287 20.0117C16.2145 21.1189 18 20.4925 18 19.0746V15.5Z"
    fill="white" />
</svg>

================
File: src/images/clients/north-adventures/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect y="3" width="30" height="30" rx="8" fill="white" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M16.8978 24.5245C18.0241 24.1337 18.9697 23.4994 19.7122 22.7122C20.4994 21.9698 21.1337 21.0241 21.5245 19.8978L24.5 8.5L13.1022 11.4755C11.9759 11.8663 11.0302 12.5006 10.2878 13.2878C9.50061 14.0302 8.8663 14.9759 8.47549 16.1022L5.5 27.5L16.8978 24.5245ZM18 15.5C18 14.9477 17.5523 14.5 17 14.5C16.4477 14.5 16 14.9477 16 15.5V17.6492L14.6713 15.9883C13.7855 14.8811 12 15.5075 12 16.9254V20.5C12 21.0523 12.4477 21.5 13 21.5C13.5523 21.5 14 21.0523 14 20.5V18.3508L15.3287 20.0117C16.2145 21.1189 18 20.4925 18 19.0746V15.5Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/phobia/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M2.88146 6.03314C6.38837 3.0447 11.9315 3.58464 15 7C18.0685 3.58464 23.6116 3.0447 27.1185 6.03314C30.6254 9.02158 30.9808 14.2129 27.9123 17.6282L16.4877 30.344C15.6931 31.2285 14.3069 31.2285 13.5123 30.344L2.08773 17.6282C-0.98081 14.2129 -0.625447 9.02158 2.88146 6.03314Z"
    fill="#0A0A0A" />
  <path d="M11 17V17.5" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M19 17V17.5" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M12 23C12 23 12.75 22 15 22C17.25 22 18 23 18 23" stroke="white" stroke-linecap="round"
    stroke-linejoin="round" />
  <path
    d="M47.6494 12.2539C46.8792 13.0749 46.2656 13.4854 45.8086 13.4854C45.3008 13.4854 44.848 13.1595 44.4502 12.5078C44.0609 11.8646 43.8662 11.1833 43.8662 10.4639C43.8662 9.74447 44.0355 9.11816 44.374 8.58496C44.721 8.04329 45.1781 7.5651 45.7451 7.15039C46.3122 6.73568 46.9596 6.37598 47.6875 6.07129C48.4238 5.7666 49.1855 5.51693 49.9727 5.32227C51.5299 4.92448 52.8376 4.72559 53.8955 4.72559C54.9619 4.72559 55.8548 4.77214 56.5742 4.86523C57.2936 4.94987 57.9876 5.09375 58.6562 5.29688C59.3249 5.5 59.9554 5.76237 60.5479 6.08398C61.1403 6.39714 61.6608 6.77799 62.1094 7.22656C63.0573 8.19987 63.5312 9.41439 63.5312 10.8701C63.5312 12.3766 63.0573 13.9212 62.1094 15.5039C61.1953 17.0358 60.0104 18.3053 58.5547 19.3125C57.0059 20.3704 55.4443 20.8994 53.8701 20.8994C53.0999 20.8994 52.4229 20.709 51.8389 20.3281C51.5596 20.1335 51.4157 19.9092 51.4072 19.6553C51.3988 19.3929 51.403 19.1559 51.4199 18.9443C51.4876 18.0726 51.6781 17.0485 51.9912 15.8721C52.609 16.126 53.2692 16.2529 53.9717 16.2529C54.6742 16.2529 55.2581 16.181 55.7236 16.0371C56.1891 15.8848 56.6546 15.6732 57.1201 15.4023C57.5941 15.1315 58.0469 14.8099 58.4785 14.4375C58.9186 14.0651 59.3079 13.6504 59.6465 13.1934C60.3828 12.1947 60.751 11.2467 60.751 10.3496C60.751 9.45247 60.5436 8.74577 60.1289 8.22949C59.7227 7.70475 59.1979 7.28581 58.5547 6.97266C57.3444 6.37174 55.8506 6.07129 54.0732 6.07129C52.5413 6.07129 50.9756 6.38021 49.376 6.99805C48.2588 7.43815 47.4548 7.99674 46.9639 8.67383C46.71 9.0293 46.583 9.41862 46.583 9.8418C46.583 10.7982 46.9385 11.6022 47.6494 12.2539ZM42.9014 24.1621C43.333 23.7051 43.8408 22.9137 44.4248 21.7881C45.0088 20.654 45.5081 19.6722 45.9229 18.8428C46.3376 18.0133 46.7692 17.1628 47.2178 16.291C47.6748 15.4193 48.1403 14.556 48.6143 13.7012C49.0967 12.8379 49.5833 12.0254 50.0742 11.2637C51.166 9.58789 52.1647 8.41146 53.0703 7.73438C53.1719 7.64974 53.2819 7.60742 53.4004 7.60742C53.5273 7.60742 53.6543 7.62858 53.7812 7.6709C54.0605 7.764 54.306 7.90788 54.5176 8.10254C53.4596 8.94889 52.3678 11.1706 51.2422 14.7676C50.9206 15.7747 50.6074 16.7819 50.3027 17.7891C49.998 18.7878 49.7018 19.7526 49.4141 20.6836C49.1348 21.6146 48.8555 22.4355 48.5762 23.1465C47.9753 24.7122 47.4378 25.4951 46.9639 25.4951C45.4658 25.4951 44.2936 25.1904 43.4473 24.5811C43.2357 24.4287 43.0537 24.2891 42.9014 24.1621ZM64.7754 25C62.9303 25 62.0078 23.9463 62.0078 21.8389C62.0078 20.0531 62.9938 17.7679 64.9658 14.9834C66.7008 12.5374 68.5798 10.4893 70.6025 8.83887C71.8805 7.79785 72.8242 7.27734 73.4336 7.27734C73.8822 7.27734 74.2799 7.4847 74.627 7.89941C75.0078 8.33952 75.1982 8.79232 75.1982 9.25781C75.1982 9.71484 75.0967 10.1296 74.8936 10.502C74.6989 10.8659 74.4323 11.234 74.0938 11.6064C73.7637 11.9788 73.3701 12.347 72.9131 12.7109C72.4645 13.0749 71.9863 13.4176 71.4785 13.7393C70.429 14.4163 69.4007 14.9242 68.3936 15.2627C68.0296 16.0667 67.6699 16.9596 67.3145 17.9414C69.0241 16.401 71.0173 15.3262 73.2939 14.7168C74.0218 14.5221 74.6354 14.4248 75.1348 14.4248C75.6341 14.4248 75.9346 14.5137 76.0361 14.6914C76.1377 14.8607 76.1546 15.0892 76.0869 15.377C76.0277 15.6647 75.9092 15.9906 75.7314 16.3545C75.5537 16.7184 75.3717 17.0951 75.1855 17.4844C74.7201 18.4915 74.4873 19.2109 74.4873 19.6426C74.4873 20.5312 74.7708 20.9756 75.3379 20.9756C75.9642 20.9756 76.6624 20.6921 77.4326 20.125C78.1182 19.6087 78.7191 18.9655 79.2354 18.1953C79.6162 18.1699 79.8066 18.3265 79.8066 18.665C79.8066 18.9359 79.6289 19.376 79.2734 19.9854C78.9264 20.5863 78.5837 21.1068 78.2451 21.5469C77.9066 21.987 77.5257 22.4229 77.1025 22.8545C76.6794 23.2777 76.2266 23.6543 75.7441 23.9844C74.6608 24.7376 73.6198 25.1143 72.6211 25.1143C71.6224 25.1143 70.9115 24.8604 70.4883 24.3525C70.0736 23.8363 69.8662 23.0999 69.8662 22.1436C69.8662 20.9163 70.6068 19.3802 72.0879 17.5352C72.5449 16.9681 72.7438 16.6846 72.6846 16.6846C72.0075 16.6846 70.9792 17.1077 69.5996 17.9541C68.1354 18.8512 67.1029 19.7314 66.502 20.5947C66.1549 21.9574 65.9476 23.2565 65.8799 24.4922C65.8799 24.8307 65.5117 25 64.7754 25ZM69.1045 13.79C70.1963 13.2907 71.1357 12.694 71.9229 12C72.71 11.2891 73.1035 10.6755 73.1035 10.1592C73.1035 9.90527 73.0527 9.67253 72.9512 9.46094C72.8581 9.24089 72.7311 9.13086 72.5703 9.13086C72.418 9.13086 72.2191 9.24512 71.9736 9.47363C71.7282 9.70215 71.4531 10.0195 71.1484 10.4258C70.5052 11.2721 69.8239 12.3936 69.1045 13.79ZM81.6982 25.0635L81.4443 25.0762C80.1071 25.0762 79.0872 24.7461 78.3848 24.0859C77.7246 23.4681 77.3945 22.6302 77.3945 21.5723C77.3945 20.1165 77.9743 18.7243 79.1338 17.3955C80.2594 16.109 81.6263 15.2077 83.2344 14.6914C83.1836 14.3105 83.3232 13.9974 83.6533 13.752C83.8903 13.5742 84.2796 13.4854 84.8213 13.4854C85.3714 13.4854 85.9004 13.5361 86.4082 13.6377C86.916 13.7393 87.4281 13.9635 87.9443 14.3105C89.0615 15.0469 89.6201 16.0371 89.6201 17.2812C89.6201 18.627 89.2858 19.9049 88.6172 21.1152C90.0729 20.8021 91.3467 19.8288 92.4385 18.1953C92.8193 18.1699 93.0098 18.3265 93.0098 18.665C93.0098 18.8005 92.9674 18.9655 92.8828 19.1602C91.7318 21.8939 89.4297 23.7051 85.9766 24.5938C84.7409 24.9154 83.3359 25.0762 81.7617 25.0762L81.6982 25.0635ZM81.4824 19.5029C81.4824 20.4847 81.8929 20.9756 82.7139 20.9756C83.4079 20.9756 84.1061 20.5566 84.8086 19.7188C85.5449 18.847 85.9131 17.9626 85.9131 17.0654C85.9131 16.1514 85.473 15.5462 84.5928 15.25C83.0778 15.6732 82.1087 16.6211 81.6855 18.0938C81.5501 18.5423 81.4824 19.012 81.4824 19.5029ZM96.4502 14.7676C97.5843 14.099 98.6888 13.7646 99.7637 13.7646C101.473 13.7646 102.548 14.4163 102.988 15.7197C103.124 16.1175 103.191 16.6126 103.191 17.2051C103.191 18.4915 102.717 19.8161 101.77 21.1787C102.565 21.0687 103.335 20.7555 104.08 20.2393C104.825 19.7145 105.472 19.0332 106.022 18.1953C106.403 18.1699 106.594 18.3265 106.594 18.665C106.594 18.8005 106.551 18.9655 106.467 19.1602C104.859 23.0618 100.953 25.0127 94.749 25.0127H94.7236C93.5811 25.0127 92.6374 24.6784 91.8926 24.0098C91.0801 23.2734 90.6738 22.2451 90.6738 20.9248C90.6738 19.2998 92.1549 16.363 95.1172 12.1143C96.3698 10.3031 97.4404 8.88965 98.3291 7.87402C98.5745 7.59473 98.9046 7.45508 99.3193 7.45508C99.7764 7.45508 100.111 7.62435 100.322 7.96289C98.5788 10.6966 97.2881 12.9648 96.4502 14.7676ZM95.1426 18.2842C95.0326 18.8174 94.9775 19.266 94.9775 19.6299C94.9775 19.9938 95.0876 20.3027 95.3076 20.5566C95.5277 20.8021 95.8112 20.9248 96.1582 20.9248C96.5137 20.9248 96.8734 20.8656 97.2373 20.7471C97.6012 20.6201 97.9567 20.4508 98.3037 20.2393C98.6507 20.0277 98.9808 19.7822 99.2939 19.5029C99.6071 19.2152 99.8822 18.9062 100.119 18.5762C100.627 17.8652 100.881 17.1924 100.881 16.5576C100.881 16.1514 100.779 15.8424 100.576 15.6309C100.238 15.2754 99.8568 15.0977 99.4336 15.0977C99.0189 15.0977 98.5957 15.1865 98.1641 15.3643C97.7324 15.5335 97.3262 15.7663 96.9453 16.0625C96.1243 16.6803 95.5234 17.4209 95.1426 18.2842ZM114.363 10.9971C114.016 11.1663 113.64 11.2975 113.233 11.3906C112.836 11.4753 112.489 11.5176 112.192 11.5176C111.896 11.5176 111.63 11.4837 111.393 11.416C111.156 11.3398 110.944 11.234 110.758 11.0986C110.352 10.8024 110.148 10.4469 110.148 10.0322C110.148 9.61751 110.22 9.26628 110.364 8.97852C110.517 8.69076 110.732 8.44531 111.012 8.24219C111.613 7.80208 112.332 7.58203 113.17 7.58203C114.016 7.58203 114.63 7.75553 115.011 8.10254C115.4 8.44954 115.595 8.84733 115.595 9.2959C115.595 9.74447 115.476 10.0957 115.239 10.3496C115.002 10.6035 114.71 10.8193 114.363 10.9971ZM104.588 23.5273C104.41 23.1465 104.321 22.681 104.321 22.1309C104.321 21.5723 104.44 20.984 104.677 20.3662C104.922 19.7484 105.231 19.1348 105.604 18.5254C105.984 17.9076 106.408 17.3151 106.873 16.748C107.339 16.1725 107.8 15.6647 108.257 15.2246C109.264 14.2682 110.005 13.79 110.479 13.79C110.682 13.79 110.906 13.8789 111.151 14.0566C111.405 14.2259 111.566 14.3529 111.634 14.4375C110.356 15.8086 109.548 17.1331 109.209 18.4111C109.099 18.8005 109.044 19.1813 109.044 19.5537C109.044 19.9176 109.184 20.2477 109.463 20.5439C109.742 20.8317 110.089 20.9756 110.504 20.9756C110.919 20.9756 111.304 20.8994 111.659 20.7471C112.023 20.5863 112.379 20.3789 112.726 20.125C113.411 19.6087 114.012 18.9655 114.528 18.1953C114.909 18.1699 115.1 18.3265 115.1 18.665C115.1 18.9443 114.922 19.3844 114.566 19.9854C114.219 20.5863 113.872 21.1068 113.525 21.5469C113.178 21.9785 112.781 22.4059 112.332 22.8291C111.892 23.2523 111.41 23.6289 110.885 23.959C109.708 24.7038 108.498 25.0762 107.254 25.0762C105.942 25.0762 105.053 24.5599 104.588 23.5273ZM120.406 22.9688C119.247 24.3229 117.833 25 116.166 25C115.108 25 114.262 24.6826 113.627 24.0479C113.001 23.4215 112.688 22.5964 112.688 21.5723C112.688 20.2773 113.195 19.0205 114.211 17.8018C115.193 16.6169 116.479 15.652 118.07 14.9072C119.721 14.137 121.426 13.752 123.187 13.752C123.855 13.752 124.333 13.8577 124.621 14.0693C124.85 13.7985 125.053 13.6419 125.23 13.5996C125.417 13.5488 125.561 13.5234 125.662 13.5234C125.984 13.5234 126.326 13.57 126.69 13.6631C126.657 13.7731 126.585 13.9635 126.475 14.2344C126.365 14.4967 126.242 14.8099 126.106 15.1738C125.971 15.5378 125.827 15.9355 125.675 16.3672C125.125 17.9076 124.85 19.0628 124.85 19.833C124.85 20.5947 125.091 20.9756 125.573 20.9756C126.2 20.9756 126.898 20.6921 127.668 20.125C128.354 19.6087 128.954 18.9655 129.471 18.1953C129.852 18.1699 130.042 18.3265 130.042 18.665C130.042 18.9528 129.864 19.3929 129.509 19.9854C129.162 20.5778 128.823 21.0898 128.493 21.5215C128.163 21.9531 127.795 22.3763 127.389 22.791C126.982 23.2057 126.551 23.5781 126.094 23.9082C125.07 24.6361 124.071 25 123.098 25C121.862 25 121.033 24.6276 120.609 23.8828C120.474 23.6543 120.406 23.4554 120.406 23.2861C120.406 23.1084 120.406 23.0026 120.406 22.9688ZM116.775 19.5029C116.775 20.4847 117.186 20.9756 118.007 20.9756C118.912 20.9756 119.979 20.2435 121.206 18.7793C121.858 18.0007 122.425 17.2559 122.907 16.5449C123.398 15.834 123.771 15.2923 124.024 14.9199C121.909 14.9368 120.152 15.4193 118.756 16.3672C117.436 17.2643 116.775 18.3096 116.775 19.5029Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/phobia/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M2.88146 6.03314C6.38837 3.0447 11.9315 3.58464 15 7C18.0685 3.58464 23.6116 3.0447 27.1185 6.03314C30.6254 9.02158 30.9808 14.2129 27.9123 17.6282L16.4877 30.344C15.6931 31.2285 14.3069 31.2285 13.5123 30.344L2.08773 17.6282C-0.98081 14.2129 -0.625447 9.02158 2.88146 6.03314Z"
    fill="white" />
  <path d="M11 17V17.5" stroke="#0A0A0A" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M19 17V17.5" stroke="#0A0A0A" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M12 23C12 23 12.75 22 15 22C17.25 22 18 23 18 23" stroke="#0A0A0A" stroke-linecap="round"
    stroke-linejoin="round" />
  <path
    d="M47.6494 12.2539C46.8792 13.0749 46.2656 13.4854 45.8086 13.4854C45.3008 13.4854 44.848 13.1595 44.4502 12.5078C44.0609 11.8646 43.8662 11.1833 43.8662 10.4639C43.8662 9.74447 44.0355 9.11816 44.374 8.58496C44.721 8.04329 45.1781 7.5651 45.7451 7.15039C46.3122 6.73568 46.9596 6.37598 47.6875 6.07129C48.4238 5.7666 49.1855 5.51693 49.9727 5.32227C51.5299 4.92448 52.8376 4.72559 53.8955 4.72559C54.9619 4.72559 55.8548 4.77214 56.5742 4.86523C57.2936 4.94987 57.9876 5.09375 58.6562 5.29688C59.3249 5.5 59.9554 5.76237 60.5479 6.08398C61.1403 6.39714 61.6608 6.77799 62.1094 7.22656C63.0573 8.19987 63.5312 9.41439 63.5312 10.8701C63.5312 12.3766 63.0573 13.9212 62.1094 15.5039C61.1953 17.0358 60.0104 18.3053 58.5547 19.3125C57.0059 20.3704 55.4443 20.8994 53.8701 20.8994C53.0999 20.8994 52.4229 20.709 51.8389 20.3281C51.5596 20.1335 51.4157 19.9092 51.4072 19.6553C51.3988 19.3929 51.403 19.1559 51.4199 18.9443C51.4876 18.0726 51.6781 17.0485 51.9912 15.8721C52.609 16.126 53.2692 16.2529 53.9717 16.2529C54.6742 16.2529 55.2581 16.181 55.7236 16.0371C56.1891 15.8848 56.6546 15.6732 57.1201 15.4023C57.5941 15.1315 58.0469 14.8099 58.4785 14.4375C58.9186 14.0651 59.3079 13.6504 59.6465 13.1934C60.3828 12.1947 60.751 11.2467 60.751 10.3496C60.751 9.45247 60.5436 8.74577 60.1289 8.22949C59.7227 7.70475 59.1979 7.28581 58.5547 6.97266C57.3444 6.37174 55.8506 6.07129 54.0732 6.07129C52.5413 6.07129 50.9756 6.38021 49.376 6.99805C48.2588 7.43815 47.4548 7.99674 46.9639 8.67383C46.71 9.0293 46.583 9.41862 46.583 9.8418C46.583 10.7982 46.9385 11.6022 47.6494 12.2539ZM42.9014 24.1621C43.333 23.7051 43.8408 22.9137 44.4248 21.7881C45.0088 20.654 45.5081 19.6722 45.9229 18.8428C46.3376 18.0133 46.7692 17.1628 47.2178 16.291C47.6748 15.4193 48.1403 14.556 48.6143 13.7012C49.0967 12.8379 49.5833 12.0254 50.0742 11.2637C51.166 9.58789 52.1647 8.41146 53.0703 7.73438C53.1719 7.64974 53.2819 7.60742 53.4004 7.60742C53.5273 7.60742 53.6543 7.62858 53.7812 7.6709C54.0605 7.764 54.306 7.90788 54.5176 8.10254C53.4596 8.94889 52.3678 11.1706 51.2422 14.7676C50.9206 15.7747 50.6074 16.7819 50.3027 17.7891C49.998 18.7878 49.7018 19.7526 49.4141 20.6836C49.1348 21.6146 48.8555 22.4355 48.5762 23.1465C47.9753 24.7122 47.4378 25.4951 46.9639 25.4951C45.4658 25.4951 44.2936 25.1904 43.4473 24.5811C43.2357 24.4287 43.0537 24.2891 42.9014 24.1621ZM64.7754 25C62.9303 25 62.0078 23.9463 62.0078 21.8389C62.0078 20.0531 62.9938 17.7679 64.9658 14.9834C66.7008 12.5374 68.5798 10.4893 70.6025 8.83887C71.8805 7.79785 72.8242 7.27734 73.4336 7.27734C73.8822 7.27734 74.2799 7.4847 74.627 7.89941C75.0078 8.33952 75.1982 8.79232 75.1982 9.25781C75.1982 9.71484 75.0967 10.1296 74.8936 10.502C74.6989 10.8659 74.4323 11.234 74.0938 11.6064C73.7637 11.9788 73.3701 12.347 72.9131 12.7109C72.4645 13.0749 71.9863 13.4176 71.4785 13.7393C70.429 14.4163 69.4007 14.9242 68.3936 15.2627C68.0296 16.0667 67.6699 16.9596 67.3145 17.9414C69.0241 16.401 71.0173 15.3262 73.2939 14.7168C74.0218 14.5221 74.6354 14.4248 75.1348 14.4248C75.6341 14.4248 75.9346 14.5137 76.0361 14.6914C76.1377 14.8607 76.1546 15.0892 76.0869 15.377C76.0277 15.6647 75.9092 15.9906 75.7314 16.3545C75.5537 16.7184 75.3717 17.0951 75.1855 17.4844C74.7201 18.4915 74.4873 19.2109 74.4873 19.6426C74.4873 20.5312 74.7708 20.9756 75.3379 20.9756C75.9642 20.9756 76.6624 20.6921 77.4326 20.125C78.1182 19.6087 78.7191 18.9655 79.2354 18.1953C79.6162 18.1699 79.8066 18.3265 79.8066 18.665C79.8066 18.9359 79.6289 19.376 79.2734 19.9854C78.9264 20.5863 78.5837 21.1068 78.2451 21.5469C77.9066 21.987 77.5257 22.4229 77.1025 22.8545C76.6794 23.2777 76.2266 23.6543 75.7441 23.9844C74.6608 24.7376 73.6198 25.1143 72.6211 25.1143C71.6224 25.1143 70.9115 24.8604 70.4883 24.3525C70.0736 23.8363 69.8662 23.0999 69.8662 22.1436C69.8662 20.9163 70.6068 19.3802 72.0879 17.5352C72.5449 16.9681 72.7438 16.6846 72.6846 16.6846C72.0075 16.6846 70.9792 17.1077 69.5996 17.9541C68.1354 18.8512 67.1029 19.7314 66.502 20.5947C66.1549 21.9574 65.9476 23.2565 65.8799 24.4922C65.8799 24.8307 65.5117 25 64.7754 25ZM69.1045 13.79C70.1963 13.2907 71.1357 12.694 71.9229 12C72.71 11.2891 73.1035 10.6755 73.1035 10.1592C73.1035 9.90527 73.0527 9.67253 72.9512 9.46094C72.8581 9.24089 72.7311 9.13086 72.5703 9.13086C72.418 9.13086 72.2191 9.24512 71.9736 9.47363C71.7282 9.70215 71.4531 10.0195 71.1484 10.4258C70.5052 11.2721 69.8239 12.3936 69.1045 13.79ZM81.6982 25.0635L81.4443 25.0762C80.1071 25.0762 79.0872 24.7461 78.3848 24.0859C77.7246 23.4681 77.3945 22.6302 77.3945 21.5723C77.3945 20.1165 77.9743 18.7243 79.1338 17.3955C80.2594 16.109 81.6263 15.2077 83.2344 14.6914C83.1836 14.3105 83.3232 13.9974 83.6533 13.752C83.8903 13.5742 84.2796 13.4854 84.8213 13.4854C85.3714 13.4854 85.9004 13.5361 86.4082 13.6377C86.916 13.7393 87.4281 13.9635 87.9443 14.3105C89.0615 15.0469 89.6201 16.0371 89.6201 17.2812C89.6201 18.627 89.2858 19.9049 88.6172 21.1152C90.0729 20.8021 91.3467 19.8288 92.4385 18.1953C92.8193 18.1699 93.0098 18.3265 93.0098 18.665C93.0098 18.8005 92.9674 18.9655 92.8828 19.1602C91.7318 21.8939 89.4297 23.7051 85.9766 24.5938C84.7409 24.9154 83.3359 25.0762 81.7617 25.0762L81.6982 25.0635ZM81.4824 19.5029C81.4824 20.4847 81.8929 20.9756 82.7139 20.9756C83.4079 20.9756 84.1061 20.5566 84.8086 19.7188C85.5449 18.847 85.9131 17.9626 85.9131 17.0654C85.9131 16.1514 85.473 15.5462 84.5928 15.25C83.0778 15.6732 82.1087 16.6211 81.6855 18.0938C81.5501 18.5423 81.4824 19.012 81.4824 19.5029ZM96.4502 14.7676C97.5843 14.099 98.6888 13.7646 99.7637 13.7646C101.473 13.7646 102.548 14.4163 102.988 15.7197C103.124 16.1175 103.191 16.6126 103.191 17.2051C103.191 18.4915 102.717 19.8161 101.77 21.1787C102.565 21.0687 103.335 20.7555 104.08 20.2393C104.825 19.7145 105.472 19.0332 106.022 18.1953C106.403 18.1699 106.594 18.3265 106.594 18.665C106.594 18.8005 106.551 18.9655 106.467 19.1602C104.859 23.0618 100.953 25.0127 94.749 25.0127H94.7236C93.5811 25.0127 92.6374 24.6784 91.8926 24.0098C91.0801 23.2734 90.6738 22.2451 90.6738 20.9248C90.6738 19.2998 92.1549 16.363 95.1172 12.1143C96.3698 10.3031 97.4404 8.88965 98.3291 7.87402C98.5745 7.59473 98.9046 7.45508 99.3193 7.45508C99.7764 7.45508 100.111 7.62435 100.322 7.96289C98.5788 10.6966 97.2881 12.9648 96.4502 14.7676ZM95.1426 18.2842C95.0326 18.8174 94.9775 19.266 94.9775 19.6299C94.9775 19.9938 95.0876 20.3027 95.3076 20.5566C95.5277 20.8021 95.8112 20.9248 96.1582 20.9248C96.5137 20.9248 96.8734 20.8656 97.2373 20.7471C97.6012 20.6201 97.9567 20.4508 98.3037 20.2393C98.6507 20.0277 98.9808 19.7822 99.2939 19.5029C99.6071 19.2152 99.8822 18.9062 100.119 18.5762C100.627 17.8652 100.881 17.1924 100.881 16.5576C100.881 16.1514 100.779 15.8424 100.576 15.6309C100.238 15.2754 99.8568 15.0977 99.4336 15.0977C99.0189 15.0977 98.5957 15.1865 98.1641 15.3643C97.7324 15.5335 97.3262 15.7663 96.9453 16.0625C96.1243 16.6803 95.5234 17.4209 95.1426 18.2842ZM114.363 10.9971C114.016 11.1663 113.64 11.2975 113.233 11.3906C112.836 11.4753 112.489 11.5176 112.192 11.5176C111.896 11.5176 111.63 11.4837 111.393 11.416C111.156 11.3398 110.944 11.234 110.758 11.0986C110.352 10.8024 110.148 10.4469 110.148 10.0322C110.148 9.61751 110.22 9.26628 110.364 8.97852C110.517 8.69076 110.732 8.44531 111.012 8.24219C111.613 7.80208 112.332 7.58203 113.17 7.58203C114.016 7.58203 114.63 7.75553 115.011 8.10254C115.4 8.44954 115.595 8.84733 115.595 9.2959C115.595 9.74447 115.476 10.0957 115.239 10.3496C115.002 10.6035 114.71 10.8193 114.363 10.9971ZM104.588 23.5273C104.41 23.1465 104.321 22.681 104.321 22.1309C104.321 21.5723 104.44 20.984 104.677 20.3662C104.922 19.7484 105.231 19.1348 105.604 18.5254C105.984 17.9076 106.408 17.3151 106.873 16.748C107.339 16.1725 107.8 15.6647 108.257 15.2246C109.264 14.2682 110.005 13.79 110.479 13.79C110.682 13.79 110.906 13.8789 111.151 14.0566C111.405 14.2259 111.566 14.3529 111.634 14.4375C110.356 15.8086 109.548 17.1331 109.209 18.4111C109.099 18.8005 109.044 19.1813 109.044 19.5537C109.044 19.9176 109.184 20.2477 109.463 20.5439C109.742 20.8317 110.089 20.9756 110.504 20.9756C110.919 20.9756 111.304 20.8994 111.659 20.7471C112.023 20.5863 112.379 20.3789 112.726 20.125C113.411 19.6087 114.012 18.9655 114.528 18.1953C114.909 18.1699 115.1 18.3265 115.1 18.665C115.1 18.9443 114.922 19.3844 114.566 19.9854C114.219 20.5863 113.872 21.1068 113.525 21.5469C113.178 21.9785 112.781 22.4059 112.332 22.8291C111.892 23.2523 111.41 23.6289 110.885 23.959C109.708 24.7038 108.498 25.0762 107.254 25.0762C105.942 25.0762 105.053 24.5599 104.588 23.5273ZM120.406 22.9688C119.247 24.3229 117.833 25 116.166 25C115.108 25 114.262 24.6826 113.627 24.0479C113.001 23.4215 112.688 22.5964 112.688 21.5723C112.688 20.2773 113.195 19.0205 114.211 17.8018C115.193 16.6169 116.479 15.652 118.07 14.9072C119.721 14.137 121.426 13.752 123.187 13.752C123.855 13.752 124.333 13.8577 124.621 14.0693C124.85 13.7985 125.053 13.6419 125.23 13.5996C125.417 13.5488 125.561 13.5234 125.662 13.5234C125.984 13.5234 126.326 13.57 126.69 13.6631C126.657 13.7731 126.585 13.9635 126.475 14.2344C126.365 14.4967 126.242 14.8099 126.106 15.1738C125.971 15.5378 125.827 15.9355 125.675 16.3672C125.125 17.9076 124.85 19.0628 124.85 19.833C124.85 20.5947 125.091 20.9756 125.573 20.9756C126.2 20.9756 126.898 20.6921 127.668 20.125C128.354 19.6087 128.954 18.9655 129.471 18.1953C129.852 18.1699 130.042 18.3265 130.042 18.665C130.042 18.9528 129.864 19.3929 129.509 19.9854C129.162 20.5778 128.823 21.0898 128.493 21.5215C128.163 21.9531 127.795 22.3763 127.389 22.791C126.982 23.2057 126.551 23.5781 126.094 23.9082C125.07 24.6361 124.071 25 123.098 25C121.862 25 121.033 24.6276 120.609 23.8828C120.474 23.6543 120.406 23.4554 120.406 23.2861C120.406 23.1084 120.406 23.0026 120.406 22.9688ZM116.775 19.5029C116.775 20.4847 117.186 20.9756 118.007 20.9756C118.912 20.9756 119.979 20.2435 121.206 18.7793C121.858 18.0007 122.425 17.2559 122.907 16.5449C123.398 15.834 123.771 15.2923 124.024 14.9199C121.909 14.9368 120.152 15.4193 118.756 16.3672C117.436 17.2643 116.775 18.3096 116.775 19.5029Z"
    fill="white" />
</svg>

================
File: src/images/clients/phobia/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M2.88146 6.03314C6.38837 3.0447 11.9315 3.58464 15 7C18.0685 3.58464 23.6116 3.0447 27.1185 6.03314C30.6254 9.02158 30.9808 14.2129 27.9123 17.6282L16.4877 30.344C15.6931 31.2285 14.3069 31.2285 13.5123 30.344L2.08773 17.6282C-0.98081 14.2129 -0.625447 9.02158 2.88146 6.03314Z"
    fill="#0A0A0A" />
  <path d="M11 17V17.5" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M19 17V17.5" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M12 23C12 23 12.75 22 15 22C17.25 22 18 23 18 23" stroke="white" stroke-linecap="round"
    stroke-linejoin="round" />
</svg>

================
File: src/images/clients/phobia/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M2.88146 6.03314C6.38837 3.0447 11.9315 3.58464 15 7C18.0685 3.58464 23.6116 3.0447 27.1185 6.03314C30.6254 9.02158 30.9808 14.2129 27.9123 17.6282L16.4877 30.344C15.6931 31.2285 14.3069 31.2285 13.5123 30.344L2.08773 17.6282C-0.98081 14.2129 -0.625447 9.02158 2.88146 6.03314Z"
    fill="white" />
  <path d="M11 17V17.5" stroke="#0A0A0A" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M19 17V17.5" stroke="#0A0A0A" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <path d="M12 23C12 23 12.75 22 15 22C17.25 22 18 23 18 23" stroke="#0A0A0A" stroke-linecap="round"
    stroke-linejoin="round" />
</svg>

================
File: src/images/clients/unseal/logo-dark.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M1 20C1 26.6274 6.37258 32 13 32H29V4H1V20Z" fill="#0A0A0A" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M11.5 10.5V21.5L22.5 21.5V25.5H11.5C9.29086 25.5 7.5 23.7091 7.5 21.5V10.5H11.5ZM22.5 10.5H18.5V15.5C18.5 16.6046 19.3954 17.5 20.5 17.5C21.6046 17.5 22.5 16.6046 22.5 15.5V10.5Z"
    fill="white" />
  <path
    d="M43.5791 10.252H46.7588V18.7812C46.7588 20.1348 46.7982 21.012 46.877 21.4131C47.013 22.0576 47.3353 22.5768 47.8438 22.9707C48.3594 23.3574 49.0612 23.5508 49.9492 23.5508C50.8516 23.5508 51.5319 23.3682 51.9902 23.0029C52.4486 22.6305 52.7243 22.1758 52.8174 21.6387C52.9105 21.1016 52.957 20.21 52.957 18.9639V10.252H56.1367V18.5234C56.1367 20.4141 56.0508 21.7497 55.8789 22.5303C55.707 23.3109 55.3883 23.9697 54.9229 24.5068C54.4645 25.0439 53.8486 25.4736 53.0752 25.7959C52.3018 26.111 51.292 26.2686 50.0459 26.2686C48.542 26.2686 47.3997 26.0967 46.6191 25.7529C45.8457 25.402 45.2334 24.9508 44.7822 24.3994C44.3311 23.8408 44.0339 23.2572 43.8906 22.6484C43.6829 21.7461 43.5791 20.4141 43.5791 18.6523V10.252ZM69.1945 26H66.1759V20.1777C66.1759 18.946 66.1115 18.151 65.9826 17.793C65.8537 17.4277 65.6424 17.1449 65.3488 16.9443C65.0623 16.7438 64.715 16.6436 64.3068 16.6436C63.784 16.6436 63.3149 16.7868 62.8996 17.0732C62.4842 17.3597 62.1977 17.7393 62.0402 18.2119C61.8898 18.6846 61.8146 19.5583 61.8146 20.833V26H58.7961V14.5918H61.5998V16.2676C62.5952 14.9785 63.8485 14.334 65.3595 14.334C66.0255 14.334 66.6343 14.4557 67.1857 14.6992C67.7371 14.9355 68.1525 15.2399 68.4318 15.6123C68.7183 15.9847 68.9152 16.4072 69.0226 16.8799C69.1372 17.3525 69.1945 18.0293 69.1945 18.9102V26ZM70.5433 22.7451L73.5726 22.2832C73.7015 22.8704 73.9629 23.318 74.3568 23.626C74.7506 23.9268 75.3021 24.0771 76.0111 24.0771C76.7917 24.0771 77.3789 23.9339 77.7728 23.6475C78.0377 23.4469 78.1702 23.1784 78.1702 22.8418C78.1702 22.6126 78.0986 22.4229 77.9554 22.2725C77.805 22.1292 77.4684 21.9967 76.9456 21.875C74.5107 21.3379 72.9674 20.8473 72.3157 20.4033C71.4134 19.7874 70.9622 18.9316 70.9622 17.8359C70.9622 16.8477 71.3525 16.0169 72.1331 15.3438C72.9137 14.6706 74.124 14.334 75.764 14.334C77.3252 14.334 78.4853 14.5882 79.2445 15.0967C80.0036 15.6051 80.5264 16.3571 80.8128 17.3525L77.9661 17.8789C77.8444 17.4349 77.6116 17.0947 77.2679 16.8584C76.9313 16.6221 76.4479 16.5039 75.8177 16.5039C75.0228 16.5039 74.4534 16.6149 74.1097 16.8369C73.8805 16.9945 73.7659 17.1986 73.7659 17.4492C73.7659 17.6641 73.8662 17.8467 74.0667 17.9971C74.3389 18.1976 75.277 18.4805 76.8812 18.8457C78.4925 19.2109 79.6168 19.6585 80.2542 20.1885C80.8844 20.7256 81.1995 21.474 81.1995 22.4336C81.1995 23.4792 80.7627 24.3779 79.889 25.1299C79.0153 25.8818 77.7226 26.2578 76.0111 26.2578C74.457 26.2578 73.2252 25.9427 72.3157 25.3125C71.4134 24.6823 70.8226 23.8265 70.5433 22.7451ZM89.7993 22.3691L92.8071 22.874C92.4204 23.9769 91.8081 24.8184 90.9702 25.3984C90.1395 25.9714 89.0975 26.2578 87.8442 26.2578C85.8605 26.2578 84.3924 25.6097 83.4399 24.3135C82.688 23.2751 82.312 21.9645 82.312 20.3818C82.312 18.4912 82.8061 17.0124 83.7944 15.9453C84.7827 14.8711 86.0324 14.334 87.5434 14.334C89.2407 14.334 90.5799 14.8962 91.561 16.0205C92.5421 17.1377 93.0112 18.8529 92.9682 21.166H85.4057C85.4272 22.0612 85.6707 22.7594 86.1362 23.2607C86.6017 23.7549 87.1818 24.002 87.8764 24.002C88.3491 24.002 88.7466 23.873 89.0688 23.6152C89.3911 23.3574 89.6346 22.9421 89.7993 22.3691ZM89.9712 19.3184C89.9497 18.4447 89.7241 17.7822 89.2944 17.3311C88.8647 16.8727 88.3419 16.6436 87.7261 16.6436C87.0672 16.6436 86.5229 16.8835 86.0932 17.3633C85.6636 17.8431 85.4523 18.4948 85.4595 19.3184H89.9712ZM97.0348 18.0723L94.2955 17.5781C94.6035 16.4753 95.1334 15.6589 95.8854 15.1289C96.6373 14.599 97.7545 14.334 99.237 14.334C100.583 14.334 101.586 14.4951 102.245 14.8174C102.904 15.1325 103.366 15.5371 103.631 16.0312C103.903 16.5182 104.039 17.417 104.039 18.7275L104.006 22.251C104.006 23.2536 104.053 23.9948 104.146 24.4746C104.246 24.9473 104.429 25.4557 104.694 26H101.708C101.629 25.7995 101.532 25.5023 101.418 25.1084C101.367 24.9294 101.332 24.8112 101.31 24.7539C100.795 25.2552 100.243 25.6312 99.6559 25.8818C99.0687 26.1325 98.442 26.2578 97.776 26.2578C96.6015 26.2578 95.6741 25.9391 94.9938 25.3018C94.3206 24.6644 93.984 23.8587 93.984 22.8848C93.984 22.2402 94.138 21.6673 94.4459 21.166C94.7539 20.6576 95.1836 20.2708 95.735 20.0059C96.2936 19.7337 97.0957 19.4974 98.1413 19.2969C99.5521 19.0319 100.53 18.7848 101.074 18.5557V18.2549C101.074 17.6748 100.931 17.263 100.644 17.0195C100.358 16.7689 99.817 16.6436 99.0221 16.6436C98.485 16.6436 98.0661 16.751 97.7653 16.9658C97.4645 17.1735 97.221 17.5423 97.0348 18.0723ZM101.074 20.5215C100.687 20.6504 100.075 20.8044 99.237 20.9834C98.3991 21.1624 97.8512 21.3379 97.5934 21.5098C97.1995 21.7891 97.0026 22.1436 97.0026 22.5732C97.0026 22.9958 97.1601 23.361 97.4752 23.6689C97.7903 23.9769 98.1914 24.1309 98.6784 24.1309C99.2226 24.1309 99.7418 23.9518 100.236 23.5938C100.601 23.3216 100.841 22.9886 100.956 22.5947C101.034 22.3369 101.074 21.8464 101.074 21.123V20.5215ZM106.365 26V10.252H109.384V26H106.365Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/clients/unseal/logo-light.svg
================
<svg width="184" height="36" viewBox="0 0 184 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M1 20C1 26.6274 6.37258 32 13 32H29V4H1V20Z" fill="white" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M11.5 10.5V21.5L22.5 21.5V25.5H11.5C9.29086 25.5 7.5 23.7091 7.5 21.5V10.5H11.5ZM22.5 10.5H18.5V15.5C18.5 16.6046 19.3954 17.5 20.5 17.5C21.6046 17.5 22.5 16.6046 22.5 15.5V10.5Z"
    fill="#0A0A0A" />
  <path
    d="M43.5791 10.252H46.7588V18.7812C46.7588 20.1348 46.7982 21.012 46.877 21.4131C47.013 22.0576 47.3353 22.5768 47.8438 22.9707C48.3594 23.3574 49.0612 23.5508 49.9492 23.5508C50.8516 23.5508 51.5319 23.3682 51.9902 23.0029C52.4486 22.6305 52.7243 22.1758 52.8174 21.6387C52.9105 21.1016 52.957 20.21 52.957 18.9639V10.252H56.1367V18.5234C56.1367 20.4141 56.0508 21.7497 55.8789 22.5303C55.707 23.3109 55.3883 23.9697 54.9229 24.5068C54.4645 25.0439 53.8486 25.4736 53.0752 25.7959C52.3018 26.111 51.292 26.2686 50.0459 26.2686C48.542 26.2686 47.3997 26.0967 46.6191 25.7529C45.8457 25.402 45.2334 24.9508 44.7822 24.3994C44.3311 23.8408 44.0339 23.2572 43.8906 22.6484C43.6829 21.7461 43.5791 20.4141 43.5791 18.6523V10.252ZM69.1945 26H66.1759V20.1777C66.1759 18.946 66.1115 18.151 65.9826 17.793C65.8537 17.4277 65.6424 17.1449 65.3488 16.9443C65.0623 16.7438 64.715 16.6436 64.3068 16.6436C63.784 16.6436 63.3149 16.7868 62.8996 17.0732C62.4842 17.3597 62.1977 17.7393 62.0402 18.2119C61.8898 18.6846 61.8146 19.5583 61.8146 20.833V26H58.7961V14.5918H61.5998V16.2676C62.5952 14.9785 63.8485 14.334 65.3595 14.334C66.0255 14.334 66.6343 14.4557 67.1857 14.6992C67.7371 14.9355 68.1525 15.2399 68.4318 15.6123C68.7183 15.9847 68.9152 16.4072 69.0226 16.8799C69.1372 17.3525 69.1945 18.0293 69.1945 18.9102V26ZM70.5433 22.7451L73.5726 22.2832C73.7015 22.8704 73.9629 23.318 74.3568 23.626C74.7506 23.9268 75.3021 24.0771 76.0111 24.0771C76.7917 24.0771 77.3789 23.9339 77.7728 23.6475C78.0377 23.4469 78.1702 23.1784 78.1702 22.8418C78.1702 22.6126 78.0986 22.4229 77.9554 22.2725C77.805 22.1292 77.4684 21.9967 76.9456 21.875C74.5107 21.3379 72.9674 20.8473 72.3157 20.4033C71.4134 19.7874 70.9622 18.9316 70.9622 17.8359C70.9622 16.8477 71.3525 16.0169 72.1331 15.3438C72.9137 14.6706 74.124 14.334 75.764 14.334C77.3252 14.334 78.4853 14.5882 79.2445 15.0967C80.0036 15.6051 80.5264 16.3571 80.8128 17.3525L77.9661 17.8789C77.8444 17.4349 77.6116 17.0947 77.2679 16.8584C76.9313 16.6221 76.4479 16.5039 75.8177 16.5039C75.0228 16.5039 74.4534 16.6149 74.1097 16.8369C73.8805 16.9945 73.7659 17.1986 73.7659 17.4492C73.7659 17.6641 73.8662 17.8467 74.0667 17.9971C74.3389 18.1976 75.277 18.4805 76.8812 18.8457C78.4925 19.2109 79.6168 19.6585 80.2542 20.1885C80.8844 20.7256 81.1995 21.474 81.1995 22.4336C81.1995 23.4792 80.7627 24.3779 79.889 25.1299C79.0153 25.8818 77.7226 26.2578 76.0111 26.2578C74.457 26.2578 73.2252 25.9427 72.3157 25.3125C71.4134 24.6823 70.8226 23.8265 70.5433 22.7451ZM89.7993 22.3691L92.8071 22.874C92.4204 23.9769 91.8081 24.8184 90.9702 25.3984C90.1395 25.9714 89.0975 26.2578 87.8442 26.2578C85.8605 26.2578 84.3924 25.6097 83.4399 24.3135C82.688 23.2751 82.312 21.9645 82.312 20.3818C82.312 18.4912 82.8061 17.0124 83.7944 15.9453C84.7827 14.8711 86.0324 14.334 87.5434 14.334C89.2407 14.334 90.5799 14.8962 91.561 16.0205C92.5421 17.1377 93.0112 18.8529 92.9682 21.166H85.4057C85.4272 22.0612 85.6707 22.7594 86.1362 23.2607C86.6017 23.7549 87.1818 24.002 87.8764 24.002C88.3491 24.002 88.7466 23.873 89.0688 23.6152C89.3911 23.3574 89.6346 22.9421 89.7993 22.3691ZM89.9712 19.3184C89.9497 18.4447 89.7241 17.7822 89.2944 17.3311C88.8647 16.8727 88.3419 16.6436 87.7261 16.6436C87.0672 16.6436 86.5229 16.8835 86.0932 17.3633C85.6636 17.8431 85.4523 18.4948 85.4595 19.3184H89.9712ZM97.0348 18.0723L94.2955 17.5781C94.6035 16.4753 95.1334 15.6589 95.8854 15.1289C96.6373 14.599 97.7545 14.334 99.237 14.334C100.583 14.334 101.586 14.4951 102.245 14.8174C102.904 15.1325 103.366 15.5371 103.631 16.0312C103.903 16.5182 104.039 17.417 104.039 18.7275L104.006 22.251C104.006 23.2536 104.053 23.9948 104.146 24.4746C104.246 24.9473 104.429 25.4557 104.694 26H101.708C101.629 25.7995 101.532 25.5023 101.418 25.1084C101.367 24.9294 101.332 24.8112 101.31 24.7539C100.795 25.2552 100.243 25.6312 99.6559 25.8818C99.0687 26.1325 98.442 26.2578 97.776 26.2578C96.6015 26.2578 95.6741 25.9391 94.9938 25.3018C94.3206 24.6644 93.984 23.8587 93.984 22.8848C93.984 22.2402 94.138 21.6673 94.4459 21.166C94.7539 20.6576 95.1836 20.2708 95.735 20.0059C96.2936 19.7337 97.0957 19.4974 98.1413 19.2969C99.5521 19.0319 100.53 18.7848 101.074 18.5557V18.2549C101.074 17.6748 100.931 17.263 100.644 17.0195C100.358 16.7689 99.817 16.6436 99.0221 16.6436C98.485 16.6436 98.0661 16.751 97.7653 16.9658C97.4645 17.1735 97.221 17.5423 97.0348 18.0723ZM101.074 20.5215C100.687 20.6504 100.075 20.8044 99.237 20.9834C98.3991 21.1624 97.8512 21.3379 97.5934 21.5098C97.1995 21.7891 97.0026 22.1436 97.0026 22.5732C97.0026 22.9958 97.1601 23.361 97.4752 23.6689C97.7903 23.9769 98.1914 24.1309 98.6784 24.1309C99.2226 24.1309 99.7418 23.9518 100.236 23.5938C100.601 23.3216 100.841 22.9886 100.956 22.5947C101.034 22.3369 101.074 21.8464 101.074 21.123V20.5215ZM106.365 26V10.252H109.384V26H106.365Z"
    fill="white" />
</svg>

================
File: src/images/clients/unseal/logomark-dark.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M1 20C1 26.6274 6.37258 32 13 32H29V4H1V20Z" fill="#0A0A0A" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M11.5 10.5V21.5L22.5 21.5V25.5H11.5C9.29086 25.5 7.5 23.7091 7.5 21.5V10.5H11.5ZM22.5 10.5H18.5V15.5C18.5 16.6046 19.3954 17.5 20.5 17.5C21.6046 17.5 22.5 16.6046 22.5 15.5V10.5Z"
    fill="white" />
</svg>

================
File: src/images/clients/unseal/logomark-light.svg
================
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M1 20C1 26.6274 6.37258 32 13 32H29V4H1V20Z" fill="white" />
  <path fill-rule="evenodd" clip-rule="evenodd"
    d="M11.5 10.5V21.5L22.5 21.5V25.5H11.5C9.29086 25.5 7.5 23.7091 7.5 21.5V10.5H11.5ZM22.5 10.5H18.5V15.5C18.5 16.6046 19.3954 17.5 20.5 17.5C21.6046 17.5 22.5 16.6046 22.5 15.5V10.5Z"
    fill="#0A0A0A" />
</svg>

================
File: src/images/logo-tagadart.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 595.28 841.89">
  <defs>
    <style>
      .cls-1 {
        fill: #fff;
      }
    </style>
  </defs>
  <!-- Generator: Adobe Illustrator 28.7.1, SVG Export Plug-In . SVG Version: 1.2.0 Build 142)  -->
  <g>
    <g id="Layer_1">
      <g>
        <path class="cls-1" d="M9,145.89h578v550H9V145.89ZM370.13,266.66c12.08,7.99,21.79,17.44,30.07,28.36,12.71,16.77,20.81,35.55,23.93,56.43.72,4.82,4.87,7.92,9.55,7.47,4.63-.44,7.78-3.78,7.3-8.9-.49-5.22-1.53-10.46-2.94-15.53-12.55-45.22-40.47-77.08-83.53-95.7-15.36-6.65-31.56-10.28-48.13-10.63-12.18-.26-24.43,1.67-36.6,3.07-4.08.47-7.44,2.84-7.78,7.71-.51,7.31,4.51,10.74,13.3,8.8,23.84-5.24,47-2.64,69.77,5.62,3.57,1.3,5.13,3.43,6.02,6.95,5.36,21.31,6.62,42.81,4.05,64.64-3.01,25.58-11.71,49.05-25.31,70.79-2.54,4.07-5.37,7.96-7.77,12.11-2.04,3.52-.82,6.82,1.91,9.43,2.75,2.63,6.24,3.62,9.5,1.41,2.37-1.61,4.38-3.98,6.03-6.37,17.94-26.05,29.12-54.63,32.78-86.2,2.28-19.63,1.49-39.04-2.15-59.48ZM353.33,484.35c-13.05,6.54-27.83,10.52-43.28,11.53-18.51,1.22-36.66-.81-54.14-7.61-5.52-2.15-10.25.05-11.87,4.75-1.7,4.94.39,9.2,5.93,11.33,23.58,9.08,48.04,11.08,72.78,7.32,26.2-3.98,49.7-14.78,69.83-32.13,20.79-17.92,35.76-39.88,43.69-66.37,1.43-4.78-1.15-9.48-5.82-10.92-4.11-1.26-8.64,1.14-10.34,5.53-.42,1.07-.68,2.2-1.06,3.29-7.99,22.98-21.4,42.2-40.32,57.48-1.61,1.3-4.41,2.54-6.18,2.06-33.81-9.18-62.59-26.66-85.87-52.95-11.73-13.24-20.92-28.12-28.43-44.12-1.1-2.33-3.82-4.53-6.29-5.43-3.24-1.18-7.33-.25-8.51,3.24-1.06,3.11-1.33,7.37-.03,10.27,14.67,32.77,36.74,59.63,66.89,79.16,13.8,8.94,28.87,15.91,43.01,23.58ZM174.7,360.93c.77-4.84,1.39-9.72,2.35-14.52,5.74-28.85,19.94-52.75,42.42-71.69,4.92-4.15,6.26-9.72,2.93-13.83-3.27-4.03-8.74-4.25-13.62.2-6.27,5.71-12.75,11.39-18,17.98-33.63,42.26-41.9,89.21-24.69,140.44,5.93,17.67,15.93,33.04,28.09,47.06,3.12,3.59,7.06,4.72,11.15,3.05,3.88-1.59,5.72-5.32,4.58-9.48-.66-2.41-2.34-4.72-4.05-6.64-15.81-17.79-25.27-38.62-29.64-61.86-.67-3.57-.7-6.9,2.65-9.93,11.73-10.62,24.01-20.4,37.97-27.99,21.93-11.92,45.2-19.43,70.21-20.71,10.58-.54,21.22-.04,31.84-.05,5.26,0,8.77-3.13,9.03-7.93.24-4.43-3.43-8.59-8.2-9.08-20.14-2.09-40.09-.8-59.86,3.5-31.48,6.85-59.41,20.91-85.13,41.48ZM477.78,588.57c1.31-.42,2.25-.68,3.16-1.02,7.92-2.97,12.15-9.22,11.62-17.09-.59-8.76-5.34-15.07-14.13-15.92-10.22-.99-20.6-.5-30.9-.33-.84.01-2.34,2.53-2.35,3.89-.16,19.31-.12,38.63-.07,57.94,0,1.23.54,2.45.83,3.67.53-.05,1.05-.1,1.58-.14v-31.51c9.13,0,17.41-.12,25.68.14,1.12.03,2.58,1.76,3.21,3.03,4.1,8.28,8,16.67,12,25,.63,1.32,1.49,2.53,2.25,3.79.51-.28,1.02-.56,1.54-.84-4.78-10.15-9.56-20.29-14.41-30.6ZM312.05,586.53c0,9.31-.11,18.63.11,27.94.04,1.52,1.62,4.33,2.41,4.31,8.73-.26,17.76.29,26.09-1.84,14.46-3.7,20.12-15.38,20.77-29.23.62-13.32-5.35-27.95-21.71-32.18-7.38-1.91-15.47-1.01-23.23-1.57-3.6-.26-4.57,1.24-4.51,4.64.18,9.31.06,18.62.06,27.94ZM221.02,587.55c0,6.14.05,11.27-.04,16.4-.02.9-.46,1.91-.98,2.67-5.47,8.02-17.81,12.91-27.2,10.85-15.21-3.34-24.17-13.87-25.17-29.61-1.39-21.82,19.43-38.37,39-30.75,4.35,1.69,8.14,4.83,12.74,7.63-.53-1.27-.68-2.48-1.36-3.1-6.22-5.79-13.74-9.14-22.14-8.51-19.85,1.48-31.01,16.72-30.64,33.91.47,21.75,18.74,36.56,39.12,32,7.7-1.72,14.85-5.65,17.78-12.36,2.58-5.9,1.34-13.48,1.78-20.26h-24.55c0,.38-.02.75-.03,1.13h21.67ZM94.85,619.09c.63.3,1.25.59,1.88.89,2.49-5.27,5.29-10.41,7.38-15.83,1.77-4.6,4.11-6.65,9.45-6.3,8.96.58,18.01.47,26.99.02,4.14-.21,5.81,1.5,7.26,4.83,2.53,5.84,5.37,11.54,8.09,17.3l1.78-.85c-10.24-22.06-20.48-44.13-30.72-66.19-.47.03-.94.05-1.41.08-10.22,22.02-20.45,44.03-30.67,66.05ZM294.93,620c.58-.28,1.17-.56,1.75-.84-10.24-22.07-20.49-44.14-30.73-66.21-.47.03-.94.06-1.41.09-10.22,22.01-20.44,44.03-30.66,66.04.63.3,1.26.59,1.89.89,2.77-5.87,5.74-11.66,8.24-17.65,1.33-3.19,2.94-4.53,6.59-4.43,9.83.29,19.67.29,29.5,0,3.62-.11,5.18,1.23,6.51,4.38,2.53,6.01,5.53,11.83,8.34,17.72ZM426.94,620.03l1.77-.85c-10.25-22.08-20.51-44.16-30.76-66.23-.48.05-.96.11-1.43.16-10.2,21.99-20.4,43.98-30.6,65.97.64.3,1.28.61,1.91.91,2.83-6.06,5.81-12.05,8.41-18.21,1.22-2.89,2.82-3.91,5.97-3.84,9.66.21,19.34.31,29-.03,4.09-.14,6.19,1.14,7.71,4.9,2.38,5.87,5.33,11.5,8.03,17.23ZM70.88,555.91v63.62c.68,0,1.35,0,2.03-.01v-63.49c4.62,0,8.28,0,11.94,0s7.24,0,10.86,0l-.09-1.29h-47.5c0,.39,0,.78,0,1.17h22.76ZM524.9,555.87v63.7c.68,0,1.35-.01,2.03-.02v-63.52c4.62,0,8.27,0,11.93,0s7.27,0,10.91,0c-.03-.44-.05-.88-.08-1.32h-47.5c0,.38,0,.77,0,1.15h22.72Z"/>
        <path d="M370.13,266.66c3.64,20.44,4.43,39.85,2.15,59.48-3.66,31.57-14.85,60.15-32.78,86.2-1.65,2.39-3.66,4.77-6.03,6.37-3.27,2.22-6.76,1.23-9.5-1.41-2.73-2.61-3.95-5.91-1.91-9.43,2.4-4.14,5.23-8.04,7.77-12.11,13.6-21.74,22.3-45.21,25.31-70.79,2.57-21.83,1.31-43.33-4.05-64.64-.88-3.52-2.45-5.65-6.02-6.95-22.77-8.26-45.93-10.86-69.77-5.62-8.8,1.93-13.81-1.49-13.3-8.8.34-4.88,3.7-7.24,7.78-7.71,12.17-1.4,24.42-3.33,36.6-3.07,16.57.35,32.76,3.98,48.13,10.63,43.06,18.62,70.98,50.48,83.53,95.7,1.4,5.06,2.45,10.3,2.94,15.53.48,5.12-2.67,8.46-7.3,8.9-4.68.45-8.83-2.65-9.55-7.47-3.12-20.88-11.22-39.66-23.93-56.43-8.28-10.92-18-20.37-30.07-28.36Z"/>
        <path d="M353.33,484.35c-14.14-7.67-29.21-14.64-43.01-23.58-30.15-19.53-52.22-46.39-66.89-79.16-1.3-2.9-1.03-7.16.03-10.27,1.18-3.48,5.27-4.42,8.51-3.24,2.47.9,5.2,3.1,6.29,5.43,7.51,16,16.7,30.88,28.43,44.12,23.28,26.29,52.06,43.77,85.87,52.95,1.77.48,4.56-.75,6.18-2.06,18.92-15.28,32.32-34.5,40.32-57.48.38-1.09.64-2.22,1.06-3.29,1.7-4.39,6.23-6.8,10.34-5.53,4.67,1.44,7.25,6.14,5.82,10.92-7.93,26.48-22.9,48.44-43.69,66.37-20.13,17.35-43.63,28.15-69.83,32.13-24.74,3.76-49.2,1.76-72.78-7.32-5.54-2.13-7.63-6.39-5.93-11.33,1.62-4.7,6.34-6.9,11.87-4.75,17.48,6.81,35.63,8.83,54.14,7.61,15.45-1.02,30.23-4.99,43.28-11.53Z"/>
        <path d="M174.7,360.93c25.73-20.56,53.65-34.62,85.13-41.48,19.76-4.3,39.72-5.59,59.86-3.5,4.77.49,8.44,4.65,8.2,9.08-.26,4.8-3.76,7.92-9.03,7.93-10.61.01-21.25-.49-31.84.05-25.01,1.28-48.27,8.8-70.21,20.71-13.96,7.58-26.23,17.37-37.97,27.99-3.35,3.03-3.32,6.36-2.65,9.93,4.37,23.24,13.83,44.06,29.64,61.86,1.71,1.92,3.39,4.23,4.05,6.64,1.14,4.16-.7,7.9-4.58,9.48-4.09,1.68-8.04.54-11.15-3.05-12.16-14.03-22.16-29.4-28.09-47.06-17.2-51.24-8.94-98.18,24.69-140.44,5.25-6.6,11.73-12.27,18-17.98,4.88-4.45,10.35-4.24,13.62-.2,3.33,4.11,2,9.68-2.93,13.83-22.47,18.94-36.67,42.84-42.42,71.69-.96,4.81-1.57,9.68-2.35,14.52Z"/>
        <path d="M477.78,588.57c4.85,10.31,9.63,20.45,14.41,30.6-.51.28-1.02.56-1.54.84-.76-1.26-1.61-2.47-2.25-3.79-4.01-8.33-7.9-16.71-12-25-.63-1.27-2.09-2.99-3.21-3.03-8.27-.26-16.55-.14-25.68-.14v31.51c-.53.05-1.05.1-1.58.14-.29-1.22-.82-2.45-.83-3.67-.05-19.31-.09-38.63.07-57.94.01-1.36,1.51-3.87,2.35-3.89,10.3-.17,20.68-.66,30.9.33,8.8.85,13.54,7.16,14.13,15.92.53,7.88-3.7,14.12-11.62,17.09-.91.34-1.85.6-3.16,1.02ZM447.99,586c9.3,0,18.26-.44,27.17.12,9.03.57,14.35-6.62,14.89-12.17.94-9.61-3.75-16.99-12.48-17.66-9.7-.75-19.49-.17-29.58-.17v29.88Z"/>
        <path d="M312.05,586.53c0-9.31.11-18.63-.06-27.94-.06-3.4.91-4.9,4.51-4.64,7.76.56,15.85-.33,23.23,1.57,16.36,4.23,22.33,18.86,21.71,32.18-.65,13.86-6.31,25.53-20.77,29.23-8.32,2.13-17.36,1.57-26.09,1.84-.8.02-2.38-2.79-2.41-4.31-.23-9.31-.11-18.62-.11-27.94ZM315.11,556.22v61.37c8.42-.7,16.59-.22,24.11-2.23,16.48-4.39,22.08-20.71,19.35-35.52-2.49-13.5-10.96-21.69-24.64-23.49-6.02-.79-12.23-.13-18.82-.13Z"/>
        <path d="M221.02,587.55h-21.67c0-.38.02-.75.03-1.13h24.55c-.44,6.78.8,14.36-1.78,20.26-2.93,6.71-10.08,10.64-17.78,12.36-20.38,4.56-38.65-10.25-39.12-32-.37-17.19,10.79-32.43,30.64-33.91,8.4-.63,15.91,2.73,22.14,8.51.68.63.82,1.83,1.36,3.1-4.59-2.8-8.38-5.93-12.74-7.63-19.57-7.62-40.39,8.93-39,30.75,1,15.74,9.95,26.27,25.17,29.61,9.39,2.06,21.73-2.84,27.2-10.85.52-.77.96-1.77.98-2.67.09-5.13.04-10.25.04-16.4Z"/>
        <path d="M94.85,619.09c10.22-22.02,20.45-44.03,30.67-66.05.47-.03.94-.05,1.41-.08,10.24,22.06,20.48,44.13,30.72,66.19l-1.78.85c-2.71-5.76-5.55-11.46-8.09-17.3-1.45-3.33-3.11-5.04-7.26-4.83-8.98.45-18.02.56-26.99-.02-5.34-.35-7.67,1.7-9.45,6.3-2.09,5.42-4.89,10.57-7.38,15.83-.63-.3-1.25-.59-1.88-.89ZM108.19,595.72h36.15c-6.03-13.02-11.84-25.56-18.12-39.1-6.24,13.53-11.99,25.99-18.04,39.1Z"/>
        <path d="M294.93,620c-2.81-5.9-5.81-11.71-8.34-17.72-1.32-3.15-2.89-4.48-6.51-4.38-9.83.3-19.67.29-29.5,0-3.64-.11-5.26,1.23-6.59,4.43-2.49,5.99-5.46,11.78-8.24,17.65-.63-.3-1.26-.59-1.89-.89,10.22-22.01,20.44-44.03,30.66-66.04.47-.03.94-.06,1.41-.09,10.24,22.07,20.49,44.14,30.73,66.21-.58.28-1.17.56-1.75.84ZM283.4,595.78c-6.14-13.24-11.91-25.7-18.16-39.17-6.23,13.55-12.01,26.11-18.02,39.17h36.19Z"/>
        <path d="M426.94,620.03c-2.71-5.73-5.65-11.37-8.03-17.23-1.52-3.76-3.63-5.04-7.71-4.9-9.66.34-19.33.24-29,.03-3.15-.07-4.75.96-5.97,3.84-2.6,6.16-5.58,12.15-8.41,18.21-.64-.3-1.28-.61-1.91-.91,10.2-21.99,20.4-43.98,30.6-65.97.48-.05.96-.11,1.43-.16,10.25,22.08,20.51,44.16,30.76,66.23l-1.77.85ZM397.28,556.61c-6.21,13.46-12,26.02-18,39.02h36.06c-6.02-13.01-11.8-25.5-18.06-39.02Z"/>
        <path d="M70.88,555.91h-22.76c0-.39,0-.78,0-1.17h47.5l.09,1.29c-3.62,0-7.24,0-10.86,0s-7.32,0-11.94,0v63.49c-.68,0-1.35,0-2.03.01v-63.62Z"/>
        <path d="M524.9,555.87h-22.72c0-.38,0-.77,0-1.15h47.5c.03.44.05.88.08,1.32-3.64,0-7.27,0-10.91,0s-7.31,0-11.93,0v63.52c-.68,0-1.35.01-2.03.02v-63.7Z"/>
        <path class="cls-1" d="M447.99,586v-29.88c10.09,0,19.89-.58,29.58.17,8.74.67,13.42,8.05,12.48,17.66-.54,5.55-5.86,12.74-14.89,12.17-8.91-.56-17.88-.12-27.17-.12Z"/>
        <path class="cls-1" d="M315.11,556.22c6.59,0,12.8-.66,18.82.13,13.68,1.8,22.15,9.99,24.64,23.49,2.73,14.81-2.87,31.13-19.35,35.52-7.51,2-15.69,1.53-24.11,2.23v-61.37Z"/>
        <path class="cls-1" d="M108.19,595.72c6.05-13.11,11.79-25.57,18.04-39.1,6.28,13.55,12.08,26.08,18.12,39.1h-36.15Z"/>
        <path class="cls-1" d="M283.4,595.78h-36.19c6.01-13.06,11.79-25.62,18.02-39.17,6.25,13.47,12.02,25.93,18.16,39.17Z"/>
        <path class="cls-1" d="M397.28,556.61c6.26,13.52,12.04,26.02,18.06,39.02h-36.06c6-13,11.79-25.56,18-39.02Z"/>
      </g>
    </g>
  </g>
</svg>

================
File: src/lib/componentResolver.tsx
================
import FeaturesSection from '@/components/sections/dynamic/Features/FeaturesSection'
import PostsSection from '@/components/sections/dynamic/Posts/PostsSection'
import ProjectsSection from '@/components/sections/dynamic/Projects/ProjectsSection'
import ServicesSection from '@/components/sections/dynamic/Services/ServiceSection'
import TeamsSection from '@/components/sections/dynamic/Teams/TeamsCardSection'
import ReferenceSection from '@/components/sections/dynamic/References/ReferenceSection'
import ContactSection from '@/components/sections/dynamic/Contact/ContactSection'
import CultureSection from '@/components/sections/dynamic/Culture/CultureSection'
import TestimonialSection from '@/components/sections/dynamic/TestimonialSection'
import PageIntroSection from '@/components/sections/dynamic/PageIntro/PageIntroSection'
import HeroSection from '@/components/sections/dynamic/Hero/HeroSection'
import CTASection from '@/components/sections/dynamic/CTA/CTA'
import PricingSection from '@/components/sections/dynamic/PricingSection/PricingSection'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Section } from '@/components/ui/Section'

export const componentResolver = ({
  section,
  designType,
}: {
  section: any
  designType: number
}) => {
  switch (section.__component) {
    case 'section.text-section':
      return (
        <Section className="m-auto max-w-5xl">
          {section.title && (
            <h2 className="text-2xl font-semibold">{section.title}</h2>
          )}
          <BasicMarkdown content={section.content} />
        </Section>
      )
    case 'section.blog-section':
      return (
        <PostsSection
          key={section.id}
          postsSection={section}
          designType={designType}
        />
      )
    case 'section.projects-section':
      return (
        <ProjectsSection
          key={section.id}
          projectsSection={section}
          designType={designType}
        />
      )

    case 'section.services-section':
      return (
        <ServicesSection
          key={section.id}
          servicesSection={section}
          designType={designType}
        />
      )
    case 'section.reference-section':
      return (
        <ReferenceSection
          key={section.id}
          referenceSection={section}
          designType={designType}
        />
      )
    case 'section.cta':
      return (
        <CTASection
          key={section.id}
          ctaSection={section}
          designType={designType}
        />
      )
    case 'section.pricing-section':
      return (
        <PricingSection
          key={section.id}
          pricingSection={section}
          designType={designType}
        />
      )
    case 'section.team-section':
      return (
        <TeamsSection
          key={section.id}
          teamsSection={section}
          designType={designType}
        />
      )
    case 'section.culture-section':
      return (
        <CultureSection
          key={section.id}
          culturesSection={section}
          designType={designType}
        />
      )
    case 'section.contact-section':
      return (
        <ContactSection
          key={section.id}
          contactSection={section}
          designType={designType}
        />
      )
    case 'section.page-intro':
      return (
        <PageIntroSection
          key={section.id}
          pageIntroSection={section}
          designType={designType}
        />
      )

    case 'section.features-section':
      return (
        <FeaturesSection
          key={section.id}
          featuresSection={section}
          designType={designType}
        />
      )
    case 'section.hero-section':
      return (
        <>
          <HeroSection
            key={section.id}
            heroSection={section}
            designType={designType}
          />
          {/* <HeroSection key={section.id} heroSection={section} designType={1} />
          <HeroSection key={section.id} heroSection={section} designType={2} />
          <HeroSection key={section.id} heroSection={section} designType={3} />
          <HeroSection key={section.id} heroSection={section} designType={4} /> */}
        </>
      )

    case 'section.testimonials':
      return (
        <TestimonialSection testimonialSection={section} key={section.id} />
      )

    default:
      return null
  }
}

================
File: src/lib/helper.ts
================
// import { format as Format } from 'date-fns'
import { format, Locale } from 'date-fns'
import { enUS, fr } from 'date-fns/locale'

//DateTime
export function formatDate(date: Date, localeCode = 'fr'): string {
  const newDate = new Date(date)
  let formattedDate: string
  // const localeCode = i18n.locale.substring(0, 2);
  // const localeCode = "fr";
  switch (localeCode) {
    case 'en':
      formattedDate = format(newDate, 'dd MMM yyyy', { locale: enUS })

      break
    case 'fr':
      formattedDate = format(newDate, 'dd MMM yyyy', { locale: fr })
      break
    // case "de":
    //   formattedDate = format(newDate, "dd MMM yyyy", { locale: de });
    //   break;
    // case "it":
    // formattedDate = format(newDate, "dd MMM yyyy", { locale: it });
    // break;
    default:
      formattedDate = format(newDate, 'dd MMM yyyy', { locale: fr })
      break
  }
  return formattedDate
}

export function formatDateTime(date: Date, localeCode = 'fr'): string {
  const newDate = new Date(date)
  let formattedDate: string

  switch (localeCode) {
    case 'en':
      formattedDate = format(newDate, 'PPP HH:mm', { locale: enUS })
      break
    case 'fr':
      formattedDate = format(newDate, 'PPP HH:mm', { locale: fr })
      break
    default:
      formattedDate = format(newDate, 'PPP HH:mm', { locale: fr })
      break
  }
  return formattedDate
}

export function localeToDateLocale(locale: string): Locale {
  switch (locale) {
    case 'en':
      return enUS
    case 'fr':
      return fr
    default:
      return fr
  }
}

export function truncateWithEllipses(text: any, max: number) {
  return text?.substr(0, max - 1) + (text?.length > max ? '...' : '')
}

================
File: src/lib/mdx.ts
================
import { type ImageProps } from 'next/image'
import glob from 'fast-glob'

async function loadEntries<T extends { date: string }>(
  directory: string,
  metaName: string,
): Promise<Array<MDXEntry<T>>> {
  return (
    await Promise.all(
      (await glob('**/page.mdx', { cwd: `src/app/${directory}` })).map(
        async (filename) => {
          let metadata = (await import(`../app/${directory}/${filename}`))[
            metaName
          ] as T
          return {
            ...metadata,
            metadata,
            href: `/${directory}/${filename.replace(/\/page\.mdx$/, '')}`,
          }
        },
      ),
    )
  ).sort((a, b) => b.date.localeCompare(a.date))
}

type ImagePropsWithOptionalAlt = Omit<ImageProps, 'alt'> & { alt?: string }

export type MDXEntry<T> = T & { href: string; metadata: T }

export interface Article {
  id: number
  date: string
  title: string
  description: string
  author: {
    name: string
    role: string
    image: ImagePropsWithOptionalAlt
  }
}

export interface CaseStudy {
  date: string
  client: string
  title: string
  description: string
  summary: Array<string>
  logo: ImageProps['src']
  image: ImagePropsWithOptionalAlt
  service: string
  testimonial: {
    author: {
      name: string
      role: string
    }
    content: string
  }
}

export function loadArticles() {
  return loadEntries<Article>('blog', 'article')
}

export function loadCaseStudies() {
  return loadEntries<CaseStudy>('work', 'caseStudy')
}

================
File: src/lib/seo.ts
================
import { SeoData } from '@/types/global'
import { Metadata } from 'next'

interface GenerateMetadataOptions {
  data: SeoData | null
  type: 'project' | 'service' | 'blog'
  id: string
  siteName?: string
}

interface SlugPageData {
  data: Array<SeoData>
}

interface GenerateSlugMetadataOptions {
  page: SlugPageData | null
  siteName?: string
}

export function generatePageMetadata({
  data,
  type,
  id,
  siteName = 'Tagadart',
}: GenerateMetadataOptions): Metadata {
  if (!data) {
    return {
      title: `${type.charAt(0).toUpperCase() + type.slice(1)} not found`,
    }
  }

  const title = data?.seo?.metaTitle
    ? `${data?.seo?.metaTitle} - ${siteName}`
    : `${data?.pageIntro?.title} - ${siteName}`

  const basePath = {
    project: 'projects',
    service: 'services',
    blog: 'blog',
  }[type]

  return {
    title,
    description: data?.seo?.metaDescription || data?.pageIntro?.content,
    openGraph: {
      title: title,
      description: data?.seo?.metaDescription || data?.pageIntro?.content,
      images: data?.pageIntro?.cover?.url
        ? [
            {
              url: data?.pageIntro?.cover.url,
              width: 800,
              height: 600,
              alt: data.pageIntro.title,
            },
          ]
        : [],
    },
    alternates: {
      canonical: `/${basePath}/${id}`,
    },
  }
}

export function generateSlugPageMetadata({
  page,
}: GenerateSlugMetadataOptions): Metadata {
  if (!page?.data?.[0]) {
    return {
      title: 'Page not found',
    }
  }

  const pageData = page.data[0]

  return {
    title: pageData?.seo?.metaTitle,
    description: pageData?.seo?.metaDescription,
    openGraph: {
      title: pageData?.seo?.metaTitle,
      description: pageData?.seo?.metaDescription,
      images: pageData?.seo?.metaImage?.url
        ? [
            {
              url: pageData.seo.metaImage.url,
              width: 800,
              height: 600,
              alt:
                pageData.seo.metaImage.alternativeText ||
                pageData?.seo?.metaTitle ||
                '',
            },
          ]
        : [],
    },
  }
}

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/request/fetch.tsx
================
// utils/fetch.tsx

import { fetchAxiosAPI } from '@/request/request'
import { RestQueryParams } from '@/types/global'
import { createQueryParams } from './populate'

//////// PAGES
export async function fetchPageBySlug(slug: string, lang: string) {
  const querySlug = slug === undefined ? 'home' : slug
  const path = '/pages'

  const queryParams = {
    ...createQueryParams('pages'),
    filters: {
      slug: {
        $eq: querySlug,
      },
    },
    locale: lang,
  }

  try {
    const pageData = await fetchAxiosAPI(path, queryParams)
    return pageData // Return the full response, not just data
  } catch (error) {
    console.error('Failed to load page data:', error)
    throw error
  }
}
//////// COLLECTIONS
export async function fetchPosts() {
  // const populatePosts = ['pageIntro', 'author.avatar', 'pageIntro.cover']

  // const queryParams: RestQueryParams = {
  //   populate: populatePosts,
  //   sort: 'createdAt:desc',
  //   publicationState: 'live',
  //   pagination: {
  //     page: 1,
  //     pageSize: 10,
  //   },
  // }

  const queryParams = createQueryParams('posts')

  try {
    const postsData = await fetchAxiosAPI('posts', queryParams)
    return postsData?.data
  } catch (error) {
    console.error('Failed to load posts data:', error)
    throw error
  }
}

export async function fetchPost(slug: string) {
  // const populatePosts = [
  //   'pageIntro',
  //   'author.avatar',
  //   'pageIntro.cover',
  //   'seo.metaTitle',
  //   'seo.metaImage',
  // ]

  // const queryParams: RestQueryParams = {
  //   populate: populatePosts,

  //   publicationState: 'live',
  //   pagination: {
  //     page: 1,
  //     pageSize: 10,
  //   },
  // }
  const queryParams = createQueryParams('posts')

  try {
    const postData = await fetchAxiosAPI(`/posts/${slug}`, queryParams)
    return postData?.data
  } catch (error) {
    console.error('Failed to load post:', error)
    throw error
  }
}

export async function fetchProjects() {
  // const populateProjects = ['pageIntro', 'pageIntro.cover', 'logo']

  // const queryParams: RestQueryParams = {
  //   populate: populateProjects,
  //   publicationState: 'live',
  //   pagination: {
  //     page: 1,
  //     pageSize: 10,
  //   },
  // }

  const queryParams = createQueryParams('projects')

  try {
    const projectsData = await fetchAxiosAPI('projects', queryParams)
    return projectsData?.data
  } catch (error) {
    console.error('Failed to load projects data:', error)
    throw error
  }
}

export async function fetchProject(slug: string) {
  // const populateProjects = [
  //   'pageIntro',
  //   'author.avatar',
  //   'pageIntro.cover',
  //   'seo.metaTitle',
  //   'seo.metaImage',
  // ]

  // const queryParams: RestQueryParams = {
  //   populate: populateProjects,

  //   publicationState: 'live',
  //   pagination: {
  //     page: 1,
  //     pageSize: 10,
  //   },
  // }

  const queryParams = createQueryParams('projects')
  try {
    const projectsData = await fetchAxiosAPI(`/projects/${slug}`, queryParams)
    return projectsData?.data
  } catch (error) {
    console.error('Failed to load projects data:', error)
    throw error
  }
}

export async function fetchServices() {
  // const populateServices = ['pageIntro', 'seo.metaTitle', 'seo.metaImage']

  // const queryParams: RestQueryParams = {
  //   populate: populateServices,
  //   publicationState: 'live',
  //   pagination: {
  //     page: 1,
  //     pageSize: 10,
  //   },
  // }

  const queryParams = createQueryParams('services')

  try {
    const servicesData = await fetchAxiosAPI('our-services', queryParams)
    return servicesData?.data
  } catch (error) {
    console.error('Failed to load services data:', error)
    throw error
  }
}

export async function fetchService(slug: string) {
  // const populateServices = ['pageIntro']

  // const queryParams: RestQueryParams = {
  //   populate: populateServices,
  //   publicationState: 'live',
  //   pagination: {
  //     page: 1,
  //     pageSize: 10,
  //   },
  // }

  const queryParams = createQueryParams('services')

  try {
    const serviceData = await fetchAxiosAPI(`/our-services/${slug}`, queryParams)

    return serviceData?.data
  } catch (error) {
    console.error('Failed to load service:', error)
    throw error
  }
}

export async function fetchClients() {
  const populateClients = ['logo']

  const queryParams: RestQueryParams = {
    populate: populateClients,
    publicationState: 'live',
    pagination: {
      page: 1,
      pageSize: 10,
    },
  }

  try {
    const clientsData = await fetchAxiosAPI('clients', queryParams)
    return clientsData?.data
  } catch (error) {
    console.error('Failed to load services data:', error)
    throw error
  }
}

export async function fetchClient(id: string) {
  const populateClients = ['logo']

  const queryParams: RestQueryParams = {
    populate: populateClients,
    publicationState: 'live',
    pagination: {
      page: 1,
      pageSize: 10,
    },
  }

  try {
    const clientsData = await fetchAxiosAPI(`clients/${id}`, queryParams)
    return clientsData?.data
  } catch (error) {
    console.error('Failed to load services data:', error)
    throw error
  }
}

================
File: src/request/Fetcher.tsx
================
'use client'

import React, { ReactNode, useEffect, useState } from 'react'
import useSWR, { KeyedMutator, SWRConfig } from 'swr'
import { swrConfig } from '@/hooks/useSWRConfig'
import { defaultQueryParams, fetchUseSWR } from '@/request/request'
import { Data, RestQueryParams } from '@/types/global'
import * as qs from 'qs'

interface FetcherChildProps<T> {
  data: Data
  currentPage: number
  totalPages: number
  goToPage: (page: number) => void
  isLoading: boolean
  mutate: KeyedMutator<T>
  hasNextPage: boolean
  loadMore: () => void
}

interface FetcherProps<T> {
  url: string
  sort?: string
  populate?: string | object
  filters?: []
  paginationMode?: 'infinite' | 'pagination' | 'off'
  params?: RestQueryParams
  children: (fetchData: FetcherChildProps<T>) => ReactNode
}

const optimizedFetcherConfig = {
  suspense: true,
  revalidateOnMount: false,
  revalidateIfStale: false,
  refreshInterval: 30000,
}

function Fetcher<T>({
  url,
  children,
  params = defaultQueryParams,
  filters,
  paginationMode,
  sort,
  populate,
}: FetcherProps<T>) {
  const [currentPage, setCurrentPage] = useState(1)
  const [accumulatedData, setAccumulatedData] = useState<Data>()

  const effectiveFilters = { ...params.filters, ...filters }
  const effectivePopulate = 'pageIntro.cover'

  const effectiveSort = sort || params.sort
  const effectiveParams = {
    ...params,
    filters: effectiveFilters,
    sort: effectiveSort,
    populate: effectivePopulate,
    pagination:
      paginationMode === 'off'
        ? undefined
        : { ...params.pagination, page: currentPage },
  }

  const queryString = qs.stringify(effectiveParams, {
    encode: false,
    arrayFormat: 'indices',
    allowDots: false,
  })

  const { data, error, mutate } = useSWR<any>(
    `${url}?${queryString}`,
    fetchUseSWR,
    optimizedFetcherConfig,
  )

  const hasNextPage =
    data?.meta?.pagination?.page < data?.meta?.pagination?.pageCount

  const goToPage = (pageNum: number) => {
    setCurrentPage(pageNum)
  }

  useEffect(() => {
    if (data) {
      if (paginationMode === 'infinite') {
        setAccumulatedData((prevData) => ({
          data: prevData ? [...prevData.data, ...data.data] : [...data.data],
          meta: data.meta,
        }))
      } else {
        setAccumulatedData(data)
      }
    }
  }, [data, paginationMode])

  const loadMore = () => {
    if (hasNextPage) {
      setCurrentPage((prev) => prev + 1)
    }
  }

  if (error) return <div>Error loading data...</div>

  const mergedConfig = {
    ...swrConfig,
    ...optimizedFetcherConfig,
  }

  return (
    <SWRConfig value={mergedConfig}>
      {accumulatedData
        ? children({
            data: accumulatedData,
            currentPage,
            goToPage,
            isLoading: !data && !error,
            mutate,
            totalPages: data?.meta?.pagination?.pageCount || 0,
            loadMore,
            hasNextPage,
          })
        : null}
    </SWRConfig>
  )
}

export default Fetcher

================
File: src/request/populate.ts
================
import { RestQueryParams } from '@/types/global'

export const structurePopulate = {
  structure: {
    on: {
      'section.blog-section': {
        populate: [
          'sectionIntro',
          'posts',
          'posts.pageIntro',
          'posts.pageIntro.cover',
          'posts.author',
          'posts.author.avatar',
        ],
      },
      'section.text-section': {
        populate: '*',
      },
      'section.projects-section': {
        populate: [
          'sectionIntro',
          'projects',
          'projects.pageIntro',
          'projects.pageIntro.cover',
          'projects.logo',
        ],
      },
      'section.contact-section': {
        populate: [
          'sectionIntro',
          'content',
          'content.offices',
          'content.emails',
          'content.socials',
        ],
      },
      'section.services-section': {
        populate: [
          'sectionIntro',
          'our_services',
          'our_services.pageIntro',
          'our_services.pageIntro.cover',
        ],
      },
      'section.pricing-section': {
        populate: ['sectionIntro', 'cards', 'cards.features'],
      },
      'section.team-section': {
        populate: [
          'sectionIntro',
          'members',
          'members.fullname',
          'members.avatar',
          'members.posts.pageIntro',
        ],
      },
      'section.reference-section': {
        populate: ['sectionIntro', 'clients', 'clients.name', 'clients.logo'],
      },
      'section.culture-section': {
        populate: ['sectionIntro', 'values', 'values.title'],
      },
      'section.cta': {
        populate: ['sectionIntro', 'buttons'],
      },
      'section.page-intro': {
        populate: ['title', 'eyebrow', 'content', 'cover'],
      },
      'section.features-section': {
        populate: ['sectionIntro', 'features'],
      },
      'section.testimonials': {
        populate: [
          'sectionIntro',
          'testimonials',
          'testimonials.pageIntro',
          'testimonials.pageIntro.cover',
          'testimonials.author',
          'testimonials.author.avatar',
          'testimonials.member',
          'testimonials.member.fullname',
          'testimonials.member.avatar',
        ],
      },
      'section.hero-section': {
        populate: ['sectionIntro', 'sectionIntro.cover', 'buttons', 'logo'],
      },
    },
  },
}

export const collectionPopulates = {
  projects: {
    pageIntro: {
      populate: ['cover'],
    },
    logo: {
      populate: '*',
    },
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
  services: {
    pageIntro: {
      populate: ['cover'],
    },
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
  posts: {
    pageIntro: {
      populate: ['cover'],
    },
    author: {
      populate: ['avatar'],
    },
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
  pages: {
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
}

// Helper function to create query params
export const createQueryParams = (
  collection: keyof typeof collectionPopulates,
  includeStructure = true,
): RestQueryParams => {
  return {
    populate: {
      ...(collectionPopulates[collection] || {}),
      ...(includeStructure ? structurePopulate : {}),
    },
    publicationState: 'live',
    pagination: {
      page: 1,
      pageSize: 10,
    },
  }
}

================
File: src/request/request.tsx
================
import axios, { AxiosRequestHeaders, AxiosResponse } from 'axios'
import { BaseData, RestQueryParams } from '@/types/global'

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:1337'
axios.defaults.baseURL = `${API_URL}/api`

export const defaultQueryParams: RestQueryParams = {
  sort: 'id:desc',
  populate: '*',
  publicationState: 'preview',
  pagination: {
    page: 1,
    pageSize: 10,
  },
}
export async function fetchUseSWR(
  path: string,
  userToken?: string | null,
): Promise<BaseData> {
  const headers: any = {}

  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }
  try {
    const response = await axios.get(`${path}`, { headers })

    return response.data
  } catch (err) {
    console.error(err, 'fetchUseSWR fetching error, path:', path)
    throw err
  }
}

export async function fetchAxiosAPI(
  path: string,
  params = defaultQueryParams,
  userToken?: string | null,
) {
  const headers: any = {}

  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }
  try {
    const response = await axios.get(`${path}`, { headers, params })
    return response.data
  } catch (err) {
    console.error(err, 'fetchAxiosAPI fetching error, path:', path)
  }
}

// export async function postAxiosApiFormData(
//   path: string,
//   data: FormData,
//   userToken?: string | null
// ) {
//   const headers = {
//     "Content-Type": "multipart/form-data",
//   } as AxiosRequestHeaders;
//   if (userToken) {
//     headers.Authorization = `Bearer ${userToken}`;
//   }
//   try {
//     const response = await axios.post(path, data, { headers });
//     return response;
//   } catch (err) {
//     console.error(err, "Axios Post error, path:", path);
//     throw err;
//   }
// }

export async function postAxiosAPI<T = any>(
  path: string,
  data: FormData | Record<string, unknown>,
  userToken?: string | null,
): Promise<AxiosResponse<T>> {
  const headers = {} as AxiosRequestHeaders
  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }

  // TODO: I'm not sure it's needed....
  // if ( data instanceof FormData) {
  //   headers['Content-Type'] = 'multipart/form-data'
  // }

  try {
    const response = await axios.post<T>(path, data, { headers })
    return response
  } catch (err) {
    console.error('Axios Post error, path:', path, err)
    throw err
  }
}

export async function putAxiosAPI<T = any>(
  path: string,
  data: FormData | Record<string, unknown>,
  userToken?: string | null,
): Promise<AxiosResponse<T>> {
  const headers: AxiosRequestHeaders = {} as AxiosRequestHeaders

  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }

  try {
    const response = await axios.put<T>(path, data, { headers })
    return response
  } catch (err) {
    console.error('Axios Post error, path:', path, err)
    throw err
  }
}

// export async function putAxiosAPIFormData(
//   path: string,
//   data: any,
//   userToken?: string | null
// ) {
//   // const headers: any = {};

//   const headers: any = {
//     "Content-Type": "multipart/form-data",
//   };

//   if (userToken) {
//     headers.Authorizationa = `Bearer ${userToken}`;
//   }
//   try {
//     const response = await axios.put(path, data, { headers });
//     return response;
//   } catch (err) {
//     console.error(err, "Axios PUT error");
//     throw err;
//   }
// }

export async function deleteAxiosAPI(path: string, userToken?: string | null) {
  const headers: any = {}

  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }

  try {
    const response = await axios.delete(path, { headers })
    return response
  } catch (err) {
    console.error(err, 'Axios Delete error, path:', path)
    throw err
  }
}

================
File: src/styles/base.css
================
@tailwind base;

.markdown-content {
  @apply prose prose-slate max-w-none;

  /* Headings */
  h1 {
    @apply mb-4 mt-6 text-4xl font-bold;
  }
  h2 {
    @apply mb-3 mt-5 text-3xl font-bold;
  }
  h3 {
    @apply mb-2 mt-4 text-2xl font-bold;
  }
  h4 {
    @apply mb-2 mt-3 text-xl font-bold;
  }
  h5 {
    @apply mb-1 mt-2 text-lg font-bold;
  }
  h6 {
    @apply mb-1 mt-2 text-base font-bold;
  }

  /* Lists */
  ul {
    list-style-type: disc !important;
    margin: 0.75rem 0 !important;
    padding-left: 1.5rem !important;

    li {
      list-style-type: disc !important;
      padding-left: 0 !important;
      &::before {
        display: none; /* Remove custom bullets */
      }
    }

    /* Handle nested lists with ql-indent classes */
    .ql-indent-1 {
      list-style-type: circle !important;
      margin-left: 1.5rem !important;
    }

    .ql-indent-2 {
      list-style-type: square !important;
      margin-left: 3rem !important;
    }
  }

  /* Ordered Lists */
  ol {
    list-style-type: decimal;
    margin: 0.75rem 0;
    padding-left: 1.5rem;
    counter-reset: list-1;

    > li {
      list-style: none;
      counter-increment: list-1;
      position: relative;

      &::before {
        content: counter(list-1) '.';
        position: absolute;
        left: -1.5rem;
      }
    }

    /* Second level */
    li.ql-indent-1 {
      counter-increment: list-2;
      margin-left: 2.5em;
      list-style: none;

      &::before {
        content: counter(list-2, lower-alpha) '.';
        position: absolute;
        left: -1.5rem;
      }
    }

    /* Third level */
    li.ql-indent-2 {
      counter-increment: list-3;
      margin-left: 4em;
      list-style: none;

      &::before {
        content: counter(list-3, lower-roman) '.';
        position: absolute;
        left: -1.5rem;
      }
    }
  }

  ol li {
    display: block;
  }

  ol li::marker {
    content: none;
  }

  /* Adjust indentation for Quill's indent classes */
  .ql-indent-1 {
    margin-left: 2em !important;
    padding-left: 0 !important;
  }

  .ql-indent-2 {
    margin-left: 4em !important;
    padding-left: 0 !important;
  }

  /* Paragraphs and spacing */
  p {
    @apply my-3;
  }

  /* Links */
  a {
    @apply text-primary-600 underline hover:text-primary-700;
  }

  /* Images */
  img {
    @apply my-4 h-auto max-w-full rounded-lg;
  }

  /* Text alignment */
  .ql-align-center {
    @apply text-center;
  }
  .ql-align-right {
    @apply text-right;
  }
  .ql-align-justify {
    @apply text-justify;
  }

  /* Video embeds */
  .ql-video {
    @apply my-4 aspect-video w-full;
    max-width: 100%;
  }

  /* Video alignment */
  .ql-video.ql-align-center {
    @apply mx-auto block;
  }
  .ql-video.ql-align-right {
    @apply ml-auto block;
  }

  /* Text formatting - Fixed bold and italic */
  strong,
  b,
  .ql-bold {
    @apply font-bold !important;
  }

  em,
  i,
  .ql-italic {
    @apply italic !important;
  }

  u,
  .ql-underline {
    @apply underline !important;
  }

  /* Combined formatting */
  .ql-bold.ql-italic {
    @apply font-bold italic !important;
  }

  /* Quill specific text formatting */
  [class*='ql-size'] {
    @apply leading-normal;
  }

  .ql-size-small {
    @apply text-sm;
  }

  .ql-size-large {
    @apply text-lg;
  }

  .ql-size-huge {
    @apply text-xl;
  }

  /* Block quotes */
  blockquote {
    @apply my-4 border-l-4 border-gray-200 pl-4 italic;
  }

  /* Code blocks */
  pre {
    @apply my-4 overflow-x-auto rounded-lg bg-gray-100 p-4;
  }
  code {
    @apply rounded bg-gray-100 px-1 py-0.5;
  }
}

@layer base {
  :root {
    --radius: 0.5rem;
  }
}

================
File: src/styles/components.css
================
@tailwind components;

@import './typography.css';

================
File: src/styles/tailwind.css
================
@import './base.css';
@import './components.css';
@import './utilities.css';


.main_content img {
    border-radius: 20px;
    transition: 0.5s;
    filter: grayscale(0.8);
}

.main_content img:hover {
    filter: grayscale(1);
}

================
File: src/styles/typography.css
================
.typography {
  color: theme(colors.neutral.950);
  font-size: theme(fontSize.xl);
  line-height: theme(fontSize.xl[1].lineHeight);

  --shiki-color-text: theme(colors.white);
  --shiki-color-background: theme(colors.neutral.950);
  --shiki-token-constant: theme(colors.neutral.300);
  --shiki-token-string: theme(colors.neutral.400);
  --shiki-token-comment: theme(colors.neutral.500);
  --shiki-token-keyword: theme(colors.neutral.400);
  --shiki-token-parameter: theme(colors.neutral.400);
  --shiki-token-function: theme(colors.neutral.300);
  --shiki-token-string-expression: theme(colors.neutral.300);
  --shiki-token-punctuation: theme(colors.neutral.400);

  :where(.typography > *) {
    margin-top: theme(spacing.6);
    margin-bottom: theme(spacing.6);
  }

  /* Headings */
  :where(h2) {
    font-weight: theme(fontWeight.semibold);
    font-family: theme(fontFamily.display);
    font-size: theme(fontSize.2xl);
    line-height: theme(fontSize.2xl[1].lineHeight);
    margin-top: theme(spacing.16);
  }

  :where(h3) {
    font-weight: theme(fontWeight.semibold);
    font-family: theme(fontFamily.display);
    font-size: theme(fontSize.xl);
    line-height: theme(fontSize.xl[1].lineHeight);
    margin-top: theme(spacing.10);
  }

  :where(h2 + h3) {
    margin-top: 0;
  }

  /* Lists */
  :where(ul, ol) {
    padding-left: 1.5rem;
  }

  :where(ul) {
    list-style-type: disc;
  }

  :where(ol) {
    list-style-type: decimal;
  }

  :where(li) {
    padding-left: theme(spacing.3);
    margin-top: theme(spacing.6);
  }

  :where(li)::marker {
    color: theme(colors.neutral.500);
  }

  :where(li > *),
  :where(li li) {
    margin-top: theme(spacing.4);
  }

  :where(ol > li)::marker {
    font-size: theme(fontSize.base);
    font-weight: theme(fontWeight.semibold);
  }

  /* Tables */
  :where(table) {
    width: 100%;
    text-align: left;
    font-size: theme(fontSize.base);
    line-height: theme(fontSize.base[1].lineHeight);
  }

  :where(th) {
    font-weight: theme(fontWeight.semibold);
  }

  :where(thead th) {
    padding-bottom: theme(spacing.6);
    border-bottom: 1px solid theme(colors.neutral.950);
  }

  :where(td) {
    vertical-align: top;
    padding-top: theme(spacing.6);
    padding-bottom: theme(spacing.6);
    border-bottom: 1px solid theme(colors.neutral.950 / 0.1);
  }

  :where(:is(th, td):not(:last-child)) {
    padding-right: theme(spacing.6);
  }

  /* Code blocks */
  :where(pre) {
    display: flex;
    background-color: theme(colors.neutral.950);
    border-radius: theme(borderRadius.4xl);
    overflow-x: auto;
    margin-top: theme(spacing.10);
    margin-bottom: theme(spacing.10);
    margin-left: calc(-1 * theme(spacing.6));
    margin-right: calc(-1 * theme(spacing.6));

    @screen sm {
      margin-left: auto;
      margin-right: auto;
    }
  }

  :where(pre code) {
    flex: none;
    padding: theme(padding.8) theme(padding.6);
    font-size: theme(fontSize.base);
    line-height: theme(lineHeight.8);
    color: theme(colors.white);

    @screen sm {
      padding: theme(spacing.10);
    }
  }

  /* <hr> */
  :where(hr) {
    border-color: theme(colors.neutral.950 / 0.1);
    margin-top: theme(spacing.24);
    margin-bottom: theme(spacing.24);
  }

  /* Inline text */
  :where(a) {
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 0.15em;
    text-decoration-skip-ink: none;
    font-weight: theme(fontWeight.semibold);
  }

  :where(strong) {
    font-weight: theme(fontWeight.semibold);
  }

  :where(code:not(pre code)) {
    font-size: calc(18 / 20 * 1em);
    font-weight: theme(fontWeight.semibold);

    &::before,
    &::after {
      content: '`';
    }
  }

  :where(h2 code, h3 code) {
    font-weight: theme(fontWeight.bold);
  }

  /* Figures */
  :where(figure) {
    margin-top: theme(spacing.32);
    margin-bottom: theme(spacing.32);
  }

  /* Spacing overrides */
  :where(.typography:first-child > :first-child),
  :where(li > :first-child) {
    margin-top: 0 !important;
  }

  :where(.typography:last-child > :last-child),
  :where(li > :last-child) {
    margin-bottom: 0 !important;
  }
}

================
File: src/styles/utilities.css
================
@tailwind utilities;

================
File: src/types/client.ts
================
import { MediaItem } from '@/types/global'
export interface Client {
  id: string
  name: string
  logo: MediaItem
  link: string
}

================
File: src/types/contact.ts
================
// types/contact.ts
import { PageIntro, MediaItem, ButtonProps } from './global'

export interface Office {
  id: number
  city: string
  country: string
  address: string
  coordinates?: {
    lat: number
    lng: number
  }
}

export interface EmailContact {
  id: number
  label: string
  email: string
}

export interface SocialNetwork {
  id: number
  name: string
  url: string
  icon: string // For storing Lucide icon name
}

export interface ContactContent {
  offices: Office[]
  emails: EmailContact[]
  socials: SocialNetwork[]
  formEnabled?: boolean
}

export interface ContactProps {
  contactSection: {
    formEnabled: any
    sectionIntro: PageIntro
    content: ContactContent
    buttons?: ButtonProps[]
  }
  designType: Number
}

================
File: src/types/feature.ts
================
import dynamicIconImports from 'lucide-react/dynamicIconImports'
export interface Feature {
  id: string
  name: string
  classIcon: keyof typeof dynamicIconImports
  content: any
  link: string
}

================
File: src/types/global.d.ts
================
import { Member } from './member'

export type BaseItem = {
  id: number
  publishedAt: Date
}

export interface BasesData {
  data: BaseItem[]
  meta: PaginationMeta
}

export interface BaseData {
  data: BaseItem
  meta: PaginationMeta
}

export interface Data {
  data: any
  meta: PaginationMeta
}

//****** IMAGE ******\\
export interface MediaItem {
  id: string
  url: string
  provider_metadata?: any
  width: number
  height: number
  alternativeText: string
}

export interface SeoData {
  seo: {
    metaTitle: string
    metaDescription: string
    metaImage: MediaItem
  }
  pageIntro: PageIntro
}

//****** REQUEST ******\\
export interface RestQueryParams extends Partial<PaginationMeta> {
  fields?: string | string[]
  filters?: object
  sort?: string
  populate: string | object
  locale?: string | string[]
  publicationState?: 'live' | 'preview'
  cover?: MediaItem
}

export interface PaginationMeta {
  pagination: {
    page: number
    pageSize: number
    pageCount?: number
    total?: number
  }
}

//****** SECTIONS ******\\

export interface PageIntro {
  title: string
  eyebrow: string
  content: string
  cover: MediaItem | null
  pagination: boolean
  embedVideo?: string
}

export interface Culture {
  id: string
  title: string
  content: string
}

// Office.ts
export interface Office {
  name: string
  children: React.ReactNode
  invert: boolean
  phone?: string
}

// CTA.ts
export interface CTA {}

export interface ButtonProps {
  id: string
  link: string
  text: string
  type: string
}

export interface Pagination {
  id: number
  value: 'off' | 'infinite' | 'pagination'
}

================
File: src/types/member.ts
================
import { MediaItem } from '@/types/global'
import { Post } from './post'
export interface Member {
  id: string
  fullname: string
  title: string
  avatar: MediaItem
  link: string
  email: string
  posts: Post[]
  role: string
}

================
File: src/types/post.ts
================
import { BaseItem, PageIntro } from './global'
import { Member } from './member'

export interface Post extends BaseItem {
  pageIntro: PageIntro
  author: Member
  content: string
  structure: any
  slug: string
}

================
File: src/types/project.ts
================
import { MediaItem, PageIntro, PaginationMeta } from './global.d'

import { Tag } from './tag'
import { Post } from './post'
import { Testimonial } from './testimonial'
import { Service } from './service'

// Project.ts
export interface Project {
  id: string
  pageIntro: PageIntro
  logo: MediaItem
  year: string
  client: string
  service: string
  link: string
  structure: any
  tags: Tag[]
  slug: string
  // testimonials: Testimonial[]
  // our_services: Service[]
  // posts: Post[]
  // content: string
  // expertise: string
}

export interface ProjectsData {
  data: Project[]
  meta: PaginationMeta
}

export interface ProjectData {
  data: Project
  meta: PaginationMeta
}

================
File: src/types/service.ts
================
import { CTA, PageIntro } from './global'
import { Project } from './project'

export interface Service {
  id: string
  pageIntro: PageIntro
  classIcon: string
  content: string //TODO: Discuss the utility
  cta: CTA[] //TODO: Discuss the utility
  projects: Project[]
  slug: string
}

================
File: src/types/tag.ts
================
import { Project } from './project'

export interface Tag {
  url: string
  classIcon: string
  projects: Project[]
}

================
File: src/types/team.ts
================
import { PageIntro } from './global'
import { Member } from './member'

export interface Team {
  id: string
  pageIntro: PageIntro
  classIcon: string
  content: string
  teams: Member[]
}

================
File: src/types/testimonial.ts
================
import { MediaItem } from './global'
import { Member } from './member'

export interface Testimonial {
  id: string
  title: string
  cover: MediaItem
  content: string
  author: Member
  //TODO: Replace by pageIntro
}

================
File: src/middleware.ts
================
import createMiddleware from 'next-intl/middleware'
import { routing } from './i18n/routing'

export default createMiddleware(routing)

export const config = {
  // Match only internationalized pathnames
  // matcher: ['/', '/(fr|en)/:path*'],
  matcher: [
    // Match all pathnames except for
    // - … if they start with `/api`, `/_next` or `/_vercel`
    // - … the ones containing a dot (e.g. `favicon.ico`)
    '/((?!api|_next|_vercel|.*\\..*).*)',
  ],
}

================
File: .env.example
================
NEXT_PUBLIC_API_URL = http://127.0.0.1:1337
# NEXT_PUBLIC_API_URL = https://tagadart-live-b00744013bc4.herokuapp.com
SITE_URL = http://localhost:3000
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=dza6hfy10

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files..

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: CHANGELOG.md
================
# Changelog

## 2024-06-18

- Update `prettier` and `prettier-plugin-tailwindcss` dependencies

## 2024-05-31

- Fix `npm audit` warnings

## 2024-05-07

- Bump Headless UI dependency to v2.0

## 2024-01-17

- Fix `shiki` dependency issues ([#1549](https://github.com/tailwindlabs/tailwindui-issues/issues/1549))
- Fix `sharp` dependency issues ([#1549](https://github.com/tailwindlabs/tailwindui-issues/issues/1549))

## 2024-01-16

- Replace Twitter with X

## 2024-01-10

- Update Tailwind CSS, Next.js, Prettier, TypeScript, ESLint, and other dependencies

## 2023-09-07

- Added TypeScript version of template

## 2023-08-24

- Add missing `@types/mdx` dependency ([#1496](https://github.com/tailwindlabs/tailwindui-issues/issues/1496))

## 2023-08-15

- Bump Next.js and MDX dependencies

## 2023-08-14

- Simplify article and case study metadata

## 2023-07-31

- Port template to Next.js app router
- Fix route handlers with `.js` extensions ([#1484](https://github.com/tailwindlabs/tailwindui-issues/issues/1484))

## 2023-07-26

- Add missing `acorn` and `acorn-jsx` dependencies ([#1481](https://github.com/tailwindlabs/tailwindui-issues/issues/1481))

## 2023-07-13

- Initial release

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/base.css",
    "baseColor": "neutral",
    "cssVariables": false,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: mdx-components.tsx
================
import { type MDXComponents as MDXComponentsType } from 'mdx/types'

import { MDXComponents } from '@/components/ui/MDXComponents'

export function useMDXComponents(components: MDXComponentsType) {
  return {
    ...components,
    ...MDXComponents,
  }
}

================
File: next-sitemap.config.js
================
/** @type {import('next-sitemap').IConfig} */
module.exports = {
  siteUrl: process.env.NEXT_PUBLIC_SITE_URL || 'https://tagadart.ch',
  generateRobotsTxt: true, // (optional)
}

================
File: next.config.mjs
================
import createNextIntlPlugin from 'next-intl/plugin'
import withBundleAnalyzer from '@next/bundle-analyzer'
import TerserPlugin from 'terser-webpack-plugin'
import CssMinimizerPlugin from 'css-minimizer-webpack-plugin'

const withNextIntl = createNextIntlPlugin()

const withBundleAnalyzerConfig = withBundleAnalyzer({
  enabled: process.env.ANALYZE === 'true',
})

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'mdx'],
  images: {
    domains: ['res.cloudinary.com'],
  },
  webpack(config, { dev, isServer }) {
    if (!dev && !isServer) {
      // Implement tree shaking for unused code
      config.optimization.usedExports = true

      // Optimize CSS bundles
      config.optimization.splitChunks = {
        cacheGroups: {
          styles: {
            name: 'styles',
            test: /\.css$/,
            chunks: 'all',
            enforce: true,
          },
        },
      }

      // Set up code minification for production
      config.optimization.minimizer = [
        // Use Terser for JavaScript minification
        new TerserPlugin({
          terserOptions: {
            compress: {
              drop_console: true, // Remove console logs
            },
          },
        }),
        // Use CssMinimizerPlugin for CSS minification
        new CssMinimizerPlugin(),
      ]
    }

    return config
  },
}

export default withBundleAnalyzerConfig(withNextIntl(nextConfig))

================
File: package.json
================
{
  "name": "tailwindui-studio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "format": "prettier --log-level warn --write \"./src/**/*.{tsx,ts}\"",
    "lint": "next lint && npx tsc --noEmit"
  },
  "browserslist": "defaults, not ie <= 11",
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@leafac/rehype-shiki": "^2.2.1",
    "@mdx-js/loader": "^3.0.0",
    "@mdx-js/react": "^3.0.0",
    "@next/bundle-analyzer": "^15.0.3",
    "@next/mdx": "^14.0.4",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@types/date-fns": "^2.6.0",
    "@types/mdx": "^2.0.7",
    "@types/node": "^20.10.8",
    "@types/react": "^18.2.47",
    "@types/react-dom": "^18.2.18",
    "acorn": "^8.10.0",
    "acorn-jsx": "^5.3.2",
    "autoprefixer": "^10.4.7",
    "axios": "^1.7.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "css-minimizer-webpack-plugin": "^7.0.0",
    "date-fns": "^3.6.0",
    "escape-string-regexp": "^5.0.0",
    "fast-glob": "^3.2.12",
    "framer-motion": "^10.15.2",
    "lucide-react": "^0.427.0",
    "next": "^14.0.4",
    "next-cloudinary": "^6.12.0",
    "next-intl": "^3.19.1",
    "qs": "^6.13.0",
    "react": "^18.2.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "react-hook-form": "^7.53.0",
    "react-loading-skeleton": "^3.5.0",
    "react-markdown": "^9.0.1",
    "recma-import-images": "0.0.3",
    "rehype-highlight": "^7.0.0",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "remark-rehype-wrap": "0.0.3",
    "remark-unwrap-images": "^4.0.0",
    "shiki": "^0.11.1",
    "swr": "^2.2.5",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^3.4.10",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.3.3",
    "unified-conditional": "0.0.2",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "@types/qs": "^6.9.15",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.0.4",
    "prettier": "^3.3.2",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "sharp": "0.33.1"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    'tailwindcss/nesting': {},
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: prettier.config.js
================
/** @type {import('prettier').Options} */
module.exports = {
  singleQuote: true,
  semi: false,
  plugins: ['prettier-plugin-tailwindcss'],
}

================
File: README.md
================
# Studio

Studio is a [Tailwind UI](https://tailwindui.com) site template built using [Tailwind CSS](https://tailwindcss.com) and [Next.js](https://nextjs.org).

## Getting started

To get started with this template, first install the npm dependencies:

```bash
npm install
```

Next, run the development server:

```bash
npm run dev
```

Finally, open [http://localhost:3000](http://localhost:3000) in your browser to view the website.

## Customizing

You can start editing this template by modifying the files in the `/src` folder. The site will auto-update as you edit these files.

## License

This site template is a commercial product and is licensed under the [Tailwind UI license](https://tailwindui.com/license).

## Learn more

To learn more about the technologies used in this site template, see the following resources:

- [Tailwind CSS](https://tailwindcss.com/docs) - the official Tailwind CSS documentation
- [Next.js](https://nextjs.org/docs) - the official Next.js documentation
- [Framer Motion](https://www.framer.com/docs/) - the official Framer Motion documentation
- [MDX](https://mdxjs.com/) - the official MDX documentation

================
File: tagadart-ts.code-workspace
================
{
  "folders": [
    {
      "path": ".",
    },
  ],
  "settings": {
    "CodeGPT.apiKey": "CodeGPT Plus Beta",
    "workbench.colorCustomizations": {
      "activityBar.activeBackground": "#93e6fc",
      "activityBar.background": "#93e6fc",
      "activityBar.foreground": "#15202b",
      "activityBar.inactiveForeground": "#15202b99",
      "activityBarBadge.background": "#fa45d4",
      "activityBarBadge.foreground": "#15202b",
      "commandCenter.border": "#15202b99",
      "sash.hoverBorder": "#93e6fc",
      "statusBar.background": "#61dafb",
      "statusBar.foreground": "#15202b",
      "statusBarItem.hoverBackground": "#2fcefa",
      "statusBarItem.remoteBackground": "#61dafb",
      "statusBarItem.remoteForeground": "#15202b",
      "titleBar.activeBackground": "#61dafb",
      "titleBar.activeForeground": "#15202b",
      "titleBar.inactiveBackground": "#61dafb99",
      "titleBar.inactiveForeground": "#15202b99"
    },
    "peacock.color": "#61dafb",
  },
}

================
File: tailwind.config.ts
================
import { type Config } from 'tailwindcss'
import defaultTheme from 'tailwindcss/defaultTheme'

const isProduction = process.env.NODE_ENV === 'production'

export default {
  darkMode: ['class'],
  // content: isProduction ? ['./src/**/*.{js,jsx,mdx,ts,tsx}'] : [], // Only scan files for purge in production
  content: ['./src/**/*.{js,jsx,mdx,ts,tsx}'],

  theme: {
    fontSize: {
      xs: ['0.75rem', { lineHeight: '1rem' }],
      sm: ['0.875rem', { lineHeight: '1.5rem' }],
      base: ['1rem', { lineHeight: '1.75rem' }],
      lg: ['1.125rem', { lineHeight: '1.75rem' }],
      xl: ['1.25rem', { lineHeight: '2rem' }],
      '2xl': ['1.5rem', { lineHeight: '2.25rem' }],
      '3xl': ['1.75rem', { lineHeight: '2.25rem' }],
      '4xl': ['2rem', { lineHeight: '2.5rem' }],
      '5xl': ['2.5rem', { lineHeight: '3rem' }],
      '6xl': ['3rem', { lineHeight: '3.5rem' }],
      '7xl': ['4rem', { lineHeight: '4.5rem' }],
    },
    extend: {
      borderRadius: {
        '4xl': '2.5rem',
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      backgroundImage: {
        'primary-gradient': 'linear-gradient(to left, #acb6e5, #74ebd5)',
      },
      colors: {
        primary: {
          '50': '#f0fdfa',
          '100': '#cdfaf0',
          '200': '#9af5e0',
          '300': '#74ebd5',
          '400': '#2fd2b8',
          '500': '#16b6a0',
          '600': '#0f9282',
          '700': '#10756a',
          '800': '#125d56',
          '900': '#144d47',
          '950': '#052e2c',
          DEFAULT: '#74ebd5',
        },
        secondary: {
          '50': '#f2f4fb',
          '100': '#e7ebf8',
          '200': '#d3d9f2',
          '300': '#acb6e5',
          '400': '#9ba1de',
          '500': '#8284d2',
          '600': '#6e69c2',
          '700': '#5e58aa',
          '800': '#4d498a',
          '900': '#42406f',
          '950': '#272640',
          PRIMARY: '#acb6e5',
        },
        accent: '#657786',
        success: '#28a745',
        warning: '#ffc107',
        danger: '#dc3545',
      },
      fontFamily: {
        display: ['var(--font-inter)', ...defaultTheme.fontFamily.sans],
        sans: ['var(--font-mona-sans)', ...defaultTheme.fontFamily.sans],
      },
    },
  },
  plugins: [require('@tailwindcss/typography'), require('tailwindcss-animate')],
} satisfies Config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es6",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next-sitemap.config.js"
  ],
  "exclude": ["node_modules"]
}
